{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Learning Graphs","text":"<p>Welcome to the website for Learning Graphs.  Learning Graphs are concept dependency graphs that are used to:</p> <ol> <li>Understand the important concepts in a course and their dependencies</li> <li>Suggest learning paths to achieve learning objectives</li> <li>Serve as the core data structure for hyper-personalization of lesson plans by generative AI agents.</li> </ol> <p>Please see the About This Site for more details.</p> <p>Please contact me on LinkedIn</p> <p>Thanks! - Dan</p>"},{"location":"about/","title":"About the Learning Graphs Website","text":"<p>The goal of this website is to enable teaching the concepts around Learning Graphs.  It was inspired by the 1988 cyberpunk science fiction novel The Diamond Age: Or, A Young Lady's Illustrated Primer by Neal Stephenson.  In this novel, a child uses a tablet-like device called \"The Primer\" that generates customized stories in real-time to meet the needs of the child.  The stories get more sophisticated as the needs of the child mature.</p> <p>This form of highly-customized learning is our goal.  We believe that learning graphs are the core data structure that these intelligent learning agents will be built on.</p> <p>Today, there are no formal standards for Learning Graphs.  We hope that the resources on this site can enable an organization to publish these learning graph interoperability standards.  See our chapter on Validating Learning Graphs for examples.</p>"},{"location":"about/#terminology","title":"Terminology","text":"<p>In this course, the term learning graph (lower cases) will be used to describe the general topic of using concept graphs to empower intelligent agents to generate customized content.</p> <p>We will use the term Learning Graph to describe a JSON file that conforms to our proposed Leaning Graph standard.</p> <p>We will also use the term Concept Dependency Graph or CDG to describe the general graph structure of these systems.</p> <p>We also will be using SKOS terminology to describe Concepts.  When in doubt, we encourage you to use the W3C SKOS definitions for concepts and their relationships.</p>"},{"location":"about/#integration-with-other-projects","title":"Integration with other Projects","text":"<p>This websites puts a focus on the creation and editing of learning graphs for hyper-personalization of learning content.</p> <p>It does not cover the following topics:</p> <ol> <li>Graph Algorithms - Graph algorithms are used to traverse a learning graph to build custom lesson plans.  For this topic please see the Graph Algorithms.  To leverage learning graphs, understanding dependency path finding algorithms is essential.</li> <li>LMS Integration - We do not cover the topic of integrating learning graphs into learning management systems.  For this topic please see the Graph Learning Management Systems</li> <li>Systems Thinking - learning graphs do not stand alone.  To be valuable they need to integrate with a complex network of other technologies that make up our educational systems.  To get exposure to Systems Thinking we encourage you to use the Systems Thinking for Technologists.  We feel that understanding the Network Effect will help you understand how learning graph standards can transform education.</li> </ol> <p>In addition to these websites, we have also worked with specific subject-matter experts to create examples of learning graphs. Please see the Case Studies section for descriptions and links to these websites.</p>"},{"location":"about/#what-is-a-learning-graph","title":"What is a Learning Graph?","text":"<p>Learning Graphs are concept dependency graphs that are used to:</p> <ol> <li>Understand and visualize the important concepts in a course and their dependencies.</li> <li>Suggest learning paths to achieve learning objectives</li> <li>Serve as the core data structure for hyper-personalization of lesson plans by generative AI and other content such as MicroSims by agents.</li> </ol>"},{"location":"about/#course-learning-objectives","title":"Course Learning Objectives","text":"<p>Here are 10 learning objectives for a course on learning Concept Dependency Graphs (CDGs) using Bloom's Taxonomy, aligned with the use of Generative AI (GenAI) for analyzing course content, creating concept taxonomies, visualizing, editing, and personalizing lesson plans:</p>"},{"location":"about/#1-remembering","title":"1. Remembering:","text":"<p>Identify the basic structure of Learning Graphs used to model concepts and their dependencies in a course.  Understand the graph data model and how concept dependency graphs (CDGs) are used to model learning concept graphs.</p> <p>Example: Define the nodes and edges in a Learning Graph and recognize them in different graphical representations.</p>"},{"location":"about/#2-understanding","title":"2. Understanding:","text":"<p>Explain how Learning Graphs represent the relationships between course concepts and how they suggest learning paths based on these dependencies.</p> <p>Example: Describe how prerequisite concepts are connected to higher-level concepts within a learning graph.</p>"},{"location":"about/#3-applying","title":"3. Applying:","text":"<p>Use Generative AI to generate concepts lists or use NLP frameworks to extract key concepts from course materials and generate a list of vertices (nodes) for building a learning graph.</p> <p>Example: Apply AI tools to analyze a syllabus or textbook and identify core concepts.</p>"},{"location":"about/#4-apply-javascript-graph-libraries","title":"4. Apply JavaScript Graph Libraries","text":"<p>Use vis.js (or similar tools) to visualize a  Learning Graph** for a given set of concepts and dependencies.</p> <ul> <li>Example: Use vis.js to create an interactive graph of course concepts and their dependencies.</li> </ul>"},{"location":"about/#5-analyzing-dependencies","title":"5. Analyzing Dependencies","text":"<p>Analyze concept relationships using Generative AI to discover hidden dependencies that may not be immediately obvious from the course materials.</p> <p>Example: Use an AI agent to uncover both direct and indirect concept dependencies based on patterns found in text data.</p>"},{"location":"about/#6-evaluating","title":"6. Evaluating","text":"<p>Evaluate the quality of a generated learning graph in terms of completeness, accuracy, and alignment with learning objectives.</p> <p>Example: Critically assess a learning graph created by a user or an AI agent for coverage of all key topics and concept dependencies.</p>"},{"location":"about/#7-assess","title":"7.  Assess","text":"<p>Analyze personalized learning paths generated from a learning graph**, ensuring they meet the individual learning objectives of diverse student profiles.</p> <p>Example: Review AI-generated personalized lesson plans for different student backgrounds and adjust if needed.*</p>"},{"location":"about/#8-creating","title":"8. Creating","text":"<p>Use Generative AI to automatically generate concept lists, dependencies, and concept taxonomies for a course, organizing concepts into hierarchical categories that represent broader topics.</p> <p>Example: Create a hierarchical taxonomy of concepts in a data structures course using GenAI tools.</p>"},{"location":"about/#9-edit-cgss","title":"9.  Edit CGSs","text":"<p>Edit a CDG interactively to improve learning pathways**, adding or removing dependencies between concepts based on AI suggestions or instructor insights.</p> <p>Example: Modify a CDG for a calculus course by adding missing concepts or removing unnecessary dependencies.</p>"},{"location":"about/#10-design-intelligent-ai-agents-that-use-cdgs-to-generate-hyper-personalized-lesson-plans-adapting-to-each-students-learning-progress-and-needs","title":"10.  Design intelligent AI agents that use CDGs to generate hyper-personalized lesson plans, adapting to each student's learning progress and needs.","text":"<p>Example: Build an AI system that integrates with a Learning Management System (LMS) to continuously update personalized learning paths based on the student's mastery of concepts.</p>"},{"location":"about/#summary","title":"Summary","text":"<p>Each of these objectives integrates various levels of Bloom's Taxonomy (from remembering and understanding basic concepts to applying, analyzing, evaluating, and creating new knowledge) while leveraging Generative AI and CDGs to enhance the learning process.</p>"},{"location":"checklist/","title":"Site Checklist","text":"<ol> <li>Customize the fields in your mkdocs.yml file</li> <li>Configure Google Analytics to use the right site ID</li> <li>Make sure that your .gitignore file includes the <code>site</code> directory</li> <li>Test the build</li> <li>Make sure the Edit button appears</li> <li>Make sure that code color heightening renders correctly</li> <li>run <code>git config advice.addIgnoredFile false</code></li> </ol>"},{"location":"contact/","title":"Contact","text":"<p>Please contact me on LinkedIn</p> <p>Thanks! - Dan</p>"},{"location":"course-description/","title":"Course Description","text":"<p>Title: Customizing Learning Materials with Intelligent Agents</p> <p>In this course, we will learn how on-line content can be generated or quickly customized to the needs of individuals or small groups of students.  We begin with a discussion of learning concepts and the use of concept dependency graphs (CDGs) to model these concepts.  We then show how generative AI tools can be used to generate these concepts or review existing concepts graphs for suitability of learning objectives.  We then describe the process of creating taxonomies and ontologies that can be used with CDGs.  We cover topics of abstraction, clustering and graph algorithms such as graph traversal, search and dependency analysis.  </p> <p>Next we cover the topic of tools to visualize and navigate CDG and explore tools such as vis.js for visualizing CDGs.  Finally, we show how these data structures and algorithms are used together with intelligent agents to customize complex lesson plans for students.</p>"},{"location":"course-description/#prerequisites","title":"Prerequisites","text":"<p>Student should have access to the internet and be familiar with using a web browser and search engines.  Students should also have access to a generative AI tool such as ChatGPT.</p> <p>It is helpful, but not required, for students should have a background in data structures, teaching theory, lesson plans, curriculum development processes.  Please consult our Glossary of Terms for a list of background terms and their defintions.</p>"},{"location":"glossary/","title":"Glossary of Terms","text":"<p>This glossary was create with the help of ChatGPT using a prompt that uses the ISO IEC 11179 standard for creating precise, concise, distinct and non-circular definitions.</p>"},{"location":"glossary/#adaptive-learning","title":"Adaptive Learning","text":"<p>A method of delivering personalized learning experiences by dynamically adjusting the content, pace, and instructional approach in response to an individual learner's performance, needs, and preferences.</p> <p>Example: An adaptive learning system uses a concept graph to create customized content for a student. After analyzing the student\u2019s responses to assessment questions, the system identifies specific areas where the student needs more practice. Based on the student's performance and the relationships between concepts in the graph, it selects appropriate materials, such as videos, exercises, or explanations, focusing on strengthening the weaker concepts before advancing to more complex topics. The system continually updates the content based on the student's progress.</p>"},{"location":"glossary/#agent","title":"Agent","text":"<p>An autonomous entity capable of perceiving its environment, processing inputs, and taking actions to achieve specific goals or objectives, often with the ability to adapt or learn from experience.</p> <p>Example:  An intelligent agent in an educational platform uses a learning graph to create a customized lesson plan for students. Based on the results of the prior week's quiz and a predefined learning objective, the agent identifies key concepts where students struggled and selects activities that reinforce those concepts. The lesson plan adapts to each student's individual learning needs, ensuring that the content aligns with their current understanding and progress.</p> <ul> <li>Also known as: Intelligent Agent</li> </ul>"},{"location":"glossary/#agent-characteristics","title":"Agent Characteristics","text":"<p>The main characteristics of learning graph intelligent agents.</p> <p>This characteristics include:</p> <p>Autonomy and Decision-Making: Intelligent agents can operate independently, making decisions to achieve goals, unlike LLMs, which respond only to prompts.</p> <p>Iterative Workflows: Intelligent agents refine their outputs through repeated cycles, while LLMs do not improve iteratively without external integration.</p> <p>Tool Use and Environmental Interaction: Intelligent agents interact with external tools and environments, whereas LLMs lack this capability.  Specifically, in this course, agents must be able to access a learning graph and generate learning paths for lesson plan customization.</p> <p>Modular Design and Multi-Agent Collaboration: Intelligent agents can work in multi-agent systems, solving complex problems together, unlike LLMs, which work in isolation.</p>"},{"location":"glossary/#alternate-label","title":"Alternate Label","text":"<p>A synonym or alternative term used to represent the same concept within a given context, providing additional ways to reference or describe the concept without altering its meaning.</p> <p>Example: In a learning system, alternative labels are used to provide alternate names for learning concepts. For instance, the concept of \"addition\" in mathematics may have alternative labels such as \"summing\" or \"totaling.\" These alternative labels allow students or teachers to reference the same concept using different terminology, accommodating variations in language or teaching style without changing the underlying concept.</p>"},{"location":"glossary/#blooms-taxonomy","title":"Bloom's Taxonomy","text":""},{"location":"glossary/#concept","title":"Concept","text":"<p>A fundamental unit of knowledge, representing an abstract idea or a mental construct that can be described, categorized, and related to other concepts within a domain.</p> <p>Example: In an educational setting, the concept of \"photosynthesis\" represents the process by which plants convert light energy into chemical energy, and it can be related to concepts such as \"sunlight,\" \"chlorophyll,\" and \"carbon dioxide.\"</p>"},{"location":"glossary/#concept-dependency","title":"Concept Dependency","text":"<p>A relationship between two or more concepts where the understanding of one concept is required before another can be fully understood or applied.</p> <p>Example: The concept of \"multiplication\" is dependent on the understanding of \"addition,\" as multiplication is often described as repeated addition. Therefore, \"addition\" is a prerequisite for learning \"multiplication.\"</p>"},{"location":"glossary/#concept-dependency-graph","title":"Concept Dependency Graph","text":"<p>A visual representation of the relationships between concepts, where nodes represent individual concepts and directed edges indicate dependencies between them, showing how the mastery of one concept is necessary before another.</p> <p>Example: In a concept dependency graph for an algebra course, \"solving linear equations\" may depend on the prior understanding of \"basic arithmetic operations\" and \"variables.\" This graph helps to design learning paths for students based on their current knowledge.</p>"},{"location":"glossary/#directed-graph","title":"Directed Graph","text":"<p>A graph consisting of nodes (vertices) connected by edges (arcs) that have a specific direction, indicating a one-way relationship between the nodes.</p> <p>Example: A directed graph representing traffic flow in a city could have intersections as nodes and one-way streets as directed edges, showing how vehicles can travel from one intersection to another.</p>"},{"location":"glossary/#dublin-core-metadata","title":"Dublin Core Metadata","text":"<p>A standardized set of 15 metadata elements used to describe and catalog digital resources, making them easier to find, manage, and share.</p> <p>In a learning graph file, Dublin Core Metadata is used to annotate the publication information associated with the file. This ensures consistent organization and enhances discoverability of resources across the platform.</p> <p>Example: The learning graph for \u201cGraph Algorithms\u201d with Dublin Core Metadata elements such as Title (\u201cIntroduction to Graph Algorithms\u201d), Creator (\u201cDan McCreary\u201d), and Subject (\u201cComputer Science\u201d).</p>"},{"location":"glossary/#foundational-concepts","title":"Foundational Concepts","text":"<p>Basic or essential concepts that serve as the building blocks for understanding more complex ideas or advanced knowledge within a domain.</p> <p>Example: In mathematics, \"number sense\" and \"basic arithmetic\" are foundational concepts for understanding more advanced topics such as algebra and calculus.</p>"},{"location":"glossary/#generative-ai","title":"Generative AI","text":"<p>A type of artificial intelligence capable of producing new content, such as text, images, or other data, by learning patterns from existing data and generating outputs that follow those patterns.</p> <p>Example: A generative AI model can create personalized learning materials by analyzing a student's previous responses and generating explanations, questions, or study guides tailored to their learning progress.</p>"},{"location":"glossary/#hyper-personalization","title":"Hyper-Personalization","text":"<p>The process of creating highly individualized experiences or content by leveraging advanced data analysis and machine learning to tailor recommendations, content, and interactions based on unique characteristics of the user.</p> <p>Example: In an online learning platform, hyper-personalization is used to generate lesson plans based on a student's learning preferences, quiz performance, and real-time concept mastery, creating a unique learning path for each student.</p>"},{"location":"glossary/#iso-definition","title":"ISO Definition","text":"<p>A term definition is considered to be consistent with ISO/IEC 11179 metadata registry guideline if it meets the following criteria:</p> <ol> <li>Precise</li> <li>Concise</li> <li>Distinct</li> <li>Non-circular</li> <li>Unencumbered with business rules</li> </ol>"},{"location":"glossary/#javascript-object-notation-json","title":"JavaScript Object Notation (JSON)","text":"<p>A lightweight, text-based data interchange format used to store and transmit structured data.</p> <p>In the field of learning graphs, JSON is commonly used for data representation, including storing concept nodes, edges, groups, and learning graph metadata. JSON\u2019s simplicity and compatibility with JavaScript make it ideal for integration with tools like MicroSims, p5.js and vis.js.</p>"},{"location":"glossary/#json-schema","title":"JSON Schema","text":""},{"location":"glossary/#journey-map","title":"Journey Map","text":"<p>A visual or structured representation of an individual's experience as they move through a sequence of steps, interactions, or stages to achieve a specific goal, often used to identify touchpoints, challenges, and opportunities for improvement.</p> <p>Example: A journey map for a student's learning process can be derived from a learning concept graph. For instance, the graph shows the required concepts to master \"calculus,\" such as \"basic arithmetic\" and \"algebra.\" A journey map can be created that outlines the student's progression through these concepts, highlighting key milestones, struggles, and recommended interventions at each stage to ensure the successful understanding of calculus.</p>"},{"location":"glossary/#learning-graph","title":"Learning Graph","text":"<p>A network graph that stores learning Concepts and their dependencies.</p> <p>Learning graphs are a type of Directed Graphs where every node is a learning Concept and every edge is a concept dependency or prerequisite.</p>"},{"location":"glossary/#learning-management-system-lms","title":"Learning Management System (LMS)","text":"<p>A software platform designed to deliver, manage, and track educational content and activities, enabling learners to access courses, assessments, and other instructional resources, while providing tools for instructors to monitor progress and performance.</p> <p>Example: An LMS can use a learning graph to create customized lesson plans by analyzing a student's performance on past quizzes and identifying gaps in their understanding. For example, if a student demonstrates a weak grasp of \"fractions\" in a math course, the LMS can automatically adjust the lesson plan by offering additional exercises, videos, or tutorials on that specific concept before progressing to more advanced topics like \"algebra.\" This personalized approach ensures that each student follows a learning path tailored to their individual needs.</p>"},{"location":"glossary/#learning-objective","title":"Learning Objective","text":"<p>A specific, measurable goal that defines what a learner should know or be able to do by the end of a lesson, course, or training program.</p> <p>Example: A learning objective for a biology class might be: \"Students will be able to explain the process of cellular respiration and identify its stages.\"</p>"},{"location":"glossary/#learning-path","title":"Learning Path","text":"<p>A structured sequence of learning activities, materials, or modules designed to guide a learner through progressively more advanced content to achieve a specific learning goal.</p> <p>Example: A learning path for mastering algebra might start with basic arithmetic, followed by lessons on solving equations, and then advance to systems of equations and quadratic functions.</p>"},{"location":"glossary/#microsim","title":"MicroSim","text":"<p>A small stand-alone educational simulation of a concept.  MicroSims are designed to be easy for generative AI agents to create and modify to accommodate the individual needs of students.</p> <p>See also: MicroSims Website</p>"},{"location":"glossary/#node-group","title":"Node Group","text":"<p>A collection of interconnected nodes within a graph that share common characteristics or relationships, often treated as a unit for analysis or visualization.</p> <p>Example: In a concept dependency graph, a node group could represent all the foundational concepts needed for understanding calculus, such as \"algebra,\" \"trigonometry,\" and \"functions.\"</p> <ul> <li>Also know as: Community</li> <li>Also know as: Cluster</li> </ul>"},{"location":"glossary/#preferred-label","title":"Preferred Label","text":"<p>The preferred name of a Concept.</p> <p>In general, a concept has one and only one preferred name per language such as English, but a Concept may have many alternate labels.</p> <p>Within a learning graph, no two Concepts should have the same preferred name.</p>"},{"location":"glossary/#rhizombic-learning","title":"Rhizombic Learning","text":"<p>An educational model inspired by the way rhizomes grow and spread, allowing for non-linear, interconnected, and expansive pathways of knowledge acquisition.</p> <p>The Rhizombic Learning approach contrasts with traditional hierarchical or linear models, focusing instead on exploration, connection, and adaptability.  Learning graphs are ideal tools to encourage the curious leaner.</p>"},{"location":"glossary/#skos","title":"SKOS","text":"<p>A W3C standard for representing structured knowledge in a simple, machine-readable format, allowing for the sharing and linking of controlled vocabularies, taxonomies, thesauri, and other knowledge organization systems across different systems and applications.</p> <p>Example: SKOS can be used to exchange learning graphs by encoding the relationships between educational concepts as a set of SKOS concepts and properties. For instance, a graph that shows the dependency between \"basic arithmetic,\" \"algebra,\" and \"calculus\" can be expressed using SKOS, with \"broader\" and \"narrower\" properties to define the hierarchy and concept relationships. This allows different educational platforms to share and reuse the same structure for organizing learning materials.</p> <p>Note that SKOS is ideal for storing taxonomies and ontologies, but is not use for showing learning order dependencies.</p> <ul> <li>Also Known as: Simple Knowledge Organization System</li> </ul>"},{"location":"glossary/#touchpoint","title":"Touchpoint","text":"<p>An interaction or moment of engagement between a learner and a learning management system (LMS), typically associated with key stages in the learning process where progress, feedback, or guidance is provided.</p> <p>Example: In a learning management system built around a learning graph, touchpoints occur when a student completes a quiz, views instructional content, or seeks help on a specific concept. By analyzing these touchpoints, instructors can identify where students frequently encounter difficulties or disengage. Touchpoint analysis might reveal that many students struggle with \"fractions\" before advancing to \"algebra,\" allowing instructors to redesign the course by adding additional resources or alternative explanations at that critical stage, improving student success.</p>"},{"location":"glossary/#visjs","title":"Vis.js","text":"<p>A JavaScript library for visualizing graph networks.</p> <p>See: https://visjs.github.io/vis-network/docs/network/</p>"},{"location":"glossary/#yml","title":"YML","text":"<p>A human-readable data serialization format often used for configuration files and data exchange. YML (YAML Ain't Markup Language) structures data hierarchically using indentation, making it suitable for describing learning graph configurations and settings in a clear, concise way.</p> <p>Example: The mkdocs system uses a configuration file called mkdocs.yml to generate the content of a microsite.  See the mkdocs for this site as an example: https://github.com/dmccreary/learning-graphs/blob/main/mkdocs.yml</p>"},{"location":"glossary/#zone-of-proximal-development-zpd","title":"Zone of Proximal Development (ZPD)","text":"<p>The range of tasks or concepts that a learner can accomplish with guidance but not yet independently. This concept, introduced by Lev Vygotsky, highlights the importance of targeted assistance in learning.</p> <p>In a learning graph, the ZPD is used to guide real-time personalization by identifying concepts that a student is ready to learn with support. A LMS leverages data analytics and AI to dynamically adjust content, ensuring it remains within the student's ZPD.</p> <p>Example: The LMS identifies that a student struggling with graph traversal is within their ZPD for mastering depth-first search and provides an interactive simulation to bridge the gap.</p>"},{"location":"how-we-built-this-site/","title":"How We Built This Site","text":"<p>This page describes how we built this website and some of  the rationale behind why we made various design choices.</p>"},{"location":"how-we-built-this-site/#python","title":"Python","text":"<p>MicroSims are about how we use generative AI to create animations and simulations.  The language of AI is Python.  So we wanted to create a site that could be easily understood by Python developers.</p>"},{"location":"how-we-built-this-site/#mkdocs-vs-docusaurus","title":"Mkdocs vs. Docusaurus","text":"<p>There are two main tools used by Python developers to write documentation: Mkdocs and Docusaurus.  Mkdocs is easier to use and more popular than Docusaurus. Docusaurus is also optimized for single-page applications. Mkdocs also has an extensive library of themes and plugins. None of us are experts in JavaScript or React. Based on our ChatGPT Analysis of the Tradeoffs we chose mkdocs for this site management.</p>"},{"location":"how-we-built-this-site/#github-and-github-pages","title":"GitHub and GitHub Pages","text":"<p>GitHub is a logical choice to store our  site source code and documentation.  GitHub also has a Custom GitHub Action that does auto-deployment if any files on the site change. We don't currently have this action enabled, but other teams can use this feature if they don't have the ability to do a local build with mkdocs.</p> <p>GitHub also has Issues,  Projects and releases that we can use to manage our bugs and tasks.</p> <p>The best practice for low-cost websites that have public-only content is GitHub Pages. Mkdocs has a command (<code>mkdocs gh-deploy</code>) that does deployment directly to GitHub Pages.  This was an easy choice to make.</p>"},{"location":"how-we-built-this-site/#github-clone","title":"GitHub Clone","text":"<p>If you would like to clone this repository, here are the commands:</p> <pre><code>mkdir projects\ncd projects\ngit clone https://github.com/dmccreary/microsims\n</code></pre>"},{"location":"how-we-built-this-site/#after-changes","title":"After Changes","text":"<p>After you make local changes you must do the following:</p> <pre><code># add the new files to a a local commit transaction\ngit add FILES\n# Execute the a local commit with a message about what and why you are doing the commit\ngit commit -m \"comment\"\n# Update the central GitHub repository\ngit push\n</code></pre>"},{"location":"how-we-built-this-site/#material-theme","title":"Material Theme","text":"<p>We had several options when picking a mkdocs theme:</p> <ol> <li>Mkdocs default</li> <li>Readthedocs</li> <li>Third-Party Themes See Ranking</li> </ol> <p>The Material Theme had 16K stars.  No other theme had over a few hundred. This was also an easy design decision.</p> <p>One key criterial was the social Open Graph tags so that when our users post a link to a simulation, the image of the simulation is included in the link.  Since Material supported this, we used the Material theme. You can see our ChatGPT Design Decision Analysis if you want to check our decision process.</p>"},{"location":"how-we-built-this-site/#enable-edit-icon","title":"Enable Edit Icon","text":"<p>To enable the Edit icon on all pages, you must add the edit_uri and the content.action.edit under the theme features area.</p> <pre><code>edit_uri: edit/master/docs/\n</code></pre> <pre><code>    theme:\n        features:\n            - content.action.edit\n</code></pre>"},{"location":"how-we-built-this-site/#conda-vs-venv","title":"Conda vs VENV","text":"<p>There are two choices for virtual environments.  We can use the native Python venv or use Conda.  venv is simle but is only designed for pure Python projects.  We imagine that this site could use JavaScript and other langauges in the future, so we picked Conda. There is nothing on this microsite that prevents you from using one or the other.  See the ChatGPT Analysis Here.</p> <p>Here is the conda script that we ran to create a new mkdocs environment that also supports the material social imaging libraries.</p> <pre><code>conda deactivate\nconda create -n mkdocs python=3\nconda activate mkdocs\npip install mkdocs \"mkdocs-material[imaging]\"\n</code></pre>"},{"location":"how-we-built-this-site/#mkdocs-commands","title":"Mkdocs Commands","text":"<p>There are three simple mkdoc commands we use.</p>"},{"location":"how-we-built-this-site/#local-build","title":"Local Build","text":"<pre><code>mkdocs build\n</code></pre> <p>This builds your website in a folder called <code>site</code>.  Use this to test that the mkdocs.yml site is working and does not have any errors.</p>"},{"location":"how-we-built-this-site/#run-a-local-server","title":"Run a Local Server","text":"<pre><code>mkdocs serve\n</code></pre> <p>This runs a server on <code>http://localhost:8000</code>. Use this to test the display formatting locally before you push your code up to the GitHub repo.</p> <pre><code>mkdoc gh-deploy\n</code></pre> <p>This pushes everything up to the GitHub Pages site. Note that it does not commit your code to GitHub.</p>"},{"location":"how-we-built-this-site/#mkdocs-material-social-tags","title":"Mkdocs Material Social Tags","text":"<p>We are using the Material Social tags.  This is a work in progress!</p> <p>Here is what we have learned.</p> <ol> <li>There are extensive image processing libraries that can't be installed with just pip.  You will need to run a tool like brew on the Mac to get the libraries installed.</li> <li>Even after <code>brew</code> installs the libraries, you have to get your environment to find the libraries.  The only way I could get that to work was to set up a local UNIX environment variable.</li> </ol> <p>Here is the brew command that I ran:</p> <pre><code>brew install cairo freetype libffi libjpeg libpng zlib\n</code></pre> <p>I then had to add the following to my ~/.zshrc file:</p> <pre><code>export DYLD_FALLBACK_LIBRARY_PATH=/opt/homebrew/lib\n</code></pre> <p>Note that I am running on a Mac with Apple silicon.  This means that the image libraries that brew downloads must be specific to the Mac Arm instruction set.</p> <ul> <li>Cover images for blog post #4364</li> <li>Discussion on overriding the Social Card Image</li> </ul>"},{"location":"how-we-built-this-site/#upper-alpha-lists","title":"Upper Alpha Lists","text":"<p>When we design multiple-choice questions we want our possible responses to be numbered with uppercase alphas like this:</p> <p>A. Response 1 B. Response 2 C. Response 3 D. Response 4</p> <p>However, standard Markdown only supports numeric lists.  So to get around this we have to wrap the responses in a \"superfence\" that will turn it into code blocks and then we style it with CSS.</p> <p>See the css/extras.css for this CSS.  The way we store this is in the following format:</p> <pre><code>1. Response 1\n2. Response 2\n3. Response 3\n4. Response 4\n</code></pre>"},{"location":"license/","title":"Creative Commons License","text":"<p>All content in this repository is governed by the following license agreement:</p>"},{"location":"license/#license-type","title":"License Type","text":"<p>Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0 DEED)</p>"},{"location":"license/#link-to-license-agreement","title":"Link to License Agreement","text":"<p>https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en</p>"},{"location":"license/#your-rights","title":"Your Rights","text":"<p>You are free to:</p> <ul> <li>Share \u2014 copy and redistribute the material in any medium or format</li> <li>Adapt \u2014 remix, transform, and build upon the material</li> </ul> <p>The licensor cannot revoke these freedoms as long as you follow the license terms.</p>"},{"location":"license/#restrictions","title":"Restrictions","text":"<ul> <li>Attribution \u2014 You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.</li> <li>NonCommercial \u2014 You may not use the material for commercial purposes.</li> <li>ShareAlike \u2014 If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original.</li> <li>No additional restrictions \u2014 You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.</li> </ul> <p>Notices</p> <p>You do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation.</p> <p>No warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material.</p> <p>This deed highlights only some of the key features and terms of the actual license. It is not a license and has no legal value. You should carefully review all of the terms and conditions of the actual license before using the licensed material.</p>"},{"location":"references/","title":"References for Learning Graphs","text":""},{"location":"references/#academic-papers","title":"Academic Papers","text":""},{"location":"references/#sample-prompt-for-curriculum-design","title":"Sample Prompt for Curriculum Design","text":"<pre><code>What research papers discuss the use of graph representations\nof course concepts and the impact of concept dependency on\ncurriculum design?\n</code></pre>"},{"location":"references/#chatgpt-response","title":"ChatGPT Response","text":"<p>Several research papers explore the use of graph representations to model course concepts and examine how concept dependencies influence curriculum design:</p>"},{"location":"references/#kcube","title":"KCUBE","text":"<p>\"KCUBE: A Knowledge Graph University Curriculum Framework for Student Advising and Career Planning\" by George Baciu et al. (2022): This paper introduces KCUBE, a framework that utilizes knowledge graphs to represent university curricula. The framework aids in managing, planning, and delivering course material by mapping relationships between course concepts, thereby assisting students and educators in curriculum planning and career advising.</p> <p>SpringerLink</p>"},{"location":"references/#concept-graph-learning-from-educational-data","title":"Concept Graph Learning from Educational Data","text":"<p>Yiming Yang et al. (2015)</p> <p>This study addresses the challenge of detecting prerequisite relationships among courses by learning a directed universal concept graph. The approach supports curriculum design by identifying coherent sequences of courses based on concept dependencies.</p> <p>Carnegie Mellon CS</p>"},{"location":"references/#constructing-an-educational-knowledge-graph-with-concepts-linked-to-wikipedia","title":"Constructing an Educational Knowledge Graph with Concepts Linked to Wikipedia","text":"<p>Fu-Rong Dang et al. (2021)</p> <p>The authors construct a knowledge graph for Massive Open Online Courses (MOOCs) by extracting concepts from course descriptions and linking them to Wikipedia entries. This graph representation enhances the understanding of relationships among course concepts, facilitating more effective curriculum design.</p> <p>SpringerLink</p>"},{"location":"references/#supporting-curriculum-designers-in-developing-balanced-outcome-based-curriculums-using-knowledge-graphs","title":"Supporting Curriculum Designers in Developing Balanced Outcome-based Curriculums Using Knowledge Graphs","text":"<p>Ghadah Aldhalaan et al. (2023)</p> <p>This paper discusses how knowledge graphs can assist curriculum designers in mapping relationships between course concepts and student outcomes. By visualizing these dependencies, educators can create more balanced and cohesive curricula.</p> <p>Warse</p> <p>These studies demonstrate the potential of graph-based representations in capturing concept dependencies, thereby informing and improving curriculum design processes.</p>"},{"location":"references/#chatbot-prompt","title":"Chatbot Prompt","text":"<p>What research papers discuss the use of graph representations of course concepts and the impact of concept dependency on educational chatbots?</p>"},{"location":"references/#chatgpt-said","title":"ChatGPT said:","text":"<p>Several research studies have explored the integration of graph representations of course concepts and the impact of concept dependencies on the development and effectiveness of educational chatbots:</p>"},{"location":"references/#coursekg-an-educational-knowledge-graph-based-on-course-information-for-precision-teaching","title":"CourseKG: An Educational Knowledge Graph Based on Course Information for Precision Teaching","text":"<p>Ying Li et al. (2024): This study proposes CourseKG, an educational knowledge graph that structures course information to enhance personalized learning. By mapping relationships between course concepts, CourseKG enables educational chatbots to provide tailored guidance and support to learners, thereby improving the quality of teaching.</p> <p>MDPI</p>"},{"location":"references/#generate-knowledge-graphs-for-complex-interactions","title":"Generate Knowledge Graphs for Complex Interactions","text":"<p>Sunil Ramlochan (2023)</p> <p>This article discusses the use of knowledge graphs in AI conversational models, highlighting how structuring information about entities and their relationships can enhance the chatbot's ability to manage and utilize information in complex interactions. By maintaining context and providing personalized responses, knowledge graphs improve the chatbot's effectiveness in educational settings.</p> <p>Prompt Engineering</p> <p>These studies demonstrate that incorporating graph representations of course concepts and understanding concept dependencies can significantly enhance the functionality and educational value of chatbots. By leveraging structured knowledge, educational chatbots can provide more personalized, context-aware, and effective support to learners.</p>"},{"location":"references/#other-papers-and-articles","title":"Other Papers and Articles","text":""},{"location":"references/#knowedu","title":"KnowEdu","text":"<p>Chen, Penghe et al. \u201cKnowEdu: A System to Construct Knowledge Graph for Education.\u201d IEEE Access 6 (2018): 31553-31563.</p> <p>A system, called KnowEdu, to automatically construct knowledge graph for education, which adopts the neural sequence labeling algorithm on pedagogical data to extract instructional concepts and employs probabilistic association rule mining on learning assessment data to identify the educational relations between the concepts</p>"},{"location":"references/#design-and-implementation-of-curriculum-system-based-on-knowledge-graph","title":"Design and Implementation of Curriculum System Based on Knowledge Graph","text":"<p>Y., Xiaobing, S., Mike, C., Han, Y., Runming. Design and Implementation of Curriculum System Based on Knowledge Graph, in Proc IEEE International Conference on Consumer Electronics and Computer Engineering (ICCECE), pp. 767-770, 2021.</p>"},{"location":"references/#reimagine-the-college-textbook","title":"Reimagine the College Textbook","text":"<p>Opinion: The time has come to reimagine college textbooks for the modern digital era by Vinay K. Chaudhri November 11, 2024 in The Hechinger Report</p> <p>Key quotes:</p> <p>*A process known as \u201cknowledge engineering\u201d powers those improvements. It involves a systematic choice of concepts, a rigorous mapping of the relationships between those concepts and logical definitions that allow them to be used by artificial intelligence and understood by humans.</p> <p>The simple act of using a controlled vocabulary is vital for learning any complex topic.</p> <p>Books are linear while knowledge is not.</p> <p>Mapping of relationships across vastly different topics makes learning exciting and supports many novel capabilities, including precise connections across chapters, visualizations at multiple levels of detail and the development of textbook expert chatbots that can answer students\u2019 questions on the fly.*</p>"},{"location":"references/#knowledge-annotation-for-intelligent-textbooks","title":"Knowledge Annotation for Intelligent Textbooks","text":"<p>Knowledge Annotation for Intelligent Textbooks - 27 July 2021 - Mengdi Wang et. el,</p> <p>\u201cintelligent textbooks,\u201d which have the ability to guide readers according to their learning goals and current knowledge.</p>"},{"location":"references/#technology-resources","title":"Technology Resources","text":"<ol> <li>vis.js - https://visjs.github.io/vis-network/docs/network/</li> <li>mkdocs - https://www.mkdocs.org/ - this is our tool for building the website.  It converts Markdown into HTML in the <code>site</code> directory.</li> <li>mkdocs material theme - https://squidfunk.github.io/mkdocs-material/ - this is the theme for our site.  The theme adds the user interface elements that give our site the look and feel.  It also has the features such as social cards.</li> <li>GitHub Pages - https://pages.github.com/ - this is the free tool for hosting public websites created by mkdocs</li> <li>Markdown - https://www.mkdocs.org/user-guide/writing-your-docs/#writing-with-markdown - this is the format we use for text.  It allows us to have headers, lists, tables, links and images without learning HTML.</li> <li>Deploy Mkdocs GitHub Action - https://github.com/marketplace/actions/deploy-mkdocs - this is the tool we use to automatically build our site after edits are checked in with Git.</li> <li>Git Book - https://git-scm.com/book/en/v2 - a useful book on Git.  Just read the first two chapters to learn how to check in new code.</li> <li>Conda - https://conda.io/ - this is a command line tool that keeps our Python libraries organized for each project.</li> <li>VS Code - https://code.visualstudio.com/ - this is the integrated development environment we use to mange the files on our website.</li> <li>Markdown Paste - https://marketplace.visualstudio.com/items?itemName=telesoho.vscode-markdown-paste-image - this is the VS code extension we use to make sure we keep the markdown format generated by ChatGPT.</li> </ol>"},{"location":"student-volunteers-wanted/","title":"Student Volunteers Wanted","text":"<p>Volunteer Position: JavaScript and Python Developer for Learning Graph Viewer/Editor</p> <p>We are looking for motivated student volunteers to help develop a Learning Graph Viewer and Editor -- a tool designed to visualize and edit directed graphs that capture relationships between learning concepts. This project uses vis.js for interactive graph network editing and leverages generative AI to accelerate code development. As a volunteer, you'll contribute to an open-source project that will support students and educators worldwide, making a lasting educational impact.</p> <p>Responsibilities:</p> <ul> <li>Write and test JavaScript code for editing graph networks using the vis.js library.</li> <li>Assist with Python scripts and integrate with generative AI tools to streamline code creation.</li> <li>Collaborate on GitHub, manage code versions, and help ensure code quality.</li> </ul> <p>Qualifications:</p> <ul> <li>Familiarity with the UNIX shell, Git, and GitHub for code management.</li> <li>Access to a large-language such as ChatGPT or a local GPU running Ollama</li> <li>Skills in JavaScript and Python are beneficial but not required.</li> <li>A desire to learn, explore generative AI in coding, and make a global impact.</li> <li>Students should be able to dedicate about 4-hours per week to this project, however schedules are very flexible.</li> </ul> <p>This is a unique opportunity to apply your programming skills in a fun, dynamic environment while helping create a valuable resource for educators. All code will be available on GitHub, so your contributions will be visible to the community and useful to others.</p> <p>Please contact me on LinkedIn</p>"},{"location":"case-studies/","title":"Case Studies","text":""},{"location":"case-studies/#circuits","title":"Circuits","text":"<p>Circuits Learning Graph</p>"},{"location":"case-studies/#graph-algorithms","title":"Graph Algorithms","text":"<p>Graph Algorithms</p> <p>Learning Graph for Graph Algorithms</p>"},{"location":"case-studies/#micropython","title":"MicroPython","text":"<p>MicroPython</p> <p>Teaching Computational Thinking with MicroPython MicroPython Learning Graph</p>"},{"location":"case-studies/#signal-processing","title":"Signal Processing","text":"<p>Signal Processing</p> <p>Signal Processing Learning Graph</p>"},{"location":"case-studies/#systems-thinking","title":"Systems Thinking","text":"<p>Systems THinking Course Website</p> <p>Learning Graph for Systems Thinking</p>"},{"location":"case-studies/circuits/","title":"Circuits","text":"<p>Circuits Learning Graph</p>"},{"location":"case-studies/graph-algorithms/","title":"Graph Algorithms","text":"<p>Learning Graph for Graph Algorithms</p>"},{"location":"case-studies/low-latency/","title":"Creating Low-Latency Applications","text":""},{"location":"case-studies/low-latency/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Create a list of concepts that might be taught in a class on\nbuilding low-latency applications. These are applications that\nmust return results in a short window of time, typically 100 milliseconds.\nList Concepts about the infrastructure necessary to support\nthese types of applications and how the cloud may not be\nthe right way to solve these problems. List the concepts\nin setting up virtual private networks and in-memory graph\ndatabases to execute fast business logic.\n</code></pre> <p>ChatGPT</p> <p>Thought for 46 seconds</p> <p>Concepts Covered in a Class on Building Low-Latency Applications</p>"},{"location":"case-studies/low-latency/#understanding-latency-fundamentals","title":"Understanding Latency Fundamentals","text":"<ul> <li>Types of Latency: Network, processing, disk I/O, and application latency.</li> <li>Sources of Latency: Hardware limitations, software inefficiencies, network congestion.</li> <li>Measuring Latency: Tools and metrics for assessing performance (e.g., ping, traceroute, profiling).</li> </ul>"},{"location":"case-studies/low-latency/#network-infrastructure-optimization","title":"Network Infrastructure Optimization","text":"<ul> <li>Edge Computing: Processing data closer to the source to reduce latency.</li> <li>Content Delivery Networks (CDNs): Distributing content geographically to minimize access time.</li> <li>Protocol Optimization: Using UDP over TCP when appropriate, implementing QUIC protocol.</li> <li>High-Speed Networking Hardware: Leveraging InfiniBand, RDMA, and low-latency switches.</li> </ul>"},{"location":"case-studies/low-latency/#hardware-considerations-for-low-latency","title":"Hardware Considerations for Low Latency","text":"<ul> <li>High-Performance CPUs and GPUs: Selecting processors with low-latency characteristics.</li> <li>Specialized Hardware: Utilizing FPGAs and ASICs for specific low-latency tasks.</li> <li>Memory Technologies: Employing NVMe and RAM disks to accelerate data access.</li> </ul>"},{"location":"case-studies/low-latency/#software-optimization-techniques","title":"Software Optimization Techniques","text":"<ul> <li>Efficient Algorithms and Data Structures: Choosing optimal methods for speed (e.g., hash tables, tries).</li> <li>Parallelism and Concurrency: Implementing multithreading and asynchronous processing.</li> <li>Code Profiling and Performance Tuning: Identifying bottlenecks using profiling tools.</li> <li>Compiler Optimizations: Utilizing compiler flags and settings to enhance performance.</li> </ul>"},{"location":"case-studies/low-latency/#in-memory-computing-strategies","title":"In-Memory Computing Strategies","text":"<ul> <li>In-Memory Databases: Storing data in RAM for rapid access (e.g., Redis, Memcached).</li> <li>Caching Mechanisms: Implementing local and distributed caches to reduce data retrieval time.</li> <li>Data Locality: Ensuring data is stored close to the computation resources.</li> </ul>"},{"location":"case-studies/low-latency/#minimizing-external-dependencies","title":"Minimizing External Dependencies","text":"<ul> <li>Reducing API Calls: Limiting reliance on external services that introduce latency.</li> <li>Local Processing: Performing computations locally rather than remotely.</li> <li>Dependency Management: Using lightweight libraries and frameworks.</li> </ul>"},{"location":"case-studies/low-latency/#programming-languages-and-runtime-environments","title":"Programming Languages and Runtime Environments","text":"<ul> <li>Low-Level Languages: Utilizing C, C++, or Rust for fine-grained control over performance.</li> <li>Garbage Collection Tuning: Adjusting JVM or .NET settings to minimize pauses.</li> <li>Real-Time Systems Programming: Writing code for real-time operating systems.</li> </ul>"},{"location":"case-studies/low-latency/#asynchronous-and-non-blocking-io","title":"Asynchronous and Non-Blocking I/O","text":"<ul> <li>Event-Driven Architectures: Leveraging event loops and callbacks.</li> <li>Reactive Programming: Using frameworks like ReactiveX to handle asynchronous data streams.</li> <li>Non-Blocking I/O Libraries: Employing technologies like epoll, kqueue, or IOCP.</li> </ul>"},{"location":"case-studies/low-latency/#time-sensitive-networking-tsn","title":"Time-Sensitive Networking (TSN)","text":"<ul> <li>Deterministic Network Behavior: Ensuring predictable latency through TSN protocols.</li> <li>Quality of Service (QoS): Prioritizing network traffic to meet latency requirements.</li> <li>Network Slicing: Allocating dedicated bandwidth for critical applications.</li> </ul>"},{"location":"case-studies/low-latency/#challenges-with-cloud-solutions","title":"Challenges with Cloud Solutions","text":"<ul> <li>Physical Distance: Latency introduced by the geographical location of data centers.</li> <li>Virtualization Overhead: Delays caused by hypervisors and shared resources.</li> <li>Multi-Tenancy Issues: Performance variability due to other tenants' workloads.</li> <li>Limited Hardware Control: Inability to select or optimize underlying hardware.</li> <li>Network Routing Limitations: Restricted influence over data packet paths.</li> </ul>"},{"location":"case-studies/low-latency/#alternatives-to-cloud-computing","title":"Alternatives to Cloud Computing","text":"<ul> <li>On-Premises Infrastructure: Building and managing local data centers.</li> <li>Edge Computing Devices: Deploying computation resources at the network edge.</li> <li>Hybrid Models: Combining cloud and local resources for optimal performance.</li> </ul>"},{"location":"case-studies/low-latency/#virtual-private-networks-vpns-setup-and-optimization","title":"Virtual Private Networks (VPNs) Setup and Optimization**","text":"<ul> <li>VPN Fundamentals: Understanding encryption, tunneling protocols, and authentication.</li> <li>Types of VPNs: Site-to-site, remote access, and SSL/TLS-based VPNs.</li> <li>Performance Implications: Evaluating the latency overhead of encryption and tunneling.</li> <li>Protocol Selection: Choosing between IPSec, OpenVPN, WireGuard for low latency.</li> <li>VPN Topologies: Designing mesh or hub-and-spoke networks for efficiency.</li> <li>Optimizing Throughput: Adjusting MTU sizes, leveraging hardware acceleration.</li> <li>Integration with Network Infrastructure: Seamless operation with firewalls, routers, and switches.<ul> <li>Monitoring and Troubleshooting: Tools for assessing VPN performance and diagnosing issues.</li> </ul> </li> </ul>"},{"location":"case-studies/low-latency/#in-memory-graph-databases-for-fast-business-logic","title":"In-Memory Graph Databases for Fast Business Logic","text":"<pre><code>-   **Graph Database Concepts**: Nodes, edges, properties, and graph traversal.\n-   **Advantages of In-Memory Graph Databases**: Speed, efficiency, and real-time analytics.\n-   **Popular In-Memory Graph Databases**: Neo4j (in-memory configurations), RedisGraph, Amazon Neptune.\n-   **Data Modeling**: Representing complex relationships and hierarchies.\n-   **Query Languages**: Using Cypher, Gremlin, or SPARQL for efficient data retrieval.\n-   **Performance Tuning**: Indexing strategies, query optimization, and caching results.\n-   **Distributed Graph Processing**: Handling large datasets across multiple nodes.\n-   **Transactional Support**: Ensuring data integrity with ACID compliance.\n-   **Embedding Business Logic**: Implementing stored procedures and triggers within the database.\n-   **Memory Management**: Strategies for efficient memory usage and garbage collection.\n</code></pre>"},{"location":"case-studies/low-latency/#security-considerations","title":"Security Considerations","text":"<pre><code>-   **Encryption Overhead**: Balancing security needs with performance impacts.\n-   **Secure Coding Practices**: Preventing vulnerabilities that could introduce latency.\n-   **Authentication Mechanisms**: Implementing fast and secure user authentication.\n</code></pre>"},{"location":"case-studies/low-latency/#testing-and-monitoring-low-latency-applications","title":"Testing and Monitoring Low-Latency Applications","text":"<pre><code>-   **Performance Testing Tools**: JMeter, Gatling, and custom benchmarking scripts.\n-   **Real-Time Monitoring**: Utilizing tools like Grafana, Prometheus, or Datadog.\n-   **Logging Best Practices**: Ensuring logging does not adversely affect performance.\n-   **Continuous Optimization**: Iterative testing and tuning based on monitoring data.\n</code></pre>"},{"location":"case-studies/low-latency/#regulatory-and-compliance-implications","title":"Regulatory and Compliance Implications","text":"<pre><code>-   **Data Localization Laws**: Understanding how regulations affect data placement and latency.\n-   **Industry Standards**: Complying with standards like PCI DSS, HIPAA, which may impact design choices.\n</code></pre>"},{"location":"case-studies/low-latency/#case-studies-and-real-world-applications","title":"Case Studies and Real-World Applications","text":"<pre><code>-   **High-Frequency Trading Systems**: Techniques used to achieve microsecond-level latency.\n-   **Real-Time Gaming**: Ensuring minimal lag in multiplayer online games.\n-   **Industrial Automation**: Using low-latency networks for process control systems.\n-   **Internet of Things (IoT)**: Managing latency in sensor networks and smart devices.\n</code></pre>"},{"location":"case-studies/low-latency/#emerging-technologies-and-trends","title":"Emerging Technologies and Trends","text":"<pre><code>-   **5G Networks**: Leveraging increased bandwidth and reduced latency.\n-   **Software-Defined Networking (SDN)**: Dynamically optimizing network paths.\n-   **Artificial Intelligence and Machine Learning**: Real-time data processing at the edge.\n</code></pre> <p>By covering these concepts, the class would equip students with the knowledge and skills to design and implement applications that meet stringent low-latency requirements, while also understanding the limitations and alternatives to traditional cloud-based solutions.</p>"},{"location":"case-studies/micropython/","title":"MicroPython","text":"<p>MicroPython Learning Graph</p>"},{"location":"case-studies/signal-processing/","title":"Signal Processing","text":"<p>Signal Processing Learning Graph</p>"},{"location":"case-studies/systems-thinking/","title":"Systems Thinking","text":"<p>Learning Graph for Systems Thinking</p>"},{"location":"chapters/","title":"Learning Graphs","text":"<ul> <li>Learning Graphs</li> <li>Concepts</li> <li>Bloom's Taxonomy</li> <li>Concept Dependency</li> <li>Concept Taxonomies</li> <li>Displaying Graphs</li> <li>Vis.js</li> <li>Dependency Analysis</li> <li>Customizing Lesson Plans</li> <li>LMS Integration</li> <li>Building Intelligent Agents</li> </ul>"},{"location":"chapters/01-learning-graphs/","title":"Learning Graphs","text":"<p>In this chapter, we introduce you to the foundational data structure used by intelligent agents that build customized lesson plans for each student: The Learning Graph.</p>"},{"location":"chapters/01-learning-graphs/#what-are-learning-graphs","title":"What Are Learning Graphs?","text":"<p>Learning graphs are network graph that stores learning Concepts and their dependencies.</p> <p>Learning graphs are a type of Directed Graphs where every node is a learning Concept and every edge is a concept dependency or prerequisite.</p> <p>A Learning Graph is a powerful representation of knowledge used to model the relationships between different learning concepts and their dependencies. This graph-based approach enables a structured, visual way to map out the sequence in which learners need to acquire knowledge, making it particularly effective for hyper-personalized lesson plan generation.</p> <p>In essence, a learning graph is a type of directed graph where every node represents a learning concept, and each directed edge signifies a prerequisite relationship between two concepts. By modeling the learning process as a graph, we can identify the optimal path a learner should follow to master a specific topic.</p>"},{"location":"chapters/01-learning-graphs/#why-learning-graphs-matter","title":"Why Learning Graphs Matter","text":"<p>Learning graphs offer several key advantages when designing personalized learning paths:</p> <ul> <li>Clarity in Concept Dependencies: They make the relationships between concepts explicit, ensuring learners acquire foundational knowledge before advancing to more complex topics.</li> <li>Adaptive Learning Paths: By analyzing the structure of the graph, we can create tailored lesson plans for individual learners, focusing on the gaps in their knowledge while skipping over concepts they've already mastered.</li> <li>Flexibility and Scalability: Learning graphs are highly flexible and can scale across different subjects and educational levels, from elementary school topics to advanced technical subjects.</li> </ul>"},{"location":"chapters/01-learning-graphs/#structure-of-a-learning-graph","title":"Structure of a Learning Graph","text":"<p>A learning graph is composed of two primary elements:</p> <ul> <li>Nodes (Concepts): Each node represents a distinct learning concept. These could range from fundamental principles, like \"Ohm's Law\" in an electrical circuits course, to more complex topics like \"Neural Networks\" in a machine learning course.</li> <li>Edges (Prerequisites): Each directed edge represents a dependency or prerequisite. For example, a concept such as \"Addition\" or \"Subtraction\" must be understood before a learner be confident they understand \"Arithmetic.\"</li> </ul> <p></p> <p> A diagram showing 5-6 nodes connected by directed edges, illustrating a simple learning path where each node depends on the previous one. For instance, concepts related to mathematics, starting with \"Basic Algebra\" leading to \"Linear Equations\" and ending with \"Quadratic Functions.\" </p>"},{"location":"chapters/01-learning-graphs/#types-of-learning-graphs","title":"Types of Learning Graphs","text":"<p>Learning graphs can take on various forms depending on the complexity of the learning domain and the learner's background.</p>"},{"location":"chapters/01-learning-graphs/#linear-graph","title":"Linear Graph","text":"<p>In this form, each concept has exactly one prerequisite. This structure is suitable for topics that build incrementally without divergence, such as learning how to assemble a robot where part order is critical. In this lesson, each step depends on the prior step being completed before it can begin.</p> <ol> <li>Open Box</li> <li>Confirm Part List</li> <li>Attach Motor Chassis</li> <li>Attach Wheels to Chassis</li> <li>Attach Battery to Chassis</li> <li>Mount Microcontroller</li> <li>Mount Sensors</li> <li>Connect Microcontroller</li> <li>Upload Code to Microcontroller</li> <li>Test the Robot</li> </ol>"},{"location":"chapters/01-learning-graphs/#branching-graph","title":"Branching Graph","text":"<p>A more complex form where certain concepts can lead to multiple others. For example, mastering \"Statistics\" may be a prerequisite for both \"Data Science\" and \"Machine Learning.\"</p> <p>Example:</p> <ol> <li>Learn Python</li> <li> <p>Use </p> </li> <li> <p>Converging Graph: This graph structure occurs when multiple prerequisite concepts lead to the mastery of a single, more advanced concept. For instance, mastering both \"Trigonometry\" and \"Algebra\" may be required before understanding \"Calculus.\"</p> </li> </ol>"},{"location":"chapters/01-learning-graphs/#figure-suggestion","title":"Figure Suggestion","text":"<ol> <li>Branching Graph Example: A diagram showing nodes with multiple paths branching out from a single node, illustrating how different branches of learning lead to diverse advanced topics.</li> </ol>"},{"location":"chapters/01-learning-graphs/#practical-applications-of-learning-graphs","title":"Practical Applications of Learning Graphs","text":"<ol> <li> <p>Course Design and Planning: Educators can use learning graphs to map out entire courses, ensuring the logical progression of topics and making it easy to identify areas where students might struggle based on their gaps in prerequisite knowledge.</p> </li> <li> <p>Personalized Learning Paths: In personalized education, learning graphs allow for dynamic adjustment of lesson plans based on an individual's current knowledge. When a learner demonstrates proficiency in a specific concept, they can immediately proceed to the next dependent concept.</p> </li> <li> <p>Assessment and Remediation: Learning graphs are particularly useful in assessment-driven learning environments. By pinpointing exactly where a student is struggling, educators can focus on reinforcing specific concepts without re-teaching the entire curriculum.</p> </li> </ol>"},{"location":"chapters/01-learning-graphs/#leveraging-learning-graphs-in-hyper-customized-lesson-plans","title":"Leveraging Learning Graphs in Hyper-customized Lesson Plans","text":"<p>When creating hyper-customized lesson plans, learning graphs provide the foundational structure to ensure that each student receives the exact lessons they need, in the proper sequence. By identifying where a learner is within the graph, lesson plans can be dynamically generated to either:</p> <ul> <li>Focus on filling gaps in prerequisite knowledge</li> <li>Accelerate the learner through concepts they have already mastered</li> <li>Present appropriate challenges based on the learner's current level</li> </ul> <p>This approach not only enhances learning efficiency but also keeps students engaged by delivering content that is neither too difficult nor too easy.</p>"},{"location":"chapters/01-learning-graphs/#figure-suggestion_1","title":"Figure Suggestion","text":"<ol> <li>Customized Learning Path: A learning graph with certain nodes highlighted, showing how an individualized lesson path is formed by skipping over mastered concepts and focusing on specific prerequisites.</li> </ol>"},{"location":"chapters/01-learning-graphs/#challenges-in-designing-learning-graphs","title":"Challenges in Designing Learning Graphs","text":"<p>While learning graphs offer great benefits, there are some challenges in creating and maintaining them:</p> <ul> <li> <p>Conceptual Granularity: Deciding the appropriate level of granularity for concepts can be difficult. Too many fine-grained concepts may over-complicate the graph, while too few might overlook essential nuances in learning.</p> </li> <li> <p>Dynamic Changes: As educational methods and content evolve, learning graphs need to be adaptable to accommodate new concepts or altered dependencies.</p> </li> </ul>"},{"location":"chapters/01-learning-graphs/#conclusion","title":"Conclusion","text":"<p>Learning graphs are an essential tool for structuring educational content and designing hyper-customized lesson plans. By representing concepts and their dependencies as a directed graph, educators can ensure that learners progress through material in an optimal, personalized manner. In the next chapter, we will delve deeper into what constitutes a \"Concept\" and how it plays a role in the overall structure of a learning graph.</p>"},{"location":"chapters/01-learning-graphs/#figure-suggestion_2","title":"Figure Suggestion:","text":"<ol> <li>Advanced Learning Graph: A more detailed network graph with multiple branching paths and dependencies, showing how a complex subject area might be organized in a learning graph format.</li> </ol>"},{"location":"chapters/02-blooms-taxonomy/","title":"Bloom's Taxonomy","text":"<p> Image credit: Univ. of Florida Information Technology</p>"},{"location":"chapters/02-blooms-taxonomy/#introduction","title":"Introduction","text":"<p>In education and course learning objective design, Bloom's Taxonomy can be useful in organizing course concepts to achieve specific goals.  Bloom's Taxonomy helps us order concepts clearly.  It teaches the importance of memorization of knowledge first and then later that knowledge to solve problems.  The figure above is a triangle that shows how the lower elements of the triangle should be taught before the higher elements.</p> <p>Bloom's Taxonomy is a framework for categorizing educational goals, developed by Benjamin Bloom and collaborators in 1956 and revised in 2001 to place creation of new artifacts at the top of a pyramid structure. It is widely used in designing learning objectives, assessments, and instructional strategies to promote higher-order thinking. The taxonomy divides learning into multiple levels.</p>"},{"location":"chapters/02-blooms-taxonomy/#domain-1-cognitive-domain-knowledge-based","title":"Domain 1: Cognitive Domain (Knowledge-based)","text":"<p>This is the most widely used part of the taxonomy, focusing on mental skills and knowledge acquisition. It is often represented as a pyramid with six levels of complexity, moving from basic knowledge to higher-order thinking:</p> <ul> <li>Remembering: Recalling facts and basic concepts (e.g., define, list, memorize)</li> <li>Understanding: Explaining ideas or concepts (e.g., describe, explain, summarize)</li> <li>Applying: Using information in new situations (e.g., solve, demonstrate, apply)</li> <li>Analyzing: Breaking information into parts to explore relationships (e.g., compare, contrast, categorize)</li> <li>Evaluating: Making judgments based on criteria (e.g., justify, critique, assess)</li> <li>Creating: Putting elements together to form new ideas or products (e.g., design, construct, develop)</li> </ul>"},{"location":"chapters/02-blooms-taxonomy/#domain-2-affective-domain-attitude-based","title":"Domain 2: Affective Domain (Attitude-based)","text":"<p>This focuses on feelings, emotions, and attitudes, covering how learners internalize and reflect on values.</p> <ul> <li>Receiving: Awareness and willingness to hear</li> <li>Responding: Active participation through reacting or responding</li> <li>Valuing: Recognizing the worth of something</li> <li>Organizing: Integrating values into one's life</li> <li>Characterizing: Acting consistently with a value system</li> </ul>"},{"location":"chapters/02-blooms-taxonomy/#domain-3-psychomotor-domain-skill-based","title":"Domain 3: Psychomotor Domain (Skill-based)","text":"<p>This domain involves physical movement, coordination, and the use of motor skills. While less emphasized in Bloom's original taxonomy, it is important in disciplines that require hands-on tasks.</p> <ul> <li>Perception: Using sensory cues to guide actions</li> <li>Set: Readiness to act</li> <li>Guided Response: Early stages of learning skills</li> <li>Mechanism: Proficiency in performing skills</li> <li>Complex Overt Response: Advanced performance of skills</li> <li>Adaptation: Modifying skills to meet new demands</li> <li>Origination: Creating new artifacts from patterns</li> </ul>"},{"location":"chapters/02-blooms-taxonomy/#purpose","title":"Purpose","text":"<p>Bloom's Taxonomy helps educators design curriculum and assessments that target not just the memorization of facts, but also the development of critical thinking and problem-solving abilities. By moving students through progressively more complex levels of thinking, it ensures a comprehensive approach to learning that includes both foundational knowledge and higher-order thinking skills.</p>"},{"location":"chapters/02-blooms-taxonomy/#using-blooms-taxonomy-to-create-learning-graphs","title":"Using Bloom's Taxonomy To Create Learning Graphs","text":"<p>Bloom's Taxonomy can be a valuable tool in creating a concept dependency graph for courses by organizing the progression of learning objectives in a structured way. A concept dependency graph visualizes how different topics or skills in a course build on each other, guiding the instructional design toward achieving higher levels of learning.</p> <p>Here's how Bloom's Taxonomy can be used in creating such a graph:</p>"},{"location":"chapters/02-blooms-taxonomy/#establish-foundational-concepts-using-lower-levels-of-blooms-taxonomy","title":"Establish Foundational Concepts Using Lower Levels of Bloom's Taxonomy","text":"<ul> <li> <p>Cognitive Levels: Remembering and Understanding     The base of the graph should start with concepts that involve recalling basic facts and understanding fundamental principles. These concepts form the foundation of the course, as students need to acquire knowledge before they can progress to higher-order thinking.</p> <p>Example: In a circuits course, students must first remember Ohm's Law and understand basic components like resistors and capacitors.</p> <ul> <li>Graph Node: \"Ohm's Law (Remember)\"</li> <li>Graph Node: \"Basic Components (Understand)\"</li> <li>Arrows: Indicate that subsequent concepts depend on these foundational ideas.</li> </ul> </li> </ul>"},{"location":"chapters/02-blooms-taxonomy/#link-concepts-with-intermediate-cognitive-levels","title":"Link Concepts with Intermediate Cognitive Levels","text":"<ul> <li> <p>Cognitive Levels: Applying and Analyzing     Once students have the foundation, the graph should show applying knowledge to new situations and analyzing relationships between concepts. This phase introduces the dependency of practical tasks and critical thinking.</p> <p>Example: Applying Ohm's Law in circuit analysis and analyzing how changing a resistor affects the overall circuit.</p> <ul> <li>Graph Node: \"Apply Ohm's Law to Circuits (Apply)\"</li> <li>Graph Node: \"Analyze Circuit Behavior (Analyze)\"</li> <li>Arrows: Indicate that students cannot analyze circuits without first applying the knowledge of Ohm's Law.</li> </ul> </li> </ul>"},{"location":"chapters/02-blooms-taxonomy/#introduce-advanced-concepts-using-higher-levels","title":"Introduce Advanced Concepts Using Higher Levels","text":"<ul> <li> <p>Cognitive Levels: Evaluating and Creating     The top levels of Bloom's Taxonomy, evaluating and creating, should come later in the graph. These concepts rely heavily on mastery of earlier stages and involve judging, designing, or constructing new knowledge or solutions. This is where students synthesize their learning into creative or evaluative tasks.</p> <p>Example: Designing a complete circuit based on given requirements or evaluating the efficiency of different circuit designs.</p> <ul> <li>Graph Node: \"Evaluate Circuit Designs (Evaluate)\"</li> <li>Graph Node: \"Create a New Circuit (Create)\"</li> <li>Arrows: Show the dependency on earlier stages of analysis and application.</li> </ul> </li> </ul>"},{"location":"chapters/02-blooms-taxonomy/#visual-structure-layering-the-concepts","title":"Visual Structure: Layering the Concepts","text":"<ul> <li> <p>Left-to-Right Progression     In the concept dependency graph, start with foundational concepts on the left (Remembering, Understanding), and place more advanced concepts on the right (Applying, Analyzing, Evaluating, Creating). This progression aligns with Bloom's Taxonomy and clearly shows how mastery at one level enables the next.</p> <ul> <li>Foundational concepts (Remember, Understand) -&gt; Intermediate concepts (Apply, Analyze) -&gt; Advanced concepts (Evaluate, Create).</li> </ul> </li> <li> <p>Arrows and Dependencies     Use arrows to indicate dependencies, showing that students must master simpler concepts before moving on to more complex ones. This makes the learning path explicit and encourages scaffolding in teaching methods.</p> </li> </ul>"},{"location":"chapters/02-blooms-taxonomy/#supporting-affective-and-psychomotor-domains","title":"Supporting Affective and Psychomotor Domains","text":"<ul> <li>For courses where emotional engagement (Affective Domain) or hands-on skills (Psychomotor Domain) are important, Bloom's Taxonomy can also be used to create a second set of dependencies showing how students develop attitudes or skills over time. For example, psychomotor skills may start with simple tasks (guided response) and advance to complex projects (adaptation, origination).</li> </ul>"},{"location":"chapters/02-blooms-taxonomy/#example-of-a-concept-dependency-graph-using-blooms-taxonomy","title":"Example of a Concept Dependency Graph Using Bloom's Taxonomy","text":"<ol> <li>Remember: Identify basic circuit elements (resistor, capacitor).<ul> <li>Dependencies: None</li> </ul> </li> <li>Understand: Explain how Ohm's Law works in a simple circuit.<ul> <li>Dependency: Remember basic elements</li> </ul> </li> <li>Apply: Calculate voltage, current, and resistance in a circuit.<ul> <li>Dependency: Understand Ohm's Law</li> </ul> </li> <li>Analyze: Compare different circuit designs and their behaviors.<ul> <li>Dependency: Apply Ohm's Law in calculations</li> </ul> </li> <li>Evaluate: Assess the efficiency of different circuits.<ul> <li>Dependency: Analyze circuit designs</li> </ul> </li> <li>Create: Design a complete circuit to meet specific requirements.<ul> <li>Dependency: Evaluate circuit options and efficiency</li> </ul> </li> </ol>"},{"location":"chapters/02-blooms-taxonomy/#benefits-of-using-blooms-taxonomy-in-concept-dependency-graphs","title":"Benefits of Using Bloom's Taxonomy in Concept Dependency Graphs","text":"<ul> <li>Clear Learning Path: It shows a clear path from basic to advanced learning, ensuring students build their understanding progressively.</li> <li>Targeted Instruction: Instructors can design lessons and activities to align with specific cognitive levels, making it easier to address gaps.</li> <li>Tailored Assessment: The taxonomy helps structure assessments to evaluate students at different cognitive levels, from simple recall to complex synthesis.</li> <li>Holistic Learning: Combining all three domains (cognitive, affective, and psychomotor) ensures a balanced learning experience.</li> </ul> <p>By using Bloom's Taxonomy in concept dependency graphs, you can effectively map out not only the sequence of topics but also the increasing complexity and depth of student learning throughout the course.</p>"},{"location":"chapters/02-blooms-taxonomy/#references","title":"References","text":""},{"location":"chapters/02-blooms-taxonomy/#image-reference","title":"Image Reference","text":"<p>Image Reference CITT University of Florida</p>"},{"location":"chapters/02-concepts/","title":"Concepts","text":"<p>In this course, it is important to give the term \"concept\" a precise definition.  Borrowing from the World-Wide-Web (W3C) standard for storing knowledge (SKOS), here is the definition for the term \"concept\" they use:</p>"},{"location":"chapters/02-concepts/#definition-for-learning-graphs","title":"Definition for Learning Graphs","text":"<p>SKOS Definition of Concept: A unit of thought, an idea, or a notion, which is considered as an atomic unit of meaning within a given context.</p> <p>This is a broad definition and to make it a little more useful, we will add one additional property: let's require concepts to have a name.  We also refine \"given context\" to a specific learning context such as a course or curriculum.  Here is the full definition we can use for this course:</p> <p>Course Definition of Concept: A named unit of thought, such as an idea or notion, which is considered as an atomic unit of meaning within a given learning context.</p> <p>In general, think of opening a high-school or college textbook and looking at the index at the back of the book.  Each item in the index is typically a concept in that course.  If the authors for the book think that it is important enough, they will list it in the index.</p> <p>There are certainly concepts that don't have names.  Our neocortex stores around 82 billion neurons and LLMs have trillions of neuron-like structures in their neural networks.  Studies have shown that some LLM models can enumerate around 20 million named concepts.  But for all practical purposes, in this course all concepts have a name.  Technically, the primary name given to a concept is called a Preferred Label. If a concept has other names they are called Alternate Labels</p>"},{"location":"chapters/02-concepts/#concepts-vs-content","title":"Concepts vs. Content","text":"<p>It is important to not confused an abstract Named Concept from specific content such as a lesson plan, a wikipedia page, an instructional simulation (MicroSim) or a video.  In general, content has references to one or more concepts, but concepts are more atomic building blocks that help us arrange content.</p>"},{"location":"chapters/02-concepts/#how-many-concepts-in-a-high-school-course","title":"How Many Concepts in a High School Course?","text":"<p>The number of concepts covered in a typical high-school course can vary significantly depending on the subject, the curriculum, and the level of depth expected. However, a general estimate can be made.  In this analysis, we will use the term \"core concept\" as being a concept that is introduced within a course, has a clear name, and is used consistency across many educational systems.</p> <p>The number of core concepts introduce in a course also varies by subject area.  Here are some examples.</p> <ol> <li> <p>Mathematics: A high school algebra or geometry course might cover around 100 to 150 key concepts. These include foundational ideas such as solving equations, graphing functions, and understanding geometric proofs. Advanced courses like calculus might introduce 50 to 100 additional, more specialized concepts.</p> </li> <li> <p>Science: In a typical biology, chemistry, or physics course, students might learn around 200-300 major concepts. For example, a biology course might introduce cell structure, genetics, ecosystems, and evolution, while a chemistry course could cover atomic theory, chemical reactions, and thermodynamics. Physics might introduce concepts related to motion, energy, and electricity.</p> </li> <li> <p>Literature/Language Arts: An English literature course may cover 50 to 100 major literary concepts, such as themes, symbolism, metaphor, and narrative structure. It might also include concepts related to specific literary movements, authors, and genres.</p> </li> <li> <p>Social Studies: A history or civics course may focus on 150-200 key concepts, including historical events, political theories, government structures, and cultural movements.</p> </li> </ol> <p>Each course typically emphasizes a set of core concepts while also encouraging students to connect these ideas with broader themes or related areas of study. The number of concepts can be thought of as the core building blocks students are expected to understand and apply by the end of the course.</p> <p>These estimates are drawn from educational standards such as the Common Core and subject-specific curriculum guides from various educational boards.</p>"},{"location":"chapters/02-concepts/#counting-indexed-concepts","title":"Counting Indexed Concepts","text":"<p>The number of concepts typically listed in the index or glossary at the back of a high-school or college textbook varies depending on the subject and depth of the material. However, here are general estimates:</p> <ol> <li> <p>High-School Textbooks:</p> <ul> <li>Science (e.g., Biology, Chemistry): 200--400 key terms and concepts. For instance, a biology textbook may include concepts like \"photosynthesis,\" \"cell division,\" and \"genetic inheritance.\"</li> <li>Mathematics (e.g., Algebra, Geometry): Around 100--250 concepts, including \"quadratic equations,\" \"trigonometric functions,\" and \"coordinate geometry.\"</li> <li>Literature/Language Arts: 100--200 literary terms, including concepts such as \"alliteration,\" \"foreshadowing,\" and \"narrative structure.\"</li> <li> <p>College Textbooks:</p> </li> <li> <p>Introductory Courses (e.g., Psychology, Economics, Physics): 300--500 concepts, covering key definitions, theories, and models. For example, an introductory psychology textbook might list terms like \"cognitive dissonance,\" \"classical conditioning,\" and \"neuroplasticity.\"</p> </li> <li>Advanced Courses (e.g., Organic Chemistry, Advanced Calculus): 400--600 concepts, especially in subjects with extensive technical terminology.</li> </ul> </li> </ol> <p>In most textbooks, the index or glossary is a critical tool for students to reference important concepts, which are often highlighted in bold or italic throughout the text. The number of concepts aligns with the complexity of the course and the learning outcomes set by educational standards.</p>"},{"location":"chapters/02-rhizomatic-learning/","title":"Rhizomatic Learning","text":"<p>Rhizomatic learning is an educational model inspired by the way rhizome root systems grow and spread, allowing for non-linear, interconnected, and expansive pathways of knowledge acquisition.</p> <p>Unlike most root systems with a single center tap root, rhizome root systems spread as a network in random directions.</p> <p>This approach contrasts with traditional hierarchical or linear models, focusing instead on exploration, connection, and adaptability. Here's how Rhizombic learning might look in practice:</p>"},{"location":"chapters/02-rhizomatic-learning/#key-features-of-rhizomatic-learning","title":"Key Features of Rhizomatic Learning","text":""},{"location":"chapters/02-rhizomatic-learning/#non-linear-paths","title":"Non-Linear Paths","text":"<ul> <li>Students can pursue various topics or skills in any order, much like how rhizomes grow in unpredictable directions. This encourages learners to follow their curiosity and discover connections organically.</li> <li>Learning is seen as a web rather than a line, where each node (topic or skill) can connect to multiple others in diverse ways.</li> </ul>"},{"location":"chapters/02-rhizomatic-learning/#interconnected-knowledge","title":"Interconnected Knowledge","text":"<ul> <li>Rhizomatic learning emphasizes connections between ideas, encouraging students to integrate knowledge from multiple domains.</li> <li>Similar to how rhizomes can produce new plants at various points, students develop understanding across interconnected subjects, seeing how they influence each other.</li> </ul>"},{"location":"chapters/02-rhizomatic-learning/#self-directed-exploration","title":"Self-Directed Exploration","text":"<ul> <li>This model prioritizes student autonomy, with learners choosing their own paths based on interests and needs. They take an active role in deciding what, when, and how they want to learn, fostering a sense of ownership over their education.</li> <li>Teachers act as guides or facilitators, helping students navigate resources and make connections without strictly defining the path.</li> </ul>"},{"location":"chapters/02-rhizomatic-learning/#resilience-and-adaptability","title":"Resilience and Adaptability","text":"<ul> <li>Like rhizomes, which survive by spreading widely and establishing new growth points, Rhizombic learning encourages resilience by adapting to changing environments and evolving with the learner's interests.</li> <li>It's a flexible approach, allowing learners to pivot, revisit, or deepen topics as they go, making it highly responsive to each student's unique journey.</li> </ul>"},{"location":"chapters/02-rhizomatic-learning/#emergent-knowledge-structures","title":"Emergent Knowledge Structures","text":"<ul> <li>In Rhizombic learning, knowledge structures emerge rather than being pre-imposed. Just as rhizomes grow outward from multiple points, learners' understanding grows in unexpected, non-hierarchical ways.</li> <li>This can foster creativity, critical thinking, and a deeper appreciation for complexity, as students see how diverse ideas interrelate.</li> </ul>"},{"location":"chapters/02-rhizomatic-learning/#comparison-to-traditional-learning-models","title":"Comparison to Traditional Learning Models","text":"<ul> <li>Traditional (Linear): Sequential, with clear prerequisites and structured pathways.</li> <li>Rhizombic: Non-linear and fluid, where learning can branch off in any direction, supporting self-discovery and personalization.</li> </ul>"},{"location":"chapters/02-rhizomatic-learning/#example-of-rhizombic-learning-in-practice","title":"Example of Rhizombic Learning in Practice","text":"<p>Imagine a course on environmental science where students explore ecosystems, conservation, and climate change. Instead of a set curriculum, students might start by studying a topic of personal interest---say, water ecosystems. From there, they could branch into chemistry (water quality), biology (aquatic life), or policy (environmental laws). They follow their own paths, making connections and revisiting topics as they encounter new information or interests.</p>"},{"location":"chapters/02-rhizomatic-learning/#benefits-of-rhizombic-learning","title":"Benefits of Rhizombic Learning","text":"<ul> <li>Encourages lifelong learning and adaptability.</li> <li>Supports divergent thinking, allowing students to approach problems from various angles.</li> <li>Fosters a sense of agency and motivation by empowering students to explore their own interests.</li> <li>Builds complex knowledge networks, helping learners see interrelationships between subjects.</li> </ul> <p>Rhizomatic learning offers unique benefits by leveraging students' natural curiosity, empowering them to explore and construct knowledge in ways that feel personally meaningful and engaging. Like a \"choose your own adventure\" book, this approach turns learning into a journey where each decision opens new paths, fostering a sense of excitement and ownership over one's educational experience.</p>"},{"location":"chapters/02-rhizomatic-learning/#benefits-of-rhizomatic-learning","title":"Benefits of Rhizomatic Learning","text":"<ol> <li> <p>Curiosity-Driven Exploration:</p> </li> <li> <p>Rhizomatic learning taps into students' intrinsic motivation by encouraging them to pursue topics that genuinely interest them. Instead of passively following a set curriculum, students are active agents, following their curiosity wherever it leads.</p> </li> <li> <p>This freedom can create a sense of wonder and excitement as students encounter new questions, investigate tangential ideas, and feel the thrill of discovery. The learning environment transforms into a space where curiosity isn't just welcomed but becomes the driving force behind every step forward.</p> </li> <li> <p>Learning as a Personalized Journey:</p> </li> <li> <p>Like \"choose your own adventure\" books, where each choice determines the story's outcome, rhizomatic learning allows students to chart a unique course through their education. They can decide which topics to explore in-depth, which to skim, and which to connect with other areas.</p> </li> <li> <p>This personalized journey gives students agency, helping them see learning as something they control rather than something imposed on them. It encourages self-discovery and independence, reinforcing the idea that knowledge is something to be pursued and shaped by personal interests and goals.</p> </li> <li> <p>Interconnected and Holistic Understanding:</p> </li> <li> <p>Rhizomatic learning fosters an interconnected view of knowledge. As students explore various branches, they begin to see how different subjects and concepts interrelate, much like how rhizomes spread and connect beneath the soil.</p> </li> <li> <p>This approach cultivates a holistic mindset, where students develop a nuanced understanding of complex topics by seeing their connections to other fields. For example, a student exploring environmental science might delve into chemistry, biology, and social studies, gaining a rich, multi-layered understanding of the subject that traditional, isolated paths might not provide.</p> </li> <li> <p>Flexible and Resilient Knowledge Growth:</p> </li> <li> <p>Since rhizomatic learning allows for detours, revisits, and shifts in focus, it encourages a flexible approach to learning. Students are not penalized for deviating from a set path; instead, they are encouraged to explore and adapt, which can make learning feel less pressured and more rewarding.</p> </li> <li> <p>This adaptability builds resilience. If one path becomes too challenging or loses the student's interest, they can pivot and re-engage with the subject in a different way, much like roots seeking out new ground for nourishment.</p> </li> <li> <p>Enhanced Creativity and Problem-Solving Skills:</p> </li> <li> <p>As students take ownership of their learning journey, they become more creative in how they approach problems and make connections between ideas. Rhizomatic learning cultivates creative thinking by encouraging students to forge their own paths and think outside traditional boundaries.</p> </li> <li> <p>Problem-solving also becomes a more personal, self-directed skill. Students learn to navigate ambiguity and make independent decisions, developing strategies to approach challenges without relying solely on preset instructions or steps.</p> </li> <li> <p>Sustained Engagement Through Story-Like Structure:</p> </li> <li> <p>In \"choose your own adventure\" books, each decision affects the plot, creating suspense and engagement. Similarly, rhizomatic learning can sustain students' interest over time because each topic or concept feels like a plot twist or new chapter.</p> </li> <li> <p>This story-like structure adds an element of narrative to education, where learning isn't just about reaching the end but about enjoying and exploring each chapter. Students remain engaged as they anticipate new discoveries and realize that they can influence the direction and outcome of their learning experience.</p> </li> <li> <p>A Sense of Accomplishment and Ownership:</p> </li> <li> <p>Because rhizomatic learning emphasizes student agency, each learner feels a sense of accomplishment with every step taken. As they uncover connections and make discoveries, they build a portfolio of personally meaningful achievements that are unique to their journey.</p> </li> <li>This ownership leads to greater self-confidence and a lasting appreciation for learning. Rather than passively receiving knowledge, students feel they've played an active role in building their understanding, which can inspire a lifelong love of learning.</li> </ol>"},{"location":"chapters/02-rhizomatic-learning/#rhizomatic-learning-as-an-ongoing-dynamic-adventure","title":"Rhizomatic Learning as an Ongoing, Dynamic Adventure","text":"<p>Rhizomatic learning, much like a \"choose your own adventure\" story, respects that students' interests may evolve. Students might begin with a question or curiosity, explore a topic, and then discover a new question that leads them down another path. This openness to changing direction mirrors real life, where learning is often unpredictable and multi-faceted.</p> <p>By allowing students to make choices and see the outcomes of those choices, rhizomatic learning:</p> <ul> <li>Engages students emotionally as well as intellectually, creating a powerful blend of excitement and curiosity.</li> <li>Instills adaptability and critical thinking, as students learn to make informed choices and navigate the consequences.</li> <li>Reinforces learning as a continuous process where curiosity never has to be \"completed\" but can instead lead to new questions and insights.</li> </ul> <p>In essence, rhizomatic learning reshapes the educational experience, placing the learner at the center and enabling a journey that's as complex, interconnected, and growth-oriented as the rhizomes from which it draws its name. It encourages students to see learning not as a series of isolated steps but as an expansive, lifelong adventure driven by their own curiosity and shaped by their choices.</p>"},{"location":"chapters/02-rhizomatic-learning/#challenges-of-rhizombic-learning","title":"Challenges of Rhizombic Learning","text":"<ul> <li>May require more guidance and support to keep students from feeling overwhelmed or directionless.</li> <li>Can be difficult to assess in a standardized way, as learning paths and outcomes vary widely.</li> <li>Demands high adaptability from educators to facilitate diverse learning experiences.</li> </ul> <p>In essence, Rhizombic learning reflects a dynamic, organic approach to education, with growth in multiple directions and learning that is shaped by exploration, connection, and flexibility.</p>"},{"location":"chapters/02-rhizomatic-learning/#references","title":"References","text":"<p>Wikipedia Page on Rhizomatic Learning</p>"},{"location":"chapters/03-concept-dependency/","title":"Concept Dependency","text":"<p>In this chapter, we will explore the core of learning graphs: how concepts are interrelated and how those relationships can be visualized in a dependency graph. You've already been introduced to Learning Concepts and Bloom's Taxonomy, so we'll focus on structuring these concepts based on their inherent dependencies. This will allow educators, learners, and AI-driven systems to generate a pathway through a body of knowledge, ensuring that foundational concepts (prerequisites) are learned before more advanced ideas are introduced.</p>"},{"location":"chapters/03-concept-dependency/#understanding-concept-dependencies","title":"Understanding Concept Dependencies","text":"<p>Concept dependencies refer to the relationships between various learning concepts, where one concept must be understood before another can be fully grasped. Just as in building a house, where you need a solid foundation before constructing the walls, in learning, certain foundational concepts need to be mastered before more advanced ones are introduced.</p> <p>Concept dependencies are not always absolute relationships. Some concepts can sometimes be understood with patience without  having a deep understanding of a dependent concept. However, our graphs don't model the weight of a dependency. It is possible that weights can be added to our dependency graphs in the future, but this is out-of-scope for this course.</p> <p>A dependency graph illustrates these relationships by placing foundational concepts as prerequisites and showing the pathways that lead from basic understanding to advanced learning goals. Each node in the graph represents a learning concept, and the directed edges show the dependencies between them. This way, a learner or an educator can navigate through a structured sequence, ensuring all required knowledge is obtained progressively.</p>"},{"location":"chapters/03-concept-dependency/#foundational-concepts-prerequisites","title":"Foundational Concepts (Prerequisites)","text":"<p>Foundational concepts form the base of any learning graph. These are the ideas or skills that a learner must acquire first to build towards more complex or specialized topics. Without a firm grasp of these, learners often struggle to progress.</p> <p>Example: In a math curriculum, understanding basic algebra is a foundational concept before attempting to learn calculus. Without algebra, calculus would be incomprehensible because many of its principles are rooted in algebraic manipulation.</p>"},{"location":"chapters/03-concept-dependency/#identifying-prerequisites","title":"Identifying Prerequisites","text":"<p>A key step in constructing a concept dependency graph is identifying the foundational concepts or prerequisites for a particular learning goal. To do this, an instructor or AI system may:</p> <ul> <li>Analyze the knowledge required for a given task or topic and work backward to find the simplest concepts that must be understood.</li> <li>Use Bloom's Taxonomy to ensure that lower-level cognitive skills (e.g., knowledge, comprehension) are addressed before higher-level skills (e.g., synthesis, evaluation).</li> <li>Consult existing educational frameworks like SKOS (Simple Knowledge Organization System) to structure these relationships.</li> </ul> <p>Dependencies are not always linear. Some concepts might have multiple prerequisites, while others might lead to a variety of advanced learning goals. The goal of a dependency graph is to map out these relationships clearly.</p>"},{"location":"chapters/03-concept-dependency/#learning-goals","title":"Learning Goals","text":"<p>While foundational concepts form the base, learning goals are the milestones or outcomes that a learner strives to achieve. Learning goals typically represent the higher-order concepts within the graph. These are the end points in the learning journey, where learners apply their knowledge in real-world contexts, solve complex problems, or demonstrate mastery over a subject.</p> <p>Learning goals can be structured across multiple levels. For instance:</p> <ul> <li>Immediate goals: Mastering a concept that serves as a building block for further learning.</li> <li>Intermediate goals: Acquiring skills that allow for more sophisticated understanding.</li> <li>Ultimate goals: Achieving proficiency that allows learners to tackle real-world challenges or expert-level problems.</li> </ul> <p>In a dependency graph, these learning goals might appear toward the right side (if you imagine the graph flowing from left to right), while foundational concepts would be on the left. The edges in the graph show the learner's path through intermediate concepts, from the foundations toward their ultimate learning goals.</p>"},{"location":"chapters/03-concept-dependency/#classical-leaning-paths-vs-rhizomatic-learning","title":"Classical Leaning Paths vs. Rhizomatic Learning","text":"<p>Rhizombic learning would be an educational model inspired by the way rhizomes grow and spread, allowing for non-linear, interconnected, and expansive pathways of knowledge acquisition. This approach contrasts with traditional hierarchical or linear models, focusing instead on exploration, connection, and adaptability.</p>"},{"location":"chapters/03-concept-dependency/#ordering-concepts-using-a-dependency-graph","title":"Ordering Concepts Using a Dependency Graph","text":"<p>Creating an ordered structure for learning involves placing concepts in a sequence that respects the dependencies between them. The goal is to create a smooth progression where learners build on prior knowledge without facing gaps.</p> <ol> <li> <p>Define the foundational concepts: Start by identifying the most basic concepts that learners need to understand. These will be positioned at the far left of the graph.</p> </li> <li> <p>Identify intermediate concepts: Determine the concepts that rely on these foundational ideas. These will sit in the middle of the graph, acting as bridges between the base concepts and the more advanced learning goals.</p> </li> <li> <p>Set learning goals: Establish the final, most advanced concepts. These will represent the culmination of the learner's journey and often involve synthesizing knowledge from several intermediate areas.</p> </li> <li> <p>Draw dependencies: The edges connecting the nodes (concepts) in the graph represent the knowledge dependencies. They show that one concept must be learned before another. By tracing the path through these edges, you can clearly see the required learning trajectory.</p> </li> <li> <p>Consider feedback loops: Not all learning is purely linear. Some advanced concepts might lead learners to revisit foundational ideas at a deeper level. These feedback loops can be added to the graph to represent cyclical learning processes.</p> </li> </ol>"},{"location":"chapters/03-concept-dependency/#practical-example","title":"Practical Example","text":"<p>Let's imagine constructing a concept dependency graph for an introductory computer programming course:</p> <ul> <li>Foundational Concepts: Variables, basic syntax, control flow (if statements, loops).</li> <li>Intermediate Concepts: Functions, data structures (arrays, lists), error handling.</li> <li>Learning Goals: Algorithm design, problem-solving with recursion, and object-oriented programming.</li> </ul> <p>The graph would begin with basic syntax and variables as foundational concepts, then flow into control flow and functions. From functions, learners could move on to data structures, which would eventually lead them to algorithm design. By the time learners reach the learning goal of recursion, they would have mastered the prerequisite skills to understand and apply it effectively.</p>"},{"location":"chapters/03-concept-dependency/#concept-dependency-in-adaptive-learning-systems","title":"Concept Dependency in Adaptive Learning Systems","text":"<p>One of the key benefits of creating a concept dependency graph is its application in adaptive learning systems. Generative AI can use these graphs to tailor learning experiences to individual students, ensuring that they are introduced to concepts in the correct order. For instance, if a learner struggles with an intermediate concept, the system can direct them back to the foundational concept that they need to reinforce.</p>"},{"location":"chapters/03-concept-dependency/#structural-checks","title":"Structural Checks","text":"<p>When constructing a concept dependency graph, it's essential to ensure that the structure is complete, coherent, and connected. Without proper structural checks, gaps in the graph could lead to missing or disjointed learning pathways, making it difficult for learners to progress logically from one concept to the next. In this section, we will discuss three key structural checks: ensuring the presence of foundational concepts and learning goals, verifying that every concept is connected to the graph, and eliminating \"orphan nodes.\"</p>"},{"location":"chapters/03-concept-dependency/#check-1-ensure-at-least-one-foundational-concept","title":"Check 1: Ensure At Least One Foundational Concept","text":"<p>A well-formed concept dependency graph must have at least one foundational concept. These concepts serve as the entry points for learning and should be positioned at the base of the graph. Without foundational concepts, learners would have no starting point, which would undermine the structure of the learning pathway.</p> <p>Check: Review your graph to confirm that there are one or more concepts that do not depend on any other nodes. These concepts should be at the far left of the graph (in a left-to-right representation) or at the top (if using a top-down layout). They represent the starting point of the learning journey.</p>"},{"location":"chapters/03-concept-dependency/#check-2-ensure-at-least-one-learning-goal","title":"Check 2: Ensure At Least One Learning Goal","text":"<p>While foundational concepts form the base, the graph should also culminate in at least one learning goal. Learning goals are the ultimate objectives that learners are working toward, representing the most advanced concepts in the graph.</p> <p>Check: Ensure that the graph has at least one concept that represents a learning goal, positioned at the far right (or bottom) of the graph. These should be nodes that no other concepts depend on, indicating that they are the end points of the learning journey.</p>"},{"location":"chapters/03-concept-dependency/#check-3-eliminate-orphan-nodes","title":"Check 3: Eliminate \"Orphan Nodes\"","text":"<p>One of the most critical structural checks is to ensure that there are no \"orphan nodes\" in the graph. An orphan node is a concept that is isolated from the rest of the graph, with no connections (edges) linking it to other concepts. Orphan nodes disrupt the learning flow, as they represent knowledge that is either unconnected to the foundational concepts or unhelpful for achieving the learning goals.</p> <p>Check: Examine the graph to verify that every concept is connected to at least one other concept via an edge. Each node should either have a prerequisite or be a prerequisite for another concept. If any concept lacks connections, you must investigate why and either remove it from the graph or establish the appropriate connections.</p>"},{"location":"chapters/03-concept-dependency/#check-4-verify-full-coverage-of-the-learning-path","title":"Check 4. Verify Full Coverage of the Learning Path","text":"<p>A final structural check is to ensure that the graph provides a full, connected learning path from foundational concepts to learning goals. There should be a clear progression from one side of the graph to the other, where learners can start with the most basic concepts and build up toward mastery.</p> <p>Check: Trace multiple paths through the graph from the foundational concepts to the learning goals. This will help you confirm that learners can follow a continuous sequence of concepts and that no intermediate concepts are skipped. Each concept should serve as either a stepping stone to more advanced topics or as a prerequisite for building necessary knowledge.</p>"},{"location":"chapters/03-concept-dependency/#summary-of-structural-checks","title":"Summary of Structural Checks","text":"<p>Structural checks are vital for ensuring the integrity of a concept dependency graph. By verifying the presence of foundational concepts and learning goals, eliminating orphan nodes, and ensuring all concepts are connected, you can create a well-structured and cohesive learning pathway. These checks not only enhance the flow of knowledge but also ensure that learners have a clear, progressive route through the subject matter without facing gaps or isolated ideas. In both traditional and AI-driven learning environments, performing structural checks is crucial for optimizing the effectiveness of the graph.</p> <p>Add one more section called \"Generating Dependency Graphs with Large-Language-Models\". Talk about how a list of concepts can be an input, and the LLM can then be used to generate a draft of the concept dependencies using the appropriate prompt. The prompt should contain: 1. The list of Concepts 2. Instructions for adding Concept Dependencies for each concept 3. Checks for Foundational Concepts (prerequisites) 4. Checks for Learning Goals 5. Checks for duplication and avoidance of orphaned nodes Generate a sample prompt use for a large-langauge model.</p>"},{"location":"chapters/03-concept-dependency/#generating-dependency-graphs-with-large-language-models","title":"Generating Dependency Graphs with Large-Language Models","text":"<p>One of the most powerful applications of Large Language Models (LLMs) in education is their ability to assist in the generation of concept dependency graphs. By inputting a list of learning concepts, an LLM can draft the relationships between them, identifying which concepts are foundational, intermediate, and learning goals. This enables instructors, curriculum designers, and AI systems to quickly scaffold a structured learning pathway.</p> <p>Using LLMs, you can generate these dependencies through a carefully constructed prompt, which not only lists the concepts but also provides specific instructions for the LLM to organize them into a coherent dependency graph. In this section, we'll explore how to craft such a prompt and leverage LLMs to check for structural integrity, such as ensuring there are no orphaned nodes, that all prerequisites are included, and that learning goals are clearly defined.</p>"},{"location":"chapters/03-concept-dependency/#creating-the-prompt","title":"Creating the Prompt","text":"<p>To generate a concept dependency graph using an LLM, the following elements should be included in the prompt:</p> <ol> <li>List of Concepts: Begin by providing the LLM with a list of concepts that need to be organized.</li> <li>Instructions for Adding Concept Dependencies: Guide the LLM to identify which concepts are prerequisites and which are advanced learning goals.</li> <li>Check for Foundational Concepts: Ensure that the LLM starts with the most basic ideas, identifying concepts that do not depend on others.</li> <li>Check for Learning Goals: Ask the LLM to identify the ultimate learning objectives that serve as end points in the learning pathway.</li> <li>Avoidance of Orphan Nodes: Instruct the LLM to verify that all concepts are connected, ensuring that there are no isolated, unlinked concepts in the graph.</li> <li>Check for Duplications: Make sure that the LLM doesn't introduce duplicate concepts or redundant dependencies.</li> </ol>"},{"location":"chapters/03-concept-dependency/#sample-prompt-for-llm","title":"Sample Prompt for LLM","text":"<p>Below is an example prompt that could be used to generate a concept dependency graph using an LLM:</p> <p>Prompt:</p> <pre><code>You are given the following list of concepts. Your task is to\ngenerate a concept dependency graph where each concept is\nplaced according to its dependencies. Each concept should\neither depend on one or more prerequisites or be a prerequisite\nfor others. You must check for the following:\n\n-   Identify at least one foundational concept that serves\nas a starting point. These concepts should not depend on others.\n-   Identify at least one learning goal that serves as the end point of the graph. These concepts should not have any dependencies and represent the most advanced topics.\n-   Ensure there are no \"orphan nodes\" (concepts without any connections).\n-   Avoid duplicating concepts or introducing redundant relationships.\n\n**List of Concepts:**\n\n1.  Basic Algebra\n2.  Calculus\n3.  Trigonometry\n4.  Graph Theory\n5.  Differential Equations\n6.  Linear Algebra\n7.  Functions and Relations\n8.  Derivatives\n9.  Integrals\n\n**Instructions:**\n\n1.  Begin by identifying the foundational concepts (prerequisites) that serve as the base of the graph.\n2.  For each concept, specify its prerequisites. For example, calculus depends on understanding basic algebra, functions and relations, and trigonometry.\n3.  Identify the learning goals, which should appear as advanced concepts with no further dependencies. In this case, consider topics like graph theory or differential equations.\n4.  Ensure that each concept is connected, forming a continuous learning path from foundational concepts to learning goals.\n5.  Verify that no concepts are duplicated or incorrectly connected.\n</code></pre>"},{"location":"chapters/03-concept-dependency/#how-llms-use-this-prompt","title":"How LLMs Use This Prompt","text":"<p>When provided with a prompt like the one above, an LLM can analyze the list of concepts, draw logical connections, and generate a draft of the concept dependency graph. The model will:</p> <ul> <li>Place basic algebra as a foundational concept because it is a prerequisite for most other topics.</li> <li>Connect calculus, derivatives, and integrals with algebra, functions, and trigonometry.</li> <li>Assign learning goals such as differential equations and graph theory as advanced concepts that rely on prior knowledge from calculus and linear algebra.</li> <li>Ensure that every concept has at least one connection to other nodes, eliminating orphan nodes.</li> <li>Perform structural checks to avoid redundancy or disconnection in the graph.</li> </ul> <p>This process significantly reduces the manual effort required to map out dependencies, allowing educators and AI systems to focus on refining and enhancing the learning experience rather than spending time identifying prerequisites.</p>"},{"location":"chapters/03-concept-dependency/#sample-response","title":"Sample Response","text":"<p>To generate a concept dependency graph based on the given list of concepts, we will first identify foundational concepts, establish the dependencies, and then determine learning goals. Here's how we can organize the dependencies step-by-step:</p>"},{"location":"chapters/03-concept-dependency/#foundational-concepts-prerequisites_1","title":"Foundational Concepts (Prerequisites):","text":"<ol> <li>Basic Algebra -- This is a foundational concept that doesn't depend on other concepts and serves as the base for many other mathematical topics.</li> <li>Functions and Relations -- Another fundamental concept that underpins understanding more advanced topics in mathematics.</li> </ol>"},{"location":"chapters/03-concept-dependency/#intermediate-concepts","title":"Intermediate Concepts:","text":"<ol> <li>Trigonometry -- Depends on both Basic Algebra and Functions and Relations for its mathematical foundations.</li> <li>Linear Algebra -- Requires Basic Algebra and Functions and Relations to understand matrices, vectors, and their operations.</li> <li>Derivatives -- Depends on Basic Algebra, Functions and Relations, and Trigonometry. Derivatives are a key part of calculus and rely on these foundational topics.</li> <li>Integrals -- Depends on Derivatives, Basic Algebra, and Trigonometry. Mastering integrals requires a strong understanding of the prerequisite topics that lead to calculus.</li> </ol>"},{"location":"chapters/03-concept-dependency/#advanced-concepts-learning-goals","title":"Advanced Concepts (Learning Goals):","text":"<ol> <li>Calculus -- This advanced concept depends on Basic Algebra, Trigonometry, and Functions and Relations. It leads to understanding derivatives and integrals.</li> <li>Differential Equations -- This is a learning goal that builds on Calculus and Linear Algebra. It requires a thorough understanding of these concepts but does not introduce new prerequisites.</li> <li>Graph Theory -- This advanced topic depends primarily on Linear Algebra but stands alone in many respects. It serves as an end point in certain mathematical learning paths.</li> </ol>"},{"location":"chapters/03-concept-dependency/#graph-overview","title":"Graph Overview:","text":"<ol> <li>Basic Algebra \u2192 Functions and Relations \u2192 Trigonometry</li> <li>Basic Algebra \u2192 Linear Algebra</li> <li>Functions and Relations \u2192 Derivatives \u2192 Integrals</li> <li>Trigonometry \u2192 Derivatives</li> <li>Derivatives \u2192 Calculus \u2192 Differential Equations</li> <li>Linear Algebra \u2192 Graph Theory</li> </ol>"},{"location":"chapters/03-concept-dependency/#continuous-path","title":"Continuous Path:","text":"<ul> <li>The graph starts with Basic Algebra and Functions and Relations, which flow into Trigonometry and Linear Algebra. From there, Derivatives and Integrals lead into Calculus, which then extends into more specialized topics like Differential Equations and Graph Theory.</li> </ul>"},{"location":"chapters/03-concept-dependency/#no-orphan-nodes","title":"No Orphan Nodes:","text":"<ul> <li>All concepts are connected, with clear dependencies between them. There are no orphan nodes, ensuring that each concept either builds on or leads to another concept.</li> </ul>"},{"location":"chapters/03-concept-dependency/#no-redundancies","title":"No Redundancies:","text":"<ul> <li>Each concept is introduced only once, and the dependencies are logically structured without duplication or redundant relationships.</li> </ul> <p>This approach creates a well-ordered and connected concept dependency graph, ensuring that learners progress logically through the material from foundational concepts to advanced learning goals.</p>"},{"location":"chapters/03-concept-dependency/#conclusion","title":"Conclusion","text":"<p>Using LLMs to generate concept dependency graphs streamlines the design of learning pathways. With a well-constructed prompt, LLMs can map foundational concepts, intermediate ideas, and learning goals, ensuring that all concepts are connected in a coherent structure. This method not only accelerates the creation of dependency graphs but also ensures that the structure is complete, eliminating orphaned nodes and redundancies.</p>"},{"location":"chapters/03-concept-dependency/#data-formats-for-concept-dependency-lists","title":"Data Formats for Concept Dependency Lists","text":"<p>In this course, we will use two difference file formats for storing our learning graphs:</p> <ol> <li>CSV Format - this format is simple and easy for beginners to create with a spreadsheet or text editor.  It is also easy for generative AI tools to generate. Just be aware that you must use quotes to surround names that contain commas.</li> <li>JSON Format - this format is easy for tools like vis.js to read and view. There are also tools to validate this format for correctness.</li> </ol> <p>We also proved Python tools to convert between these formats. See the \"src/csv-to-json\" area of this repo for examples of these tools.</p>"},{"location":"chapters/03-concept-dependency/#csv-format","title":"CSV Format","text":"<pre><code>ConceptID,ConceptName,DependentConceptIDs\n1,Basic Algebra,2|3|4|5\n2,Functions and Relations,3|5\n3,Trigonometry,5\n4,Linear Algebra,7|9\n5,Derivatives,6\n6,Integrals,\n7,Calculus,8\n8,Differential Equations,\n9,Graph Theory,\n</code></pre> <p>Note that the last two foundational concepts do not have dependencies.</p>"},{"location":"chapters/03-concept-dependency/#json-format","title":"JSON Format","text":"<pre><code>{\"nodes\": [\n    {\"id\": 1, \"label\": \"Basic Algebra\"},\n    {\"id\": 2, \"label\": \"Functions and Relations\"},\n    {\"id\": 3, \"label\": \"Trigonometry\"},\n    {\"id\": 4, \"label\": \"Linear Algebra\"},\n    {\"id\": 5, \"label\": \"Derivatives\"},\n    {\"id\": 6, \"label\": \"Integrals\"},\n    {\"id\": 7, \"label\": \"Calculus\"},\n    {\"id\": 8, \"label\": \"Differential Equations\"},\n    {\"id\": 9, \"label\": \"Graph Theory\"}],\n\"edges\": [\n    {\"from\": 1, \"to\": 2}, \n    {\"from\": 1, \"to\": 3}, \n    {\"from\": 1, \"to\": 4}, \n    {\"from\": 2, \"to\": 3}, \n    {\"from\": 2, \"to\": 5}, \n    {\"from\": 3, \"to\": 5}, \n    {\"from\": 4, \"to\": 7}, \n    {\"from\": 4, \"to\": 9}, \n    {\"from\": 5, \"to\": 6}, \n    {\"from\": 7, \"to\": 8}\n]}\n</code></pre>"},{"location":"chapters/03-concept-dependency/#conclusion_1","title":"Conclusion","text":"<p>Concept dependency is the backbone of any structured learning experience. By understanding the relationships between foundational concepts and learning goals, educators can create clearer, more effective pathways for learners. These paths can be visualized and utilized through concept dependency graphs, which not only provide a roadmap for the learner but also help AI systems tailor education to meet individual needs.</p> <p>A well-constructed concept dependency graph ensures that learning is progressive, avoids gaps, and builds toward meaningful goals. Whether you're developing a curriculum or designing an adaptive learning system, understanding and applying concept dependency will ensure that learners can build a solid foundation for advanced understanding and success.</p>"},{"location":"chapters/04-concept-taxonomies/","title":"Concept Taxonomies and Ontologies","text":"<p>In this chapter, we will explore how concepts can be grouped and classified using taxonomies and ontologies. By organizing concepts into meaningful categories, curriculum designers can create richer learning experiences. Taxonomies and ontologies help structure learning content, making it easier to intermix abstract theories with concrete examples, reinforcing learning through diverse types of engagement.</p>"},{"location":"chapters/04-concept-taxonomies/#concept-taxonomies","title":"Concept Taxonomies","text":"<p>A taxonomy is a structured classification of concepts into categories or types, typically in a hierarchical arrangement. In education, concept taxonomies help group ideas based on shared characteristics, making it easier to design a curriculum that balances foundational knowledge with higher-order thinking.</p>"},{"location":"chapters/04-concept-taxonomies/#classifying-concepts-in-a-taxonomy","title":"Classifying Concepts in a Taxonomy","text":"<p>In the context of a learning graph, concepts can be classified in a variety of ways. Below are some common categories that can be used to classify educational content:</p> <ol> <li> <p>Basic Terminology: Concepts that define the core vocabulary of a subject. These serve as building blocks for further understanding. For example, in a computer science course, terms like \"algorithm,\" \"data structure,\" or \"function\" would belong here.</p> </li> <li> <p>Mathematical Concepts: These are abstract ideas that rely on logic and mathematics. They are foundational for many fields, such as physics, economics, or engineering. Concepts like \"linear algebra,\" \"calculus,\" and \"probability theory\" would be part of this category.</p> </li> <li> <p>Recurring Patterns: These are general principles or patterns that appear across different contexts. Examples include \"design patterns\" in software development or \"behavioral patterns\" in psychology.</p> </li> <li> <p>Anti-patterns: These are practices or ideas that may seem beneficial but should be avoided. For example, \"premature optimization\" in coding or \"confirmation bias\" in decision-making.</p> </li> <li> <p>Common Misunderstandings: Concepts that are often misunderstood or misapplied. These can serve as important checkpoints in a learning journey, ensuring that students overcome pitfalls.</p> </li> <li> <p>Illustrations: These are visual representations of concepts, such as diagrams, charts, and graphs. For example, in physics, an illustration of Newton's laws using a force diagram helps learners visualize abstract ideas.</p> </li> <li> <p>Useful Metaphors: Metaphors can simplify complex topics by comparing them to something familiar. For instance, describing \"RAM\" in computing as a \"workspace\" where immediate tasks are performed.</p> </li> <li> <p>Stories or Case Studies: Real-world stories or case studies that show how concepts are applied in practice. These are crucial for reinforcing theoretical knowledge with practical examples.</p> </li> <li> <p>Application of Concepts to Real-World Problems: This involves showing learners how abstract concepts translate into real-world solutions. For instance, how linear algebra is used in 3D modeling or how probability is applied in risk assessment.</p> </li> <li> <p>Warnings about Appropriate Use: These are concepts that warn learners about the limitations or potential misuse of an idea. For example, cautioning students about overfitting in machine learning models.</p> </li> <li> <p>Hands-on Activities: These include experiments, labs, or other interactive activities that allow learners to engage directly with the material. Building a simple circuit or conducting a chemistry experiment are examples.</p> </li> <li> <p>Simulations: Simulations provide a dynamic environment where learners can experiment with different scenarios and see how concepts behave in real time. For example, using software to simulate population growth or stock market fluctuations.</p> </li> </ol>"},{"location":"chapters/04-concept-taxonomies/#the-role-of-taxonomies-in-course-design","title":"The Role of Taxonomies in Course Design","text":"<p>By organizing concepts into a taxonomy, curriculum authors can carefully design a balanced course that introduces learners to a mix of theoretical and practical concepts. The taxonomy allows instructors to move between different levels of abstraction, ensuring that learners don't get bogged down in too much theory without seeing its real-world application.</p> <p>Example: In a course on electrical engineering, the taxonomy might look like this:</p> <ul> <li>Basic Terminology: Voltage, Current, Resistance</li> <li>Mathematical Concepts: Ohm's Law, Kirchhoff's Laws</li> <li>Hands-on Activities: Building a simple circuit using resistors and an LED</li> <li>Illustrations: Circuit diagrams, flow of current representation</li> <li>Simulations: Using a circuit simulator to test different configurations</li> <li>Warnings: The dangers of working with high voltage or improper grounding</li> </ul> <p>A well-designed course would cycle between these classifications, providing learners with varied opportunities to engage with the material.</p>"},{"location":"chapters/04-concept-taxonomies/#concept-ontologies","title":"Concept Ontologies","text":"<p>While taxonomies organize concepts into hierarchical groups, ontologies take this a step further by explicitly defining the relationships between concepts. In other words, an ontology not only classifies concepts but also explains how they are related to one another. In the context of learning, this could mean defining how one concept depends on another, how concepts are grouped, and how they fit into a broader body of knowledge.</p>"},{"location":"chapters/04-concept-taxonomies/#ontologies-in-learning-graphs","title":"Ontologies in Learning Graphs","text":"<p>Ontologies can help clarify the dependencies and relationships between learning concepts, ensuring that no important connections are overlooked. For example:</p> <ul> <li>Concept A depends on Concept B: In a physics course, Newton's Second Law (Concept A) depends on an understanding of force and mass (Concept B).</li> <li>Concept C is a prerequisite for Concept D: In calculus, understanding derivatives (Concept C) is necessary before tackling integrals (Concept D).</li> </ul> <p>Ontologies allow for more complex relationships beyond simple prerequisites. They can capture nuanced relationships such as:</p> <ul> <li>Concept E complements Concept F: In literature, understanding symbolism (Concept E) complements the study of metaphor (Concept F).</li> <li>Concept G contrasts with Concept H: In a philosophy course, the idea of free will (Concept G) contrasts with determinism (Concept H).</li> </ul>"},{"location":"chapters/04-concept-taxonomies/#practical-applications-of-taxonomies-and-ontologies","title":"Practical Applications of Taxonomies and Ontologies","text":"<p>By integrating taxonomies and ontologies, curriculum designers can develop richer learning experiences. Here's how these frameworks enhance learning:</p> <ol> <li> <p>Customization and Differentiation: By identifying various types of concepts, instructors can tailor learning experiences to different learners' needs. Some students may excel with hands-on activities, while others may grasp abstract concepts more easily. A taxonomy of concept types helps create a varied learning experience.</p> </li> <li> <p>Interweaving Theory and Practice: Using a taxonomy to intermix abstract concepts with case studies, metaphors, or hands-on activities can reinforce learning. A lesson on programming algorithms might alternate between introducing the theory (taxonomy: mathematical concept) and showing real-world applications (taxonomy: application of concepts to real-world problems).</p> </li> <li> <p>Adaptive Learning: Ontologies, with their detailed relationships between concepts, are particularly useful for adaptive learning systems. As learners master foundational concepts, the system can automatically guide them to more advanced topics, ensuring that they progress along a logical path.</p> </li> <li> <p>Reducing Misunderstandings: By including \"common misunderstandings\" and \"warnings\" in a taxonomy, educators can proactively address areas where learners typically struggle, minimizing confusion.</p> </li> </ol>"},{"location":"chapters/04-concept-taxonomies/#concept-taxonomy-legends","title":"Concept Taxonomy Legends","text":""},{"location":"chapters/04-concept-taxonomies/#using-a-groupsjson-file","title":"Using a groups.json File","text":"<p>In our labs, we will often generate a small taxonomy of around 10 classifiers. We then want to use these classifiers to display concepts is a way that allow our authors to see patterns in complex learning graphs.  We have adopted a standard format for storing taxonomies called the groups.json format.</p> <p>For each category or group, we can store the following properties:</p> <ol> <li>The background and border color of each unselected node</li> <li>The background and border color of each node when you hover your mouse over the node</li> <li>The background and border color of each node when you select the node</li> <li>The shape and size of the node.  For example we use \"box\" for foundation nodes and star for course goals</li> </ol> <p>Here is an example of this format:</p> <pre><code>{\n    \"Foundation\": {\n        \"color\": {\n            \"background\": \"DarkSalmon\",\n            \"border\": \"FireBrick\",\n            \"highlight\": {\n                \"background\": \"LightSalmon\",\n                \"border\": \"DarkRed\"\n            },\n            \"hover\": {\n                \"background\": \"Salmon\",\n                \"border\": \"DarkRed\"\n            }\n        },\n        \"shape\": \"dot\",\n        \"size\": 20\n    },\n    \"Level 2\": {\n        \"color\": {\n            \"background\": \"DarkOrange\",\n            \"border\": \"OrangeRed\",\n            \"highlight\": {\n                \"background\": \"orange\",\n                \"border\": \"Tomato\"\n            },\n            \"hover\": {\n                \"background\": \"LightSalmon\",\n                \"border\": \"Coral\"\n            }\n        },\n        \"shape\": \"dot\",\n        \"size\": 20\n    },\n    \"Goal\": {\n        \"color\": {\n            \"background\": \"plum\",\n            \"border\": \"purple\",\n            \"highlight\": {\n                \"background\": \"violet\",\n                \"border\": \"mediumorchid\"\n            },\n            \"hover\": {\n                \"background\": \"LightSteelBlue\",\n                \"border\": \"SteelBlue\"\n            }\n        },\n        \"shape\": \"dot\",\n        \"size\": 20\n    }\n}\n</code></pre>"},{"location":"chapters/04-concept-taxonomies/#conclusion","title":"Conclusion","text":"<p>Classifying concepts using taxonomies and ontologies provides a structured framework that enhances the design of learning experiences. Taxonomies offer a way to group concepts into manageable categories, ensuring that courses balance abstract theory with concrete examples. Ontologies, on the other hand, define relationships between concepts, ensuring that dependencies and connections are clearly mapped.</p> <p>Together, these tools allow curriculum authors to design courses that are not only logically structured but also rich in variety and engagement. By integrating both frameworks into learning graphs, educators can create more personalized and effective learning paths, ensuring that students have the opportunity to master concepts both in theory and in practice.</p>"},{"location":"chapters/05-displaying-graphs/","title":"Displaying Learning Graphs","text":"<p>This chapter covers the details of how we display learning graphs. We attempt to keep the details of specific libraries out of this chapter and focus on the usability aspects of viewing and editing learning graphs.</p>"},{"location":"chapters/05-displaying-graphs/#terminology","title":"Terminology","text":""},{"location":"chapters/05-displaying-graphs/#concept-graphs","title":"Concept Graphs","text":"<p>A network graph data structure that uses nodes to represent concepts and edges to show the relationship between concepts.</p> <ul> <li>See also: SKOS</li> </ul>"},{"location":"chapters/05-displaying-graphs/#content-graphs","title":"Content Graphs","text":""},{"location":"chapters/05-displaying-graphs/#journey-maps","title":"Journey Maps","text":""},{"location":"chapters/05-displaying-graphs/#hybrid-graphs","title":"Hybrid Graphs","text":""},{"location":"chapters/05-displaying-graphs/#laying-out-dependency-graphs","title":"Laying out Dependency Graphs","text":""},{"location":"chapters/05-displaying-graphs/#nodes-arrow-and-labels","title":"Nodes, Arrow and Labels","text":""},{"location":"chapters/05-displaying-graphs/#force-directed-graphs","title":"Force Directed Graphs","text":""},{"location":"chapters/05-displaying-graphs/#adjusting-distances","title":"Adjusting Distances","text":""},{"location":"chapters/05-displaying-graphs/#left-to-right-and-top-down-hierarchies","title":"Left to Right and Top Down Hierarchies","text":""},{"location":"chapters/05-displaying-graphs/#pinning-foundational-concepts-and-goals","title":"Pinning Foundational Concepts and Goals","text":""},{"location":"chapters/05-displaying-graphs/#using-colors-and-shapes","title":"Using Colors and Shapes","text":""},{"location":"chapters/05-displaying-graphs/#using-size-and-borders","title":"Using Size and Borders","text":""},{"location":"chapters/05-displaying-graphs/#placing-labels-and-using-abbreviations","title":"Placing Labels and Using Abbreviations","text":""},{"location":"chapters/05-displaying-graphs/#abstraction-and-clustering","title":"Abstraction and Clustering","text":""},{"location":"chapters/05-displaying-graphs/#leveraging-taxonomies-and-ontologies","title":"Leveraging Taxonomies and Ontologies","text":""},{"location":"chapters/05-displaying-graphs/#adding-taxonomy-legends","title":"Adding Taxonomy Legends","text":""},{"location":"chapters/15-dependency-analysis/","title":"Dependency Analysis","text":"<p>In this chapter we will look at algorithms that help find all the dependencies of a given concept within a course learning graph.</p> <p>This is not just finding all the direct dependencies of a concept. It is also about finding the dependencies of the dependencies etc. The number of levels we search is called the number of \"hops\" in the dependency graph.</p>"},{"location":"chapters/17-lms-integration/","title":"Integrating with LMSs","text":""},{"location":"chapters/19-validating/","title":"Validating Learning Graphs and Estimating Quality","text":"<p>If get access to learning graph for a specific topic, you might what to ask, \"What is the overall quality of this learning graph?\".</p> <p>Here are a few points to consider:</p> <ol> <li>How many concept nodes are there in the graph?</li> <li>Are the nodes all connected to the main graph?  How many nodes are there without any edges? (\"orphaned\" nodes)</li> <li>How many foundation nodes (no outgoing edges) are there and how many goal nodes (no incoming edges) are there?</li> <li>Is there metadata associated with the learning graph (title, creator, publication date, 3rd party validation) (see Dublin Core)</li> <li>Is there a taxonomy or ontology associated with the concepts?</li> <li>Is there a legend that is displayed with the learning graph?</li> <li>Are there 3rd party certificates or reviews associated with the learning graph?</li> </ol>"},{"location":"chapters/19-validating/#validating-with-a-json-schema","title":"Validating with a JSON Schema","text":"<p>Because JSON is a standard way of storing data that is loaded into a browser, it is convenient to use the JSON Schema</p>"},{"location":"concepts/","title":"Learning Graph Concept Graph","text":"<p>HTML Viewer</p>"},{"location":"concepts/50-concets/","title":"Top 50 Concepts in a Learning Graph","text":""},{"location":"concepts/50-concets/#sample-prompt","title":"Sample Prompt","text":"<p>Here is a list of 50 concepts related to the creation and use of Learning Graphs in education.  Learning graphs are dependency graphs that show concept dependency for learning.  For this list of concepts, create a dependency list.  For each concept, list the concept IDs that each concept depends on.  Add these concepts as a pipe-delimited list of concept IDs after each concept.  Return a CSV file with three columns:</p> <ul> <li>Column 1 is the ConceptID in the list below</li> <li>Column 2 is the ConceptName in the list below</li> <li> <p>Column 3 is a pipe-delimited list of the dependant concept IDs</p> </li> <li> <p>Concept Graph</p> </li> <li>Dependency Graph</li> <li>Printed Textbooks</li> <li>Linear Learning</li> <li>Non-linear Learning</li> <li>Recommendation Engines</li> <li>Learning Paths</li> <li>Learning Management Systems</li> <li>Content Graph</li> <li>Adaptive Learning</li> <li>MicroSim</li> <li>Intelligent Agents</li> <li>SKOS</li> <li>Knowledge Representation</li> <li>Course Description</li> <li>Learning Objectives</li> <li>Bloom's Taxonomy</li> <li>Dublin Core</li> <li>Foundational Concept</li> <li>Hyper-personalization</li> <li>Journey Map</li> <li>Accessibility</li> <li>Learning Graph</li> <li>Rhizombic Learning</li> <li>Graph Visualization</li> <li>Force Directed Graph</li> <li>JavaScript</li> <li>P5.js</li> <li>vis.js</li> <li>Graph Validation</li> <li>Orphaned Concepts</li> <li>Graph Layout Algorithms</li> <li>Goal Concepts</li> <li>User Interface</li> <li>Chatbot</li> <li>RAG</li> <li>Similarity</li> <li>Concept Similarity</li> <li>Student Similarity</li> <li>Feedback Log</li> <li>Feedback Analysis</li> <li>GraphRAG</li> <li>Learning Content Recommendation Engine</li> <li>Learned Concept</li> <li>Ready to Learn Concept</li> <li>Assessment</li> <li>Learning Touchpoint</li> <li>Frequently Asked Question</li> <li>Content Similarity</li> <li>Course Evaluation</li> </ul>"},{"location":"concepts/50-concets/#chatgpt-o1-preview-response","title":"ChatGPT o1-preview response","text":"<p>Thought for 52 seconds</p> <p>Here is the dependency list for the 50 concepts related to Learning Graphs. Each concept is followed by a pipe-delimited list of concept IDs it depends on.</p> <ol> <li>Concept Graph |</li> <li>Dependency Graph |1</li> <li>Printed Textbooks |</li> <li>Linear Learning |3</li> <li>Non-linear Learning |4</li> <li>Recommendation Engines |5</li> <li>Learning Paths |4|5</li> <li>Learning Management Systems |7</li> <li>Content Graph |1</li> <li>Adaptive Learning |5|8|9</li> <li>MicroSim |10</li> <li>Intelligent Agents |6|10</li> <li>SKOS |</li> <li>Knowledge Representation |13</li> <li>Course Description |14</li> <li>Learning Objectives |15|17</li> <li>Bloom's Taxonomy |</li> <li>Dublin Core |14</li> <li>Foundational Concept |</li> <li>Hyper-personalization |10|12|19</li> <li>Journey Map |16|20</li> <li>Accessibility |7|8</li> <li>Learning Graph |2|9</li> <li>Rhizombic Learning |5|23</li> <li>Graph Visualization |23</li> <li>Force Directed Graph |25</li> <li>JavaScript |</li> <li>P5.js |27</li> <li>vis.js |27</li> <li>Graph Validation |23</li> <li>Orphaned Concepts |30</li> <li>Graph Layout Algorithms |26|29</li> <li>Goal Concepts |16|23</li> <li>User Interface |9|25</li> <li>Chatbot |12|34</li> <li>RAG |6|33|34</li> <li>Similarity |</li> <li>Concept Similarity |37</li> <li>Student Similarity |37</li> <li>Feedback Log |</li> <li>Feedback Analysis |40</li> <li>GraphRAG |36|38|39</li> <li>Learning Content Recommendation Engine |6|10|42</li> <li>Learned Concept |19|23</li> <li>Ready to Learn Concept |16|44</li> <li>Assessment |45</li> <li>Learning Touchpoint |45|46</li> <li>Frequently Asked Question |47</li> <li>Content Similarity |37|39</li> <li>Course Evaluation |46|48</li> </ol> <p>Explanation of Dependencies:</p> <ul> <li>Concept Graph (1): Foundational concept with no dependencies.</li> <li>Dependency Graph (2): Builds upon the idea of a Concept Graph (1).</li> <li>Printed Textbooks (3): Traditional learning resources; foundational.</li> <li>Linear Learning (4): Based on traditional methods like Printed Textbooks (3).</li> <li>Non-linear Learning (5): Evolves from understanding Linear Learning (4).</li> <li>Recommendation Engines (6): Facilitates Non-linear Learning (5).</li> <li>Learning Paths (7): Incorporates both Linear (4) and Non-linear Learning (5).</li> <li>Learning Management Systems (8): Utilize Learning Paths (7) for content delivery.</li> <li>Content Graph (9): Specialized form of Concept Graph (1).</li> <li>Adaptive Learning (10): Depends on Non-linear Learning (5), LMS (8), and Content Graph (9).</li> <li>MicroSim (11): Micro simulations used in Adaptive Learning (10).</li> <li>Intelligent Agents (12): Leverage Recommendation Engines (6) and Adaptive Learning (10).</li> <li>SKOS (13): Standard framework; foundational.</li> <li>Knowledge Representation (14): Built upon SKOS (13).</li> <li>Course Description (15): Utilizes Knowledge Representation (14).</li> <li>Learning Objectives (16): Derived from Course Description (15) and Bloom's Taxonomy (17).</li> <li>Bloom's Taxonomy (17): Foundational educational framework.</li> <li>Dublin Core (18): Another standard; depends on Knowledge Representation (14).</li> <li>Foundational Concept (19): Basic element in learning; foundational.</li> <li>Hyper-personalization (20): Achieved through Adaptive Learning (10), Intelligent Agents (12), and Foundational Concept (19).</li> <li>Journey Map (21): Combines Learning Objectives (16) and Hyper-personalization (20).</li> <li>Accessibility (22): Ensures Learning Paths (7) and LMS (8) are inclusive.</li> <li>Learning Graph (23): Merges Dependency Graph (2) and Content Graph (9).</li> <li>Rhizombic Learning (24): Based on Non-linear Learning (5) and Learning Graph (23).</li> <li>Graph Visualization (25): Visual representation of Learning Graph (23).</li> <li>Force Directed Graph (26): A technique in Graph Visualization (25).</li> <li>JavaScript (27): Programming language; foundational.</li> <li>P5.js (28): Library built on JavaScript (27).</li> <li>vis.js (29): Another JavaScript (27) library for visualization.</li> <li>Graph Validation (30): Ensures accuracy in Learning Graph (23).</li> <li>Orphaned Concepts (31): Identified through Graph Validation (30).</li> <li>Graph Layout Algorithms (32): Techniques from Force Directed Graph (26) and vis.js (29).</li> <li>Goal Concepts (33): Defined using Learning Objectives (16) and Learning Graph (23).</li> <li>User Interface (34): Interfaces for Content Graph (9) and Graph Visualization (25).</li> <li>Chatbot (35): Combines Intelligent Agents (12) and User Interface (34).</li> <li>RAG (36): Incorporates Recommendation Engines (6), Goal Concepts (33), and User Interface (34).</li> <li>Similarity (37): Foundational concept in comparison.</li> <li>Concept Similarity (38): Based on Similarity (37).</li> <li>Student Similarity (39): Also derived from Similarity (37).</li> <li>Feedback Log (40): Record of learner interactions; foundational.</li> <li>Feedback Analysis (41): Processes Feedback Log (40).</li> <li>GraphRAG (42): Integrates RAG (36), Concept Similarity (38), and Student Similarity (39).</li> <li>Learning Content Recommendation Engine (43): Builds on Recommendation Engines (6), Adaptive Learning (10), and GraphRAG (42).</li> <li>Learned Concept (44): Result of mastering Foundational Concept (19) and using Learning Graph (23).</li> <li>Ready to Learn Concept (45): Determined by Learning Objectives (16) and Learned Concept (44).</li> <li>Assessment (46): Evaluates the Ready to Learn Concept (45).</li> <li>Learning Touchpoint (47): Interaction involving Ready to Learn Concept (45) and Assessment (46).</li> <li>Frequently Asked Question (48): Emerges from Learning Touchpoints (47).</li> <li>Content Similarity (49): Uses Similarity (37) and Student Similarity (39) to compare content.</li> <li>Course Evaluation (50): Final assessment involving Assessment (46) and FAQs (48).</li> </ul> <p>Feel free to let me know if you need further details or adjustments!</p>"},{"location":"concepts/50-concets/#concept-taxonomy","title":"Concept Taxonomy","text":""},{"location":"concepts/50-concets/#prompt","title":"Prompt","text":"<p><pre><code>Now create a taxonomy of 10 classifiers for this set of concepts.\nDescribe your taxonomy with a TaxonomyID (1-10), ShortLabel (name) and Description.\n\nChatGPT\n\nThought for 21 seconds\n\nSure! Below is a taxonomy of 10 classifiers for the set of 50 concepts. Each classifier is described with a TaxonomyID, ShortLabel, and Description.\n\n* * * *\n\n**Taxonomy of Concepts**\n\n**TaxonomyID 1**\n\n-   **ShortLabel:** Graph Concepts\n-   **Description:** Concepts related to the creation, analysis, and visualization of graphs used to represent learning dependencies and structures.\n\n**TaxonomyID 2**\n\n-   **ShortLabel:** Learning Theories\n-   **Description:** Concepts that focus on different approaches and methodologies of learning, including linear, non-linear, and rhizombic learning models.\n\n**TaxonomyID 3**\n\n-   **ShortLabel:** Educational Standards\n-   **Description:** Established frameworks and standards that guide educational content creation, metadata, and learning objectives, such as Bloom's Taxonomy and Dublin Core.\n\n**TaxonomyID 4**\n\n-   **ShortLabel:** Learning Technologies\n-   **Description:** Tools and platforms that facilitate the learning process, including Learning Management Systems, MicroSim, and adaptive learning technologies.\n\n**TaxonomyID 5**\n\n-   **ShortLabel:** Personalization and Adaptive Learning\n-   **Description:** Concepts focused on tailoring learning experiences to individual learner needs through adaptive systems, hyper-personalization, and intelligent agents.\n\n**TaxonomyID 6**\n\n-   **ShortLabel:** Visualization and User Interface\n-   **Description:** Concepts related to the visual representation of learning data and user interface design, including graph visualization libraries and UI considerations.\n\n**TaxonomyID 7**\n\n-   **ShortLabel:** Artificial Intelligence in Education\n-   **Description:** Application of AI and intelligent agents in educational contexts to enhance learning through chatbots, recommendation engines, and analytics.\n\n**TaxonomyID 8**\n\n-   **ShortLabel:** Feedback and Analytics\n-   **Description:** Concepts involving the collection, analysis, and utilization of feedback and data to improve learning outcomes and processes.\n\n**TaxonomyID 9**\n\n-   **ShortLabel:** Similarity Metrics\n-   **Description:** Methods and metrics used to measure similarity between concepts and learners, aiding in personalization and recommendation systems.\n\n**TaxonomyID 10**\n\n-   **ShortLabel:** Assessment and Evaluation\n-   -   **Description:** Concepts related to measuring learner progress, readiness, and course effectiveness through assessments and evaluations.\n\n* * * *\n\n**Summary of Taxonomy:**\n\n1.  **Graph Concepts** (ID 1): Focuses on learning graphs, dependency graphs, and related visualization and validation techniques.\n2.  **Learning Theories** (ID 2): Encompasses different learning models like linear, non-linear, and rhizombic learning.\n3.  **Educational Standards** (ID 3): Covers standards like Bloom's Taxonomy, SKOS, and Dublin Core that guide educational content.\n4.  **Learning Technologies** (ID 4): Includes tools and systems like LMS, MicroSim, and adaptive learning platforms.\n5.  **Personalization and Adaptive Learning** (ID 5): Pertains to hyper-personalization, adaptive systems, and intelligent agents that customize learning experiences.\n6.  **Visualization and User Interface** (ID 6): Deals with graph visualization, UI design, and related technologies like JavaScript libraries.\n7.  **Artificial Intelligence in Education** (ID 7): Involves AI applications such as chatbots, recommendation engines, and intelligent analytics.\n8.  **Feedback and Analytics** (ID 8): Focuses on collecting and analyzing feedback to enhance learning processes.\n9.  **Similarity Metrics** (ID 9): Relates to concept and student similarity measures used in personalization.\n10.  **Assessment and Evaluation** (ID 10): Covers assessments, learning touchpoints, and course evaluations to measure learning outcomes.\n\nIf you need further details or wish to see how each concept maps to these classifiers, feel free to ask!\n\n## Add Taxonomy IDs to each Concept\n</code></pre> Now return a new CSV file that has the taxonomy ID appended to each row.</p> <p>Return a CSV file with four columns:</p> <ul> <li>Column 1 is the ConceptID in the list below</li> <li>Column 2 is the ConceptName in the list below</li> <li>Column 3 is the Dependencies, a pipe-delimited list of the dependant concept IDs</li> <li>Column 4 is the TaxonomyID for that concept ```</li> </ul> <p>ChatGPT</p>"},{"location":"concepts/taxonomy/","title":"Taxonomy","text":"<p>Now create a taxonomy of 10 classifiers for this set of concepts. Describe your taxonomy with a TaxonomyID (1-10), ShortLabel (name) and Description.</p> <p>ChatGPT</p> <p>Thought for 21 seconds</p> <p>Sure! Below is a taxonomy of 10 classifiers for the set of 50 concepts. Each classifier is described with a TaxonomyID, ShortLabel, and Description.</p> <p>Taxonomy of Concepts</p> <p>TaxonomyID 1</p> <ul> <li>ShortLabel: Graph Concepts</li> <li>Description: Concepts related to the creation, analysis, and visualization of graphs used to represent learning dependencies and structures.</li> </ul> <p>TaxonomyID 2</p> <ul> <li>ShortLabel: Learning Theories</li> <li>Description: Concepts that focus on different approaches and methodologies of learning, including linear, non-linear, and rhizombic learning models.</li> </ul> <p>TaxonomyID 3</p> <ul> <li>ShortLabel: Educational Standards</li> <li>Description: Established frameworks and standards that guide educational content creation, metadata, and learning objectives, such as Bloom's Taxonomy and Dublin Core.</li> </ul> <p>TaxonomyID 4</p> <ul> <li>ShortLabel: Learning Technologies</li> <li>Description: Tools and platforms that facilitate the learning process, including Learning Management Systems, MicroSim, and adaptive learning technologies.</li> </ul> <p>TaxonomyID 5</p> <ul> <li>ShortLabel: Personalization and Adaptive Learning</li> <li>Description: Concepts focused on tailoring learning experiences to individual learner needs through adaptive systems, hyper-personalization, and intelligent agents.</li> </ul> <p>TaxonomyID 6</p> <ul> <li>ShortLabel: Visualization and User Interface</li> <li>Description: Concepts related to the visual representation of learning data and user interface design, including graph visualization libraries and UI considerations.</li> </ul> <p>TaxonomyID 7</p> <ul> <li>ShortLabel: Artificial Intelligence in Education</li> <li>Description: Application of AI and intelligent agents in educational contexts to enhance learning through chatbots, recommendation engines, and analytics.</li> </ul> <p>TaxonomyID 8</p> <ul> <li>ShortLabel: Feedback and Analytics</li> <li>Description: Concepts involving the collection, analysis, and utilization of feedback and data to improve learning outcomes and processes.</li> </ul> <p>TaxonomyID 9</p> <ul> <li>ShortLabel: Similarity Metrics</li> <li>Description: Methods and metrics used to measure similarity between concepts and learners, aiding in personalization and recommendation systems.</li> </ul> <p>TaxonomyID 10</p> <ul> <li>ShortLabel: Assessment and Evaluation</li> <li> <ul> <li>Description: Concepts related to measuring learner progress, readiness, and course effectiveness through assessments and evaluations.</li> </ul> </li> </ul> <p>Summary of Taxonomy:</p> <ol> <li>Graph Concepts (ID 1): Focuses on learning graphs, dependency graphs, and related visualization and validation techniques.</li> <li>Learning Theories (ID 2): Encompasses different learning models like linear, non-linear, and rhizombic learning.</li> <li>Educational Standards (ID 3): Covers standards like Bloom's Taxonomy, SKOS, and Dublin Core that guide educational content.</li> <li>Learning Technologies (ID 4): Includes tools and systems like LMS, MicroSim, and adaptive learning platforms.</li> <li>Personalization and Adaptive Learning (ID 5): Pertains to hyper-personalization, adaptive systems, and intelligent agents that customize learning experiences.</li> <li>Visualization and User Interface (ID 6): Deals with graph visualization, UI design, and related technologies like JavaScript libraries.</li> <li>Artificial Intelligence in Education (ID 7): Involves AI applications such as chatbots, recommendation engines, and intelligent analytics.</li> <li>Feedback and Analytics (ID 8): Focuses on collecting and analyzing feedback to enhance learning processes.</li> <li>Similarity Metrics (ID 9): Relates to concept and student similarity measures used in personalization.</li> <li>Assessment and Evaluation (ID 10): Covers assessments, learning touchpoints, and course evaluations to measure learning outcomes.</li> </ol> <p>If you need further details or wish to see how each concept maps to these classifiers, feel free to ask!</p> <p>o1</p>"},{"location":"concepts/taxonomy/#you-said","title":"You said:","text":"<p>Now return a new CSV file that has the taxonomy ID appended to each row. Return a CSV file with four columns: - Column 1 is the ConceptID in the list below - Column 2 is the ConceptName in the list below - Column 3 is the Dependencies, a pipe-delimited list of the dependant concept IDs - Column 4 is the TaxonomyID for that concept</p> <p>ChatGPT</p> <p>Thought for 1m 35s</p> <p>Certainly! Below is the CSV file with four columns: ConceptID, ConceptName, Dependencies, and TaxonomyID.</p> <pre><code>csv\nCopy code\n\n`ConceptID,ConceptName,Dependencies,TaxonomyID\n1,Concept Graph,,1\n2,Dependency Graph,1,1\n3,Printed Textbooks,,2\n4,Linear Learning,3,2\n5,Non-linear Learning,4,2\n6,Recommendation Engines,5,7\n7,Learning Paths,4|5,2\n8,Learning Management Systems,7,4\n9,Content Graph,1,1\n10,Adaptive Learning,5|8|9,5\n11,MicroSim,10,4\n12,Intelligent Agents,6|10,7\n13,SKOS,,3\n14,Knowledge Representation,13,3\n15,Course Description,14,3\n16,Learning Objectives,15|17,3\n17,Bloom's Taxonomy,,3\n18,Dublin Core,14,3\n19,Foundational Concept,,2\n20,Hyper-personalization,10|12|19,5\n21,Journey Map,16|20,5\n22,Accessibility,7|8,5\n23,Learning Graph,2|9,1\n24,Rhizombic Learning,5|23,2\n25,Graph Visualization,23,6\n26,Force Directed Graph,25,6\n27,JavaScript,,6\n28,P5.js,27,6\n29,vis.js,27,6\n30,Graph Validation,23,1\n31,Orphaned Concepts,30,1\n32,Graph Layout Algorithms,26|29,6\n33,Goal Concepts,16|23,3\n34,User Interface,9|25,6\n35,Chatbot,12|34,7\n36,RAG,6|33|34,7\n37,Similarity,,9\n38,Concept Similarity,37,9\n39,Student Similarity,37,9\n40,Feedback Log,,8\n41,Feedback Analysis,40,8\n42,GraphRAG,36|38|39,7\n43,Learning Content Recommendation Engine,6|10|42,7\n44,Learned Concept,19|23,10\n45,Ready to Learn Concept,16|44,5\n46,Assessment,45,10\n47,Learning Touchpoint,45|46,5\n48,Frequently Asked Question,47,8\n49,Content Similarity,37|39,9\n50,Course Evaluation,46|48,10\n`\n</code></pre> <p>Explanation of Columns:</p> <ul> <li>ConceptID: The unique identifier for each concept (1 to 50).</li> <li>ConceptName: The name of the concept.</li> <li>Dependencies: A pipe-delimited list of ConceptIDs that the current concept depends on.</li> <li>TaxonomyID: The identifier of the taxonomy classifier (1 to 10) assigned to each concept.</li> </ul> <p>Summary of Taxonomy Classifiers:</p> <p>TaxonomyID 1</p> <ul> <li>ShortLabel: Graph Concepts</li> <li>Description: Concepts related to the creation, analysis, and visualization of graphs used to represent learning dependencies and structures.</li> </ul> <p>TaxonomyID 2</p> <ul> <li>ShortLabel: Learning Theories</li> <li>Description: Concepts focusing on different approaches and methodologies of learning, including linear, non-linear, and rhizombic learning models.</li> </ul> <p>TaxonomyID 3</p> <ul> <li>ShortLabel: Educational Standards</li> <li>Description: Established frameworks and standards guiding educational content creation, metadata, and learning objectives.</li> </ul> <p>TaxonomyID 4</p> <ul> <li>ShortLabel: Learning Technologies</li> <li>Description: Tools and platforms facilitating the learning process, such as Learning Management Systems and MicroSim.</li> </ul> <p>TaxonomyID 5</p> <ul> <li>ShortLabel: Personalization and Adaptive Learning</li> <li>Description: Concepts focused on tailoring learning experiences to individual learner needs through adaptive systems and hyper-personalization.</li> </ul> <p>TaxonomyID 6</p> <ul> <li>ShortLabel: Visualization and User Interface</li> <li>Description: Concepts related to the visual representation of learning data and user interface design, including visualization libraries.</li> </ul> <p>TaxonomyID 7</p> <ul> <li>ShortLabel: Artificial Intelligence in Education</li> <li>Description: Application of AI and intelligent agents in educational contexts to enhance learning through chatbots and recommendation engines.</li> </ul> <p>TaxonomyID 8</p> <ul> <li>ShortLabel: Feedback and Analytics</li> <li>Description: Concepts involving the collection, analysis, and utilization of feedback and data to improve learning outcomes.</li> </ul> <p>TaxonomyID 9</p> <ul> <li>ShortLabel: Similarity Metrics</li> <li>Description: Methods and metrics used to measure similarity between concepts and learners, aiding in personalization and recommendation systems.</li> </ul> <p>TaxonomyID 10</p> <ul> <li>ShortLabel: Assessment and Evaluation</li> <li>Description: Concepts related to measuring learner progress, readiness, and course effectiveness through assessments and evaluations.</li> </ul> <p>Example Entries Explained:</p> <ul> <li>ConceptID 1: Concept Graph has no dependencies and falls under TaxonomyID 1 (Graph Concepts).</li> <li>ConceptID 10: Adaptive Learning depends on ConceptIDs 5 (Non-linear Learning), 8 (Learning Management Systems), and 9 (Content Graph), and is classified under TaxonomyID 5 (Personalization and Adaptive Learning).</li> <li>ConceptID 35: Chatbot depends on ConceptIDs 12 (Intelligent Agents) and 34 (User Interface), and is under TaxonomyID 7 (Artificial Intelligence in Education).</li> </ul> <p>Feel free to download or copy this CSV content for your use. If you need any further modifications or additional information, please let me know!</p> <p>o1</p>"},{"location":"prompts/","title":"Prompts to Create Learning Graphs","text":""},{"location":"prompts/#concept-enumeration","title":"Concept Enumeration","text":""},{"location":"prompts/01-course-description/","title":"Course Description Prompts","text":""},{"location":"prompts/01-course-description/#sample-prompt-to-generate-a-course-description","title":"Sample Prompt to Generate a Course Description","text":"<pre><code>Design a detailed and engaging course description for a\ncollege-level course titled [SUBJECT]\nthat is suitable for undergraduate students in\n[DEPARTMENT1] or [DEPARTMENT2].\n\nLeverage Bloom\u2019s Taxonomy to structure the course, detailing\nthe knowledge, skills, and applications students will\ndevelop at each cognitive level (remember, understand,\napply, analyze, evaluate, and create).\n\nIn the description, highlight how generative AI will\nserve as a primary teaching tool in the following ways:\n\nMetaphors and Analogies: Explain how generative AI will\ndynamically create metaphors that help students understand\ncomplex circuits and system concepts intuitively, for example,\ncomparing [XXX] to [YYY] different contexts.\n\nStories and Lessons: Illustrate how AI-generated narratives will guide students through historical milestones in circuit design, with characters like pioneering engineers or scientists to add context and enhance engagement.\n\nContent Generation: Describe how AI will develop interactive content\u2014such as real-time quizzes, customized practice problems, and detailed walkthroughs of circuit diagrams\u2014that align with students' progress and areas of improvement.\n\nSimulations and Animations: Outline how AI-powered simulations will allow students to interact with virtual circuit models, adjusting parameters and observing outcomes in real-time, and how animations will visually represent phenomena like current flow and voltage changes.\n\nLearning Activities and Projects: Explain how generative AI will generate scaffolded project suggestions based on Bloom\u2019s higher-order objectives, like creating their own circuit designs or troubleshooting complex systems. AI should provide formative feedback throughout each step to foster critical thinking.\n\nAssessment and Feedback: Describe how AI-driven assessments will go beyond traditional grading, providing personalized feedback loops that prompt self-reflection, track learning progress, and guide students through iterative problem-solving exercises.\n\nThe course description should aim to inspire curiosity and convey how AI enhances interactivity and personalizes the learning journey, supporting students in achieving a deep and practical understanding of circuits and systems.\n</code></pre>"},{"location":"prompts/01-course-description/#chatgpt-response","title":"ChatGPT Response","text":"<p>Here is a sample response for the course \"Graph Data Modeling\" within the department \"Computer Science\"</p>"},{"location":"prompts/02-concept-enumeration/","title":"Concept Enumeration Prompts","text":""},{"location":"prompts/02-concept-enumeration/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Below is a course description of a course on SUBJECT\nI am teaching at a local HIGH SCHOOL, COLLEGE or University.\nPlease generate a list of the 150 core concepts that\nneed to be covered in this course and the order in\nwhich they should be taught.\n\nReturn numbered list of these core concepts using\na single line per concept.  For each concept,\njust return a short concept name and use acronyms or abbreviations\nwhen appropriate.  They will be used as labels in a graph network.\nMake sure that the concepts are distinct not duplicated in the list.\n\nStart with the most basic foundational concepts and then\nproceed to the most complex concepts.\n</code></pre>"},{"location":"prompts/02-concept-enumeration/#chatgpt-response","title":"ChatGPT Response","text":""},{"location":"prompts/03-concept-dependencies/","title":"Concept Dependencies","text":""},{"location":"prompts/03-concept-dependencies/#sample-prompt","title":"Sample Prompt","text":"<pre><code>I am creating a course on [SUBJECT] in the [DEPARTMENT] at a [COLLAGE].\nI have a list of the 150 concepts taught in this course.\n\nPlease create a fully connected concept dependency graph\nfor the concepts in this course.\nIn this step, for each Concept on this list below, create a new\nlist of other concepts on which it depends.  If a concept\ndepends on a specific concept that is not listed,\nthen we will need to add it as a new concept.\nThis will help us determine the teaching order of the Concepts.\n\nReturn the new list as a CSV file using the following format:\n\n1. The first column in the CSV file is a numeric concept\nID you assigned in the list above.\n2. The second column is the concept name.\n3. The third column is a pipe-delimited list of the Concept IDs that the concept depends upon.\n\nCheck your results to make sure that all concepts are connected to at least one other concept.\n\nFoundation Concepts are concepts that have no dependant concepts in this set.  \nThey have an empty third column.\n\nHere is a numbered list of 150 core concepts for my course, presented in the order they should be taught, from foundational to advanced:\n\n1,Concept Name 1\n2,Concept Name 2\n</code></pre>"},{"location":"prompts/04-taxonomies/","title":"Concept Taxonomies","text":""},{"location":"prompts/04-taxonomies/#concept-taxonomy-prompts","title":"Concept Taxonomy Prompts","text":""},{"location":"prompts/04-taxonomies/#automatically-creating-a-taxonomy-for-concepts-using-large-language-models","title":"Automatically Creating a Taxonomy for Concepts Using Large Language Models","text":"<p>One of the exciting applications of Large Language Models (LLMs) in educational technology is their ability to automatically generate taxonomies from a list of concepts. By providing a set of concepts as input, an LLM can suggest logical groupings based on the nature of the concepts, their uses, and their relationships. This automatic generation of a taxonomy saves time for curriculum designers and can reveal categories that may not have been initially obvious.</p>"},{"location":"prompts/04-taxonomies/#creating-a-taxonomy-with-llms","title":"Creating a Taxonomy with LLMs","text":"<p>To generate a taxonomy using an LLM, you can craft a prompt that provides clear instructions on how to organize concepts into distinct categories. Below is a sample prompt structure for generating a taxonomy:</p>"},{"location":"prompts/04-taxonomies/#sample-taxonomy-prompt","title":"Sample Taxonomy Prompt","text":"<pre><code>You are given the following list of concepts. Your task is to\norganize these concepts into a taxonomy by grouping them into\nappropriate categories. Each category should include concepts\nthat share similar characteristics, functions, or applications.\nSuggest 7-10 categories for the taxonomy and assign each concept\nto one or more categories. Ensure that the categories cover\na range of concept types, including abstract ideas, practical\napplications, common misunderstandings, and real-world examples.\nAvoid redundancy and ensure that each category is distinct.\n</code></pre>"},{"location":"prompts/04-taxonomies/#sample-response","title":"Sample Response","text":"<p>List of Concepts:</p> <ol> <li>Basic Algebra</li> <li>Trigonometry</li> <li>Derivatives</li> <li>Calculus</li> <li>Linear Algebra</li> <li>Graph Theory</li> <li>Differential Equations</li> <li>Integrals</li> <li>Functions and Relations</li> <li>Common Misunderstandings in Algebra</li> </ol> <p>Instructions:</p> <ol> <li>Identify 7-10 categories to classify these concepts.</li> <li>Group concepts into appropriate categories based on their characteristics.</li> <li>Include categories such as basic terminology, abstract concepts, hands-on activities, common misunderstandings, and applications in real-world problems.</li> <li>Ensure each category is distinct and that no concept is placed in more than one category unless appropriate.</li> <li>Suggest ways to differentiate these categories visually using color and shape in a learning graph.</li> </ol>"},{"location":"prompts/04-taxonomies/#sample-output-from-an-llm","title":"Sample Output from an LLM","text":"<p>Given this prompt, an LLM could generate a taxonomy like the following:</p> <p>Sample Generated Taxonomy</p> <ol> <li> <p>Basic Terminology:</p> <ul> <li>Basic Algebra</li> <li>Functions and Relations</li> </ul> </li> <li> <p>Mathematical Concepts:</p> <ul> <li>Trigonometry</li> <li>Calculus</li> <li>Linear Algebra</li> </ul> </li> <li> <p>Abstract Theories:</p> </li> <li> <p>Derivatives</p> </li> <li>Integrals</li> <li> <p>Differential Equations</p> </li> <li> <p>Graphical Models:</p> </li> <li> <p>Graph Theory</p> </li> <li> <p>Common Misunderstandings:</p> </li> <li> <p>Common Misunderstandings in Algebra</p> </li> <li> <p>Real-World Applications:</p> <ul> <li>Applications of Calculus to Real-World Problems</li> <li>Applications of Graph Theory in Networking</li> </ul> </li> <li> <p>Patterns and Recurring Themes:</p> <ul> <li>Functions and Relations</li> <li>Recurring patterns in Differential Equations</li> </ul> </li> </ol>"},{"location":"prompts/04-taxonomies/#differentiating-categories-visually","title":"Differentiating Categories Visually","text":"<p>Once the LLM provides a taxonomy, the next step is to visualize these groupings in a learning graph. In a visual representation, color and shape can be powerful tools to differentiate concept types and enhance understanding:</p> <ol> <li> <p>Colors: Each category can be assigned a unique color to make the relationships between concepts immediately visible. For example:</p> </li> <li> <p>Basic Terminology could be light blue to signify foundational knowledge.</p> </li> <li>Mathematical Concepts could be green to denote abstract, logical reasoning.</li> <li>Graphical Models might be red to emphasize their visual nature.</li> <li> <p>Common Misunderstandings could be orange to highlight potential pitfalls.</p> <p>Colors allow learners to quickly identify the type of concept they are engaging with and follow a consistent thread through the learning graph.</p> </li> <li> <p>Shapes: Shapes can further distinguish different types of concepts:</p> </li> <li> <p>Circles for core concepts like terminology and mathematical foundations.</p> </li> <li>Squares for practical applications or hands-on activities.</li> <li>Triangles for common misunderstandings or warnings, drawing attention to critical areas of focus.</li> <li> <p>Hexagons for recurring patterns or themes, showing how these concepts appear in multiple contexts.</p> <p>By combining both color and shape, learners can visually parse complex information at a glance, making it easier to understand how different types of knowledge interrelate.</p> </li> </ol>"},{"location":"prompts/04-taxonomies/#example-visualization-of-taxonomy-in-a-learning-graph","title":"Example: Visualization of Taxonomy in a Learning Graph","text":"<p>Imagine a learning graph where the foundational concepts (basic terminology) are represented as blue circles at the base of the graph, with arrows leading toward more advanced topics. As you progress, mathematical concepts are shown in green circles, while real-world applications are depicted in green squares. Common misunderstandings appear as orange triangles, highlighting areas where extra attention is needed. Recurring patterns are represented as hexagons, showing connections across different branches of the graph.</p> <p>This visual distinction not only helps learners identify the nature of each concept but also provides a clearer picture of how different categories of knowledge interact with each other.</p>"},{"location":"prompts/04-taxonomies/#benefits-of-using-llm-generated-taxonomies","title":"Benefits of Using LLM-Generated Taxonomies","text":"<ol> <li> <p>Time Efficiency: LLMs can quickly analyze a set of concepts and generate a well-organized taxonomy, significantly reducing the manual effort involved.</p> </li> <li> <p>Uncovering Hidden Relationships: By suggesting categories that may not be immediately obvious, LLMs can help uncover new ways of thinking about how concepts are related. For example, a category of \"common misunderstandings\" might be overlooked by an instructor but could be essential for preventing knowledge gaps.</p> </li> <li> <p>Consistent Course Design: By providing a clear taxonomy, LLMs can ensure that concepts are consistently categorized across a curriculum. This consistency helps in maintaining a structured learning experience where students can track their progress through different categories of knowledge.</p> </li> <li> <p>Enhanced Visual Learning: Using color and shape to represent categories makes learning graphs more intuitive and engaging, helping students to visualize the relationships between different types of knowledge.</p> </li> </ol>"},{"location":"prompts/04-taxonomies/#displaying-taxonomy-legends","title":"Displaying Taxonomy Legends","text":"<p>In order for viewers to view large concept graphs, it is handy to have a legend appear</p>"},{"location":"prompts/04-taxonomies/#tools-to-enrich","title":"Tools to Enrich","text":""},{"location":"prompts/04-taxonomies/#conclusion","title":"Conclusion","text":"<p>Leveraging LLMs to generate concept taxonomies is a powerful tool for organizing educational content. By classifying concepts into distinct categories such as basic terminology, abstract theories, practical applications, and common misunderstandings, educators can design more structured and engaging learning experiences. Visualizing these taxonomies using color and shape further enhances comprehension, allowing learners to easily grasp the types and relationships of concepts in a learning graph.</p> <p>This combination of automated taxonomy generation and visually distinct representations can help curriculum designers ensure that learners move through both abstract and concrete concepts fluidly, reinforcing their understanding through varied, meaningful interactions with the material.</p> <p>4o</p> <p>window.__oai_logHTML?window.__oai_logHTML():window.__oai_SSR_HTML=window.__oai_SSR_HTML||Date.now();requestAnimationFrame((function(){window.__oai_logTTI?window.__oai_logTTI():window.__oai_SSR_TTI=window.__oai_SSR_TTI||Date.now()}))</p>"},{"location":"prompts/06-quiz/","title":"Learning Graph Quiz","text":""},{"location":"prompts/06-quiz/#sample-prompt-for-multiple-choice-qustions","title":"Sample Prompt for Multiple-choice Qustions","text":"<pre><code>I am preparing a review quiz for a course called \"Learning Graphs.\"\nFor the network graph concept of the term \"degree,\" create a four-answer\nmultiple-choice questions, the definition of the term \"degree.\"  Create three\nplausible destructor answers that are incorrect but have a\nsimilar form to the correct answer.  Use the following format:\n\n#### Question 1\n\nWhat is the \"degree\" of a node in a graph?\n\n```markdown {.upper-alpha}\n1. Response 1\n2. Response 2\n3. Response 3\n4. Response 4\n```\n\n??? note \"Show Answer\"\n    The correct answer is **LETTER**.  Explanation of answer text.\n</code></pre>"},{"location":"prompts/06-quiz/#sample-responses","title":"Sample Responses","text":""},{"location":"prompts/06-quiz/#self-assessment-question-47","title":"Self Assessment Question 47","text":"<p>What is the \"degree\" of a node in a graph?</p> <pre><code>1. The shortest path between two nodes in the graph\n2. The total number of edges connected to the node\n3. The number of nodes directly reachable from the node\n4. The maximum number of edges any node in the graph has\n</code></pre> Show Answer <p>The correct answer is B. The degree of a node in a  graph is the total number of edges connected to that node.  For undirected graphs, this includes all edges, while for  directed graphs, it can be further classified into in-degree  (edges coming into the node) and out-degree (edges going out of the node).</p>"},{"location":"prompts/06-quiz/#learning-graph-representation","title":"Learning Graph Representation","text":"<p>Learning Graphs are a represented as a concept dependency graphs True or False??</p> Show Answer <p>True:  Learning Graphs stored as a graph of concept where each concept has an edge to the concepts that must be understood before you can understand that concept.</p>"},{"location":"prompts/06-quiz/#question-2","title":"Question 2","text":"<p>True or False: Learning Graphs are used to create custom learning plans.</p> Show Answer <p>True:  Learning Graphs can find all the dependent concepts for a given concept so they are ideal for generating a listed of all unmastered concepts that a concept depends on.</p>"},{"location":"prompts/06-quiz/#question-3","title":"Question 3","text":"<p>True or False: Within a Learning Graph course, all concepts must have other  concepts listed that they depend upon.</p> Show Answer <p>False:  Foundation concepts, also called prerequisites  concepts, do not have dependencies listed for a given course.</p>"},{"location":"prompts/06-quiz/#render-test-2-superfences","title":"Render Test 2 Superfences","text":"<p>::: {.upper-alpha} 1. Response 1 2. Response 2 3. Response 3 4. Response 4 :::</p>"},{"location":"prompts/06-quiz/#render-test-3-superfences","title":"Render Test 3 Superfences","text":"<p>::: {:.upper-alpha} 1. Bla Bla Bla 2. Bla Bla Bla 3. Bla Bla Bla 4. Bla Bla Bla :::</p>"},{"location":"prompts/10-vis-editor/","title":"Vis.js Network Graph Editor","text":""},{"location":"prompts/10-vis-editor/#prompt","title":"Prompt","text":"<pre><code>Please create a graph network editor\nthat uses the vis.js library.  The editor\nshould be able to do the following:\n\n1. Create a new graph network (New Graph)\n2. Open an existing graph network from a JSON file (Open)\n2. Add a new node (Add Node)\n3. Change properties of a node such as the label and group\n4. Delete a selected node (Delete Node)\n5. Add a new edge between two nodes (Add Edge)\n6. Delete an edge (Delete Edge)\n7. Save the graph Network (Save)\n8. Save the graph network to a new name (Save As)\n\nI have a start here.\n\nPlease use the following HTML template called graph-editor.html:\n\n```html\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Vis.js Graph Network Editor&lt;/title&gt;\n  &lt;script type=\"text/javascript\" src=\"https://unpkg.com/vis-network/standalone/umd/vis-network.min.js\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\" src=\"graph-editor.js\" defer&gt;&lt;/script&gt;\n  &lt;style&gt;\n    #mynetwork {\n      width: 100%;\n      height: 600px;\n      border: 1px solid lightgray;\n    }\n    #sidebar {\n      float: left;\n      width: 20%;\n      padding: 10px;\n    }\n    #main {\n      margin-left: 22%;\n      padding: 10px;\n    }\n    .stats {\n      margin-top: 10px;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;div id=\"sidebar\"&gt;\n  &lt;h3&gt;Graph Editor&lt;/h3&gt;\n  &lt;input type=\"file\" id=\"file-input\" accept=\".json\"&gt;&lt;br&gt;&lt;br&gt;\n  &lt;button onclick=\"addNode()\"&gt;Add Node&lt;/button&gt;\n  &lt;button onclick=\"addEdge()\"&gt;Add Edge&lt;/button&gt;&lt;br&gt;&lt;br&gt;\n  &lt;button onclick=\"editSelected()\"&gt;Edit Selected&lt;/button&gt;\n  &lt;button onclick=\"deleteSelected()\"&gt;Delete Selected&lt;/button&gt;&lt;br&gt;&lt;br&gt;\n  &lt;button onclick=\"saveGraph()\"&gt;Save&lt;/button&gt;\n  &lt;button onclick=\"saveAsGraph()\"&gt;Save As&lt;/button&gt;&lt;br&gt;&lt;br&gt;\n  &lt;button onclick=\"changeGlobalOptions()\"&gt;Global Options&lt;/button&gt;\n  &lt;div class=\"stats\" id=\"stats\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n\n&lt;div id=\"main\"&gt;\n  &lt;div id=\"mynetwork\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>This loads the following JavaScript file called graph-editor.js</p> <pre><code>// Declare variables for nodes, edges, and network globally so they can be accessed everywhere\nvar nodes = new vis.DataSet();\nvar edges = new vis.DataSet();\nvar network = null;\nvar edgeIdCounter = 1; // Counter to keep track of the next edge ID\n\n\ndocument.addEventListener('DOMContentLoaded', (event) =&gt; {\n  console.log(\"DOM fully loaded and parsed\");\n\n  // Ensure the button is found and attach event listener for edge creation mode\n  var addEdgeButton = document.getElementById('add-edge-btn');\n  if (addEdgeButton) {\n    console.log(\"Found 'Add Edge' button.\");\n    addEdgeButton.addEventListener('click', function() {\n      console.log(\"Add Edge button clicked.\");\n      edgeCreationMode = true;\n      selectedNodes = []; // Reset selected nodes\n      console.log(\"Edge creation mode activated. Please select two nodes.\");\n      // alert(\"Edge creation mode activated. Select two nodes to create an edge.\");\n    });\n  } else {\n    console.error(\"'Add Edge' button not found.\");\n  }\n\n  // Initialize network only if container is found\n  var container = document.getElementById('mynetwork');\n  if (container) {\n    console.log(\"In container. Initializing network...\");\n\n    // Create node and edge datasets\n    var data = { nodes: nodes, edges: edges };\n    var options = {\n      physics: {\n        enabled: true, // Enable physics to auto-arrange nodes and edges\n        solver: \"forceAtlas2Based\", // Use a stable layout algorithm\n        stabilization: { iterations: 100 } // Stabilize after 100 iterations\n      }\n    };\n\n    // Create network\n    var network = new vis.Network(container, data, options);\n    console.log(\"In container. Network initialized successfully.\");\n\n    console.log(\"Nodes added:\", nodes.get());\n    console.log(\"Edges added:\", edges.get());\n\n    // Event listeners for network interactions\n    network.on(\"selectNode\", function (params) {\n      if (params.nodes.length) {\n        var nodeId = params.nodes[0];\n        console.log(\"Node selected:\", nodeId);\n\n        // Only add the node if it's not already selected\n        if (selectedNodes.indexOf(nodeId) === -1) {\n          selectedNodes.push(nodeId);\n        }\n\n        // Check if we're in edge creation mode and two nodes are selected\n        if (edgeCreationMode &amp;&amp; selectedNodes.length === 2) {\n          var fromNode = selectedNodes[0];\n          var toNode = selectedNodes[1];\n\n          // Add an edge between selected nodes with sequential ID\n          edges.add({ from: fromNode, to: toNode, id: edgeIdCounter++, label: \"New Edge\" });\n          console.log(\"Edge created between:\", fromNode, \"and\", toNode);\n\n          // alert(\"Edge created between node \" + fromNode + \" and node \" + toNode);\n\n          // Refresh network to reflect the new edge\n          network.setData({ nodes: nodes, edges: edges });\n\n          // Reset edge creation mode and selected nodes\n          selectedNodes = [];\n          edgeCreationMode = false;\n        }\n      }\n    });\n\n    network.on(\"deselectNode\", function (params) {\n      // If nodes are deselected while in edge creation mode, do not reset selected nodes\n      if (params.previousSelection.nodes.length) {\n        console.log(\"Node deselected. Keeping selected nodes.\");\n        // Do not reset selectedNodes here to allow edge creation\n      }\n    });\n\n    network.on(\"selectEdge\", function (params) {\n      if (params.edges.length) {\n        var edgeId = params.edges[0];\n        var edge = edges.get(edgeId);\n        console.log(\"Edge selected:\", edgeId);\n\n        // Fill the form with the edge data\n        document.getElementById('edge-id').value = edge.id;\n        document.getElementById('edge-label').value = edge.label || \"\";\n      }\n    });\n\n    // Handle edge label update form submission\n    document.getElementById('edge-form').addEventListener('submit', function(event) {\n      event.preventDefault();\n\n      var edgeId = document.getElementById('edge-id').value;\n      var newLabel = document.getElementById('edge-label').value;\n\n      if (edgeId) {\n        // Fetch the current edge to avoid overwriting other properties\n        var currentEdge = edges.get(edgeId);\n        if (currentEdge) {\n\n          console.log(\"Before update:\", edges.get(edgeId));\n          edges.update({ id: edgeId, label: newLabel });\n          console.log(\"After update:\", edges.get(edgeId));\n\n          console.log(\"Edge updated:\", edgeId, \"with new label:\", newLabel);\n        } else {\n          console.error(\"Edge with ID:\", edgeId, \"not found.\");\n        }\n      }\n    });\n\n    console.log(\"End of container initializations.\");\n  } else {\n    console.error(\"'mynetwork' container not found. Network not initialized.\");\n  }\n});\n\n// Variables for edge creation mode\nvar selectedNodes = [];\nvar edgeCreationMode = false;\n\n// Load graph from JSON file\n// add an event listener if we get a new input file\ndocument.getElementById('file-input').addEventListener('change', function() {\n  var file = this.files[0];\n  if (file &amp;&amp; file.name.endsWith('.json')) {\n    console.log(\"File selected:\", file.name);\n    var reader = new FileReader();\n    reader.onload = function(e) {\n      try {\n        var graphData = JSON.parse(e.target.result);\n        console.log(\"File contents parsed:\", graphData);\n\n        // Clear current nodes and edges before loading new data\n        nodes.clear();\n        edges.clear();\n\n        // Load nodes and edges from the file\n        if (graphData.nodes &amp;&amp; graphData.edges) {\n          nodes.add(graphData.nodes);\n          graphData.edges.forEach(function(edge) {\n            // Only assign a new ID if one is not provided in the file\n            if (!edge.id) {\n              edge.id = edgeIdCounter++;\n            } else {\n              edgeIdCounter = Math.max(edgeIdCounter, edge.id + 1); // Ensure counter is ahead of the current ID\n            }\n            edges.add(edge);\n          });\n\n          console.log(\"Nodes loaded:\", nodes.get());\n          console.log(\"Edges loaded:\", edges.get());\n          displayStats(); // Update stats\n\n          // Refresh network with loaded data\n          network.setData({ nodes: nodes, edges: edges });\n\n        } else {\n          console.warn(\"Invalid graph data structure. No nodes or edges found.\");\n        }\n      } catch (err) {\n        console.error(\"Error parsing JSON file:\", err);\n      }\n    };\n    reader.readAsText(file);\n  } else {\n    console.error('Invalid file selected. Please select a .json file.');\n  }\n});\n\n// Display graph statistics\nfunction displayStats() {\n  console.log(\"Displaying statistics...\");\n  var nodeCount = nodes.length;\n  var edgeCount = edges.length;\n\n  // this is generating a console error because network.getConnectedEdges(node.id); is not found\n  var orphanedNodes = nodes.get().filter(function(node) {\n    var connectedEdges = network.getConnectedEdges(node.id);\n    return connectedEdges.length === 0;\n  }).length;\n\n  document.getElementById('stats').innerHTML =\n    'Nodes: ' + nodeCount + '&lt;br&gt;' +\n    'Edges: ' + edgeCount + '&lt;br&gt;' +\n    'Orphaned Nodes: ' + orphanedNodes;\n  console.log(\"Stats - Nodes:\", nodeCount, \"Edges:\", edgeCount, \"Orphaned Nodes:\", orphanedNodes);\n}\n\n// Reset form fields after node is added/edited\nfunction resetForm() {\n  console.log(\"Resetting form...\");\n  document.getElementById('node-form').reset();\n}\n\n// Save graph to file\nfunction saveGraph() {\n  console.log(\"Saving graph...\");\n  var graphData = { nodes: nodes.get(), edges: edges.get() };\n  var json = JSON.stringify(graphData, null, 2);\n  download('graph.json', json);\n}\n\n// Save graph to a new file\nfunction saveAsGraph() {\n  console.log(\"Save As...\");\n  var fileName = prompt('Enter file name:', 'graph.json');\n  if (fileName) {\n    var graphData = { nodes: nodes.get(), edges: edges.get() };\n    var json = JSON.stringify(graphData, null, 2);\n    download(fileName, json);\n  }\n}\n\n// Download helper\nfunction download(filename, text) {\n  console.log(\"Downloading file:\", filename);\n  var element = document.createElement('a');\n  element.setAttribute('href', 'data:application/json;charset=utf-8,' + encodeURIComponent(text));\n  element.setAttribute('download', filename);\n  element.style.display = 'none';\n  document.body.appendChild(element);\n  element.click();\n  document.body.removeChild(element);\n}\n</code></pre> <p>Sample JSON test file called test-01.json <pre><code>{\n    \"nodes\": [\n      { \"id\": 1, \"label\": \"Node 1\"},\n      { \"id\": 2, \"label\": \"Node 2\", \"group\": \"mygroup1\"  },\n      { \"id\": 3, \"label\": \"Node 3\", \"group\": \"mygroup2\", \n         \"title\": \"A long text description for node 3 that is only shown on hover.\" },\n      { \"id\": 4, \"label\": \"Node 4\", \"group\": \"mygroup2\", \"color\": \"red\"},\n      { \"id\": 5, \"label\": \"Node 5\", \"group\": \"mygroup3\", \"color\": \"blue\", \"shape\": \n        \"circle\"},\n      { \"id\": 6, \"label\": \"Node 6\", \"group\": \"mygroup3\", \"color\": \"green\", \"shape\": \n        \"box\",  \"x\": -400, \"y\": -200, \"fixed\": { \"x\": true, \"y\": false }}\n    ],\n    \"edges\": [\n      { \"from\": 1, \"to\": 2, \"label\": \"1 to 2\" },\n      { \"from\": 2, \"to\": 3, \"label\": \"2 to 3\" },\n      { \"from\": 2, \"to\": 3, \"label\": \"3 to 4\" },\n      { \"from\": 2, \"to\": 3, \"label\": \"4 to 5\" },\n      { \"from\": 2, \"to\": 3, \"label\": \"5 to 6\" },\n      { \"from\": 2, \"to\": 3, \"label\": \"2 to 4\" },\n      { \"from\": 2, \"to\": 3, \"label\": \"2 to 5\" },\n      { \"from\": 2, \"to\": 3, \"label\": \"3 to 5\" },\n      { \"from\": 2, \"to\": 3, \"label\": \"4 to 6\" },\n      { \"from\": 2, \"to\": 3, \"label\": \"5 to 2\" }\n    ]\n}\n</code></pre></p>"},{"location":"vis/","title":"Vis.js Tutorials For Learning Graphs","text":"<p>This section provides guidelines for using the vis.js JavaScript library for displaying and editing learning graphs.  We focus on the key features of vis.js to support the following key features of a learning graph:</p> <ol> <li>Automatic layout of concepts using a force-directed graph layout engine</li> <li>Support for displaying legends</li> <li>Support for using groups to display taxonomies</li> <li>Clustering to hide group complexity</li> </ol>"},{"location":"vis/#why-visjs-for-learning-graph-networks","title":"Why vis.js for Learning Graph Networks","text":"<p>Although there are many JavaScript libraries that display graph networks, vis.js has a good combination of default features, sample code and an active developer community that makes it a good fit for learning graph networks.</p>"},{"location":"vis/#overview-of-steps","title":"Overview of Steps","text":""},{"location":"vis/#learning-graph-file-setup-steps","title":"Learning Graph File Setup Steps","text":"<ol> <li>Use generative AI to generate a CSV file of a learning graph.<ol> <li>Create a clear course description with prerequisites and goals using [Bloom's Taxonomy]</li> <li>Enumerate Concepts</li> <li>Find Concept dependencies</li> <li>Generate a taxonomy of concepts and place in groups section of a graph.json file</li> <li>Add a classifier to each Concept</li> <li>Validate the learning graph network</li> </ol> </li> <li>Convert this learning graph to JSON format.</li> <li>Use an enricher to add group=\"1\" to all foundational concepts and group=\"12\" to goals</li> </ol>"},{"location":"vis/#learning-graph-visualization","title":"Learning Graph Visualization","text":"<ol> <li>Load graph data from a JSON file and the legend from groups.json</li> <li>Log any problems such as missing foundation, goals or orphan nodes and set NODE_COUNT</li> <li>Count the number of nodes and estimate the graph X-dimension CANVAS-WIDTH</li> <li>Run the enrich_nodes() function which will:<ol> <li>Add a x=-CANVAS_WIDTH/2 to foundation nodes and set the shape to \"box\"</li> <li>Add a x=CANVAS_WIDTH/2 to goal nodes and set the shape to be \"star\"</li> </ol> </li> </ol>"},{"location":"vis/#basic-properties-of-nodes-and-edges","title":"Basic Properties of Nodes and Edges","text":""},{"location":"vis/#lab-1-default-behavior","title":"Lab 1: Default Behavior","text":"<p>Lab 1: Default Behavior</p>"},{"location":"vis/#lab-2-json","title":"Lab 2 - JSON","text":"<p>Learn the JSON format</p> <p>Lab 2: Loading Data From JSON</p>"},{"location":"vis/#lab-3-node-properties","title":"Lab 3 - Node Properties","text":"<p>Learn the Properties of a Node</p> <p>Lab 3: Node Properties</p>"},{"location":"vis/#lab-4-edge-shapes","title":"Lab 4 - Edge Shapes","text":"<p>Lab 4 - Edge Properties</p>"},{"location":"vis/#lab-5-custom-shapes","title":"Lab 5 - Custom Shapes","text":"<p>Lab 5 - Custom Shapes</p>"},{"location":"vis/#examples","title":"Examples","text":"<p>Concept Dependency Graph</p>"},{"location":"vis/#graph-editor","title":"Graph Editor","text":"<p>Learn how to create an interactive graph editor</p> <p>Graph Editor</p>"},{"location":"vis/#csv-reader","title":"CSV-Reader","text":"<p>CSV Reader</p>"},{"location":"vis/#node-enricher","title":"Node Enricher","text":"<p>Node Enricher</p>"},{"location":"vis/#adding-legends","title":"Adding Legends","text":"<p>Adding Legends</p>"},{"location":"vis/concept-dependency-graph/","title":"Concept Dependency Graph","text":"<p>SampleConcept Dependency Graph for Ohm's Law</p> <p>A Concept Dependency Graph is a specific type of graph that has the following properties.</p> <ol> <li>Each Concept is represented by a vertex and all concepts have a short name called the \"label\".</li> <li>By default circles are used to represent concepts in a graph.</li> <li>To learn a new Concept, you must understand the prerequisite concepts called the dependant concepts.</li> <li>Concepts each have a DEPENDS_ON directed link that points to what other Concepts any concept depends on.  To keep the chart ink smaller, the abbreviation \"dep\" is often used.</li> <li>A course is a collection of Concepts that must be learned in an approximate order.</li> <li>Every course has a collection of background foundational concepts that should be mastered before the student takes the course.</li> <li>Concepts that are prerequisites for the course often appear on the left edge of the concept graph at a location of x=-300.</li> <li>Advanced concepts often appear on the right at x=300</li> <li>By convention, concrete physical concepts are lower in the graph and more abstract mathematical concepts are initially located toward the top of the graph.</li> <li>When we want to focus on a concept, that concept is displayed in a larger font.</li> </ol>"},{"location":"vis/concept-dependency-graph/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Generate a vis.js application that shows what concepts must\nbe mastered before you understand Ohm's Law.\n\nUse this graph data:\n\n// create an array with nodes\n    var nodes = new vis.DataSet([\n        {id: 1, label: \"Ohm's Law\", color: \"wheat\", size: 150, x: 150, y: 0, fixed: true,font: { size: 24 }, color: {border: \"black\"}},\n        {id: 2, label: 'Voltage', color: \"tan\"},\n        {id: 3, label: 'Current', color: \"tan\"},\n        {id: 4, label: 'Resistance', color: \"tan\"},\n        {id: 5, label: 'Linear Equations', color: \"coral\", shape: \"box\", x: -150, y: 0, fixed: true}\n    ]);\n\n    // create an array with edges\n    var edges = new vis.DataSet([\n        {from: 1, to: 2, arrows: 'to', label: 'DEPENDS_ON' },\n        {from: 1, to: 3, arrows: 'to', label: 'DEPENDS_ON' },\n        {from: 1, to: 4, arrows: 'to', label: 'DEPENDS_ON' },\n        {from: 1, to: 5, arrows: 'to', label: 'DEPENDS_ON' }\n    ]);\n</code></pre>"},{"location":"vis/lab-01/","title":"Vis Tutorial 1","text":"<p>Lab 1</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;script type=\"text/javascript\" src=\"https://unpkg.com/vis-network/standalone/umd/vis-network.min.js\"&gt;&lt;/script&gt;\n\n    &lt;style type=\"text/css\"&gt;\n        #mynetwork {\n            width: 300px;\n            height: 300px;\n            background-color: aliceblue;\n            border: 1px solid silver;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"mynetwork\"&gt;&lt;/div&gt;\n&lt;a href=\"lab-01\"&gt;Back to Lesson&lt;/a&gt;\n&lt;script type=\"text/javascript\"&gt;\n    // create an array with nodes\n    var nodes = new vis.DataSet([\n        {id: 1, label: 'Node 1'},\n        {id: 2, label: 'Node 2'},\n        {id: 3, label: 'Node 3'},\n        {id: 4, label: 'Node 4'},\n        {id: 5, label: 'Node 5'}\n    ]);\n\n    // create an array with edges\n    var edges = new vis.DataSet([\n        {from: 1, to: 3},\n        {from: 1, to: 2},\n        {from: 2, to: 4},\n        {from: 2, to: 5}\n    ]);\n\n    // create a network\n    var container = document.getElementById('mynetwork');\n\n    // provide the data in the vis format\n    var data = {\n        nodes: nodes,\n        edges: edges\n    };\n    var options = {};\n\n    // initialize your network!\n    var network = new vis.Network(container, data, options);\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"vis/lab-02/","title":"Lab 2: JSON","text":"<p>Run Lab 2</p>"},{"location":"vis/lab-02/#prompt","title":"Prompt","text":"<pre><code>Refactor the attached vis.js program to read the data\nfrom a file called \"lab-02.json\" and store\nthe JavaScript in a separate file called lab-02.js\n</code></pre>"},{"location":"vis/lab-02/#chatgpt-4o-response","title":"ChatGPT 4o Response","text":"<p>To refactor your <code>lab-01.html</code> file, we can follow these steps:</p> <ol> <li>Move the JavaScript code to a separate file called <code>lab-02.js</code>.</li> <li>Fetch the node and edge data from a separate <code>lab-02.json</code> file.</li> <li>Refactor the HTML to reference the new JavaScript file and load the JSON data dynamically.</li> </ol> <p>Here is how we can structure the files:</p>"},{"location":"vis/lab-02/#refactored-html-lab-01html","title":"Refactored HTML (<code>lab-01.html</code>):","text":"<pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;script type=\"text/javascript\" src=\"https://unpkg.com/vis-network/standalone/umd/vis-network.min.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"network.js\"&gt;&lt;/script&gt;\n\n    &lt;style type=\"text/css\"&gt;\n        #mynetwork {\n            width: 600px;\n            height: 400px;\n            border: 1px solid lightgray;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"mynetwork\"&gt;&lt;/div&gt;\n&lt;a href=\"lab-01\"&gt;Back to Lesson&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"vis/lab-02/#javascript-lab-02js","title":"JavaScript (<code>lab-02.js</code>):","text":"<pre><code>// Fetch data from the JSON file\nfetch('lab-02.json')\n    .then(response =&gt; response.json())\n    .then(data =&gt; {\n        // Parse the data from JSON\n        const nodes = new vis.DataSet(data.nodes);\n        const edges = new vis.DataSet(data.edges);\n\n        // Create a network\n        const container = document.getElementById('mynetwork');\n        const networkData = {\n            nodes: nodes,\n            edges: edges\n        };\n        const options = {};\n\n        // Initialize the network\n        const network = new vis.Network(container, networkData, options);\n    })\n    .catch(error =&gt; console.error('Error loading the network data:', error));\n</code></pre>"},{"location":"vis/lab-02/#json-file-lab-01json","title":"JSON File (<code>lab-01.json</code>):","text":"<pre><code>{\n    \"nodes\": [\n        {\"id\": 1, \"label\": \"Node 1\"},\n        {\"id\": 2, \"label\": \"Node 2\"},\n        {\"id\": 3, \"label\": \"Node 3\"},\n        {\"id\": 4, \"label\": \"Node 4\"},\n        {\"id\": 5, \"label\": \"Node 5\"}\n    ],\n    \"edges\": [\n        {\"from\": 1, \"to\": 3},\n        {\"from\": 1, \"to\": 2},\n        {\"from\": 2, \"to\": 4},\n        {\"from\": 2, \"to\": 5}\n    ]\n}\n</code></pre>"},{"location":"vis/lab-02/#explanation","title":"Explanation:","text":"<ul> <li>The HTML file now only includes the necessary script tags and references the new JavaScript file (<code>network.js</code>).</li> <li>The <code>network.js</code> script fetches the data from <code>lab-01.json</code> and initializes the network once the data is loaded.</li> <li>The <code>lab-01.json</code> file contains the nodes and edges in a format that can be easily fetched and parsed in JavaScript.</li> </ul> <p>With this refactor, your data can now be dynamically loaded from the JSON file, and your JavaScript code is cleanly separated from the HTML.</p>"},{"location":"vis/lab-03/","title":"Vis Tutorial Lesson 3: Node Properties","text":"<p>Run Lab 3 HTML</p> <p>In this lab we learn how to change the properties of each node including:</p> <ol> <li>The shape</li> <li>The background color</li> <li>The size</li> <li>The font color</li> </ol>"},{"location":"vis/lab-03/#prompt","title":"Prompt","text":"<pre><code>Refactor the attached vis.js to add color and shape to each vertex.\n\nNode 1: red triangle\nNode 2: orange square\nNode 3: gold circle\nNode 4: green big box\nNode 5: blue star\nNode 6: purple ellipse\n</code></pre>"},{"location":"vis/lab-03/#chatgpt-o4-response","title":"ChatGPT o4 Response","text":"<p>To refactor the <code>lab-02</code> files to add color and shape to each vertex, we will modify the <code>lab-02.json</code> to include the color and shape properties for each node. Here's how we can adjust the structure:</p>"},{"location":"vis/lab-03/#updated-lab-03json","title":"Updated <code>lab-03.json</code>:","text":"<pre><code>{\n    \"nodes\": [\n        {\"id\": 1, \"label\": \"Node 1\", \"color\": \"red\", \"shape\": \"triangle\"},\n        {\"id\": 2, \"label\": \"Node 2\", \"color\": \"orange\", \"shape\": \"square\"},\n        {\"id\": 3, \"label\": \"Node 3\", \"color\": \"gold\", \"shape\": \"circle\"},\n        {\"id\": 4, \"label\": \"Node 4\", \"color\": \"green\", \"shape\": \"box\", \"size\": 50},\n        {\"id\": 5, \"label\": \"Node 5\", \"color\": \"blue\", \"shape\": \"star\"},\n        {\"id\": 6, \"label\": \"Node 6\", \"color\": \"purple\", \"shape\": \"ellipse\"}\n    ],\n    \"edges\": [\n        {\"from\": 1, \"to\": 3},\n        {\"from\": 1, \"to\": 2},\n        {\"from\": 2, \"to\": 4},\n        {\"from\": 2, \"to\": 5},\n        {\"from\": 3, \"to\": 6}\n    ]\n}\n</code></pre>"},{"location":"vis/lab-03/#updated-lab-03js","title":"Updated <code>lab-03.js</code>:","text":"<p>You don't need to change much in the JavaScript file, but here it is for completeness.</p> <pre><code>// Fetch data from the JSON file\nfetch('lab-03.json')\n    .then(response =&gt; response.json())\n    .then(data =&gt; {\n        // Parse the data from JSON\n        const nodes = new vis.DataSet(data.nodes);\n        const edges = new vis.DataSet(data.edges);\n\n        // Create a network\n        const container = document.getElementById('mynetwork');\n        const networkData = {\n            nodes: nodes,\n            edges: edges\n        };\n        const options = {};\n\n        // Initialize the network\n        const network = new vis.Network(container, networkData, options);\n    })\n    .catch(error =&gt; console.error('Error loading the network data:', error));\n</code></pre>"},{"location":"vis/lab-03/#changes-explained","title":"Changes explained:","text":"<ul> <li>Each node now has a <code>color</code> and <code>shape</code> property. These properties allow you to customize the appearance of each node.</li> <li>For node 4, a larger size is specified with the <code>size</code> property to make it a \"big box.\"</li> <li>The edges are unchanged but include a new edge between nodes 3 and 6 to reflect the inclusion of Node 6.</li> </ul> <p>When you run this, each node will now have the specified color and shape, creating a visually distinct network.</p>"},{"location":"vis/lab-03/#using-white-text-on-dark-colors","title":"Using White Text On Dark Colors","text":""},{"location":"vis/lab-03/#prompt_1","title":"Prompt","text":"<pre><code>The black text is hard to read on the darker colors. How do I change the text to be white in the green and purple nodes?\n</code></pre>"},{"location":"vis/lab-03/#chatgpt-said","title":"ChatGPT said:","text":"<p>ChatGPT</p> <p>To change the text color for nodes with darker background colors like blue and purple, you can use the <code>font</code> property within each node's configuration to specify the text color. Here's how you can update your <code>lab-03.json</code> file to set the text color to white for the green and purple nodes:</p>"},{"location":"vis/lab-03/#updated-lab-02json","title":"Updated <code>lab-02.json</code>:","text":"<pre><code>{\n    \"nodes\": [\n        {\"id\": 1, \"label\": \"Node 1\", \"color\": \"red\", \"shape\": \"triangle\"},\n        {\"id\": 2, \"label\": \"Node 2\", \"color\": \"orange\", \"shape\": \"square\"},\n        {\"id\": 3, \"label\": \"Node 3\", \"color\": \"yellow\", \"shape\": \"circle\"},\n        {\"id\": 4, \"label\": \"Node 4\", \"color\": \"green\", \"shape\": \"box\", \"size\": 50, \"font\": {\"color\": \"white\"}},\n        {\"id\": 5, \"label\": \"Node 5\", \"color\": \"blue\", \"shape\": \"star\"},\n        {\"id\": 6, \"label\": \"Node 6\", \"color\": \"purple\", \"shape\": \"ellipse\", \"font\": {\"color\": \"white\"}}\n    ],\n    \"edges\": [\n        {\"from\": 1, \"to\": 3},\n        {\"from\": 1, \"to\": 2},\n        {\"from\": 2, \"to\": 4},\n        {\"from\": 2, \"to\": 5},\n        {\"from\": 3, \"to\": 6}\n    ]\n}\n</code></pre>"},{"location":"vis/lab-03/#explanation","title":"Explanation:","text":"<ul> <li>For <code>Node 5</code> (blue) and <code>Node 6</code> (purple), I added the <code>\"font\": {\"color\": \"white\"}</code> property, which changes the text color to white for better readability against the darker backgrounds.</li> </ul> <p>Now, when you display the graph, the text on the blue and purple nodes will appear in white, making it much easier to read.</p>"},{"location":"vis/lab-03/#more-things-to-try","title":"More Things to Try","text":"<p>You can also change the border width:</p> <ol> <li>borderWidth</li> <li>color.border</li> <li>opacity</li> <li>icon</li> <li>image</li> </ol> <p>The size is used to determine the size of node shapes that do not have the label inside of them. These shapes are: image, circularImage, diamond, dot, star, triangle, triangleDown, hexagon, square and icon</p>"},{"location":"vis/lab-03/#custom-canvas-shapes","title":"Custom Canvas Shapes","text":"<p>You can make the shape \"custom\" and then supply a Canvas drawing function:</p> <p>Canvas Drawing Function</p>"},{"location":"vis/lab-03/#references","title":"References","text":"<p>Vis.js Documentation on Node Properties</p>"},{"location":"vis/lab-04/","title":"Lab 4: Edge Properties","text":"<p>Lab 4 Edge HTML</p> <p>Here's a small example of a <code>vis.js</code> program that shows edge properties:</p> <ol> <li>Edge Labels</li> <li>Edge Color</li> <li>Edge Width</li> <li>Edge Dashes</li> <li>Color Opacity</li> <li>Hover Color</li> <li>Highlight Color</li> <li>Arrows</li> </ol>"},{"location":"vis/lab-04/#javascript-code","title":"JavaScript Code:","text":"<pre><code>// Fetch data from the JSON file\nfetch('lab-04.json')\n    .then(response =&gt; response.json())\n    .then(data =&gt; {\n        // Parse the data from JSON\n        const nodes = new vis.DataSet(data.nodes);\n\n        // Define edges with additional properties\n        const edges = new vis.DataSet([\n            { from: 1, to: 3, label: 'Edge 1-3', color: { color: 'red' }, \n               width: 2, arrows: 'to' },\n            { from: 1, to: 2, label: 'Edge 1-2', color: { color: 'blue', \n               highlight: 'purple' }, width: 3, \n               arrows: { to: { enabled: true, type: 'arrow' }, \n               from: { enabled: true, type: 'circle' } } },\n            { from: 2, to: 4, label: 'Edge 2-4', color: { color: 'green' }, \n            width: 3, dashes: true },\n            { from: 2, to: 5, label: 'Edge 2-5', color: { color: 'orange', \n            hover: 'yellow' }, width: 4, arrows: 'middle' },\n            { from: 3, to: 6, label: 'Edge 3-6', \n            color: { color: 'purple', opacity: 0.7 }, \n            width: 2, arrows: 'to' }\n        ]);\n\n        // Create a network\n        const container = document.getElementById('mynetwork');\n        const networkData = {\n            nodes: nodes,\n            edges: edges\n        };\n\n        const options = {\n            edges: {\n                font: {\n                    size: 14,\n                    color: 'black',\n                    align: 'horizontal'\n                },\n                smooth: {\n                    type: 'cubicBezier',\n                    forceDirection: 'horizontal',\n                    roundness: 0.4\n                }\n            }\n        };\n\n        // Initialize the network\n        const network = new vis.Network(container, networkData, options);\n    })\n    .catch(error =&gt; console.error('Error loading the network data:', error));\n</code></pre>"},{"location":"vis/lab-04/#instructions-for-use","title":"Instructions for Use:","text":"<ol> <li>HTML Setup: We use lab-04.html to load this new script.</li> <li>Edge Configuration: Each edge is customized to demonstrate properties like:<ul> <li>Label: Displays a label on each edge.</li> <li>Color: Sets custom colors and highlights.</li> <li>Width: Adjusts the thickness of edges.</li> <li>Arrows: Adds directional arrows with different placements.</li> </ul> </li> </ol> <p>This setup offers a variety of options for exploring edge properties in vis.js networks.</p>"},{"location":"vis/lab-05/","title":"Lab 5: Custom Shape","text":"<p>Lab 5 Custom Shapes HTML</p> <p>Here's a small example of a <code>vis.js</code> program that uses the <code>ctxRenderer</code> function to draw a custom hexagonal shape for a node:</p>"},{"location":"vis/lab-05/#html-code","title":"HTML Code:","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;vis.js Custom Shape Example&lt;/title&gt;\n    &lt;script type=\"text/javascript\" src=\"https://unpkg.com/vis-network/standalone/umd/vis-network.min.js\"&gt;&lt;/script&gt;\n    &lt;style type=\"text/css\"&gt;\n        #mynetwork {\n            width: 600px;\n            height: 400px;\n            border: 1px solid lightgray;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"mynetwork\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    function customShapeRenderer({ ctx, x, y, state: { selected, hover }, style }) {\n        const r = style.size;  // size of the shape (radius)\n        ctx.beginPath();\n        const sides = 6;  // number of sides for the hexagon\n        const a = (Math.PI * 2) / sides;  // angle between sides\n\n        // Start drawing the hexagon\n        ctx.moveTo(x + r * Math.sin(0), y + r * Math.cos(0));\n        for (let i = 1; i &lt;= sides; i++) {\n            ctx.lineTo(x + r * Math.sin(a * i), y + r * Math.cos(a * i));\n        }\n\n        ctx.closePath();\n        ctx.save();\n        ctx.fillStyle = selected ? 'blue' : 'red';  // change color if selected\n        ctx.fill();\n        ctx.strokeStyle = hover ? 'orange' : 'black';  // change stroke if hovered\n        ctx.stroke();\n        ctx.restore();\n\n        // Add label inside the shape\n        ctx.font = \"normal 12px sans-serif\";\n        ctx.fillStyle = 'black';\n        ctx.fillText('Custom Node', x - r / 2, y + 4);\n\n        // Return dimensions of the node\n        return {\n            nodeDimensions: { width: r * 2, height: r * 2 }\n        };\n    }\n\n    // Create nodes and edges\n    const nodes = new vis.DataSet([\n        {\n            id: 1,\n            label: 'Custom Node',\n            shape: 'custom',\n            ctxRenderer: customShapeRenderer,  // specify the custom renderer\n            size: 40  // set the size of the node\n        }\n    ]);\n\n    const edges = new vis.DataSet([]);\n\n    // Create the network\n    const container = document.getElementById('mynetwork');\n    const data = {\n        nodes: nodes,\n        edges: edges\n    };\n    const options = {};\n    const network = new vis.Network(container, data, options);\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"vis/lab-05/#explanation","title":"Explanation:","text":"<ul> <li>Custom Renderer (<code>customShapeRenderer</code>): This function creates a hexagonal node. It takes the context (<code>ctx</code>) and node state as input, calculates the position of each side of the hexagon, and draws the shape using the <code>canvas</code> API.<ul> <li>The node is filled with red unless it is selected, in which case it becomes blue.</li> <li>The stroke color is black but changes to orange when the node is hovered over.</li> <li>The label \"Custom Node\" is drawn inside the hexagon.</li> </ul> </li> <li>Node Configuration: The node uses the <code>shape: 'custom'</code> property to specify that it should use a custom renderer. The <code>ctxRenderer</code> property is set to the <code>customShapeRenderer</code> function.</li> <li>Node Dimensions: The size of the hexagonal node is defined by the <code>r</code> variable, which is passed in via <code>style.size</code>.</li> </ul> <p>When you load this HTML file in a browser, it will draw a single hexagonal node with the ability to change color when selected or hovered. You can easily modify the shape or style further by changing the drawing logic inside the <code>customShapeRenderer</code> function.</p> <p>4o</p> <p>requestAnimationFrame((function(){window.__oai_logTTI?window.__oai_logTTI():window.__oai_SSR_TTI=window.__oai_SSR_TTI??Date.now()}))</p> <p>ChatGPT can make mistakes. Check important info.</p>"},{"location":"vis/clusters/","title":"Clustering in Graph Visualization","text":"<p>Network diagrams can quickly get vary complicated.  As the number of vertices gets larger, the network becomes more difficult to view and see key relationships.  We need ways to quickly collapse a group of nodes into a single symbol to reduce complexity.  The primary tool we used to do this is called a graph node cluster.</p>"},{"location":"vis/clusters/#what-is-a-cluster","title":"What is a Cluster?","text":"<p>In graph theory, a cluster in is a composite node that encapsulates a group of related nodes and their connections, formed based on specific criteria, to simplify and enhance the visualization of network diagrams. It serves as an interactive element that can be expanded or collapsed, allowing users to explore the network at different levels of detail while reducing visual complexity.</p>"},{"location":"vis/clusters/#why-use-clusters","title":"Why Use Clusters?","text":"<ul> <li> <p>Representation of Grouped Nodes: A cluster acts as a higher-level abstraction, encapsulating several nodes (and their edges) into one composite node. This helps in visualizing the network at different levels of detail.</p> </li> <li> <p>Formation Criteria: Clusters are formed based on specific conditions or attributes of the nodes, such as shared properties (e.g., a common <code>domain</code> attribute), connectivity patterns, or spatial proximity.</p> </li> <li> <p>Interactivity: Clusters are interactive elements in the network graph. Users can expand (open) a cluster to reveal the individual nodes it contains or collapse them back into a single cluster node. This dynamic interaction allows for exploration of the network at varying granularities.</p> </li> <li> <p>Visual Simplification: By clustering nodes, the network diagram becomes less cluttered, making it easier to understand the overall structure and relationships without being overwhelmed by too many individual elements.</p> </li> <li> <p>Simplifies Complex Networks: Clustering reduces the number of visible nodes and edges, making large and complex networks more manageable and understandable.</p> </li> <li> <p>Improves Performance: By displaying fewer elements, rendering performance is enhanced, leading to smoother interactions, especially with large datasets.</p> </li> <li> <p>Enhances User Experience: Interactive clustering allows users to focus on areas of interest within the network, drilling down into clusters for detailed information or zooming out for an overview.</p> </li> <li> <p>Facilitates Data Analysis: Grouping related nodes helps in identifying patterns, relationships, and hierarchical structures within the network data.</p> </li> </ul>"},{"location":"vis/clusters/#example-domain-clusters","title":"Example: Domain Clusters","text":"<p>In the following example, we will show how different sections of a large graph data model can be grouped into clusters.  We call each grouping of related vertex types a domain.</p> <p>When we build large complex data models, we would ideally like is to be able to group the nodes into domains of similar items.  For example, Location, Address, City, State and Country might all be in the geospatial domain.  Content that is converted into Documents, DocumentSections, DocumentChunks, Entities and Concepts are part of the lexical domain.</p> <ul> <li> <p>Clustering by Attribute (<code>domain</code>): Nodes that share the same <code>domain</code> attribute are merged into a cluster. For instance, all nodes with <code>domain: 'A'</code> are grouped into a cluster labeled 'Cluster A'.</p> </li> <li> <p>Cluster Node Properties: The appearance of the cluster node can be customized (e.g., shape, size, color, label placement) to distinguish it from regular nodes and to convey meaningful information about the grouped nodes.</p> </li> <li> <p>Re-collapsing Clusters: The code allows for clusters to be re-collapsed by double-clicking on any node that was part of an expanded cluster, enhancing the interactive exploration of the network.</p> </li> </ul>"},{"location":"vis/clusters/#lab-1-working-interactive-clustering-examples-with-visjs","title":"Lab 1: Working Interactive Clustering Examples with vis.js","text":"<p>This next section assumes you know about the way that graphs are represented in JSON in the vis.js library.  See out Intro to Vis.js</p> <p>Here is an example of a flattened view of a small graph:</p> <p></p> <p>Note that there are vertices grouped by three letters: \"A\", \"B\" and \"C\". In this lesson we will show you how to group communities of nodes together under a single icon called a cluster. This allows you to quickly focus in on the key nodes in a graph you are concerned with without having the rest of the graph get in the way.</p> <p>In our example, each domain will have a label property so that the software can quickly identify what nodes to cluster together or un-cluster to show internal detail.</p> <p>Here is a high-level clustered view of the above graph network using circles as the grouping icon:</p> <p></p> <p>Here is a demonstration of opening a clustered node:</p> <p>Simple Interactive Clustering Example 1 (expand only)</p> <p>Note that you can drag the cluster around and double click on a cluster to expand the nodes within that cluster.  This first example does not have any way to re-collapse a cluster other than refreshing the entire page.</p> <p>Tip</p> <p>When generating graph vertex-type network diagrams with vis.js, prefer the '''circle''' shape over the '''dot''' shape so the text appears inside the vertex, not under the vertex.</p>"},{"location":"vis/clusters/#lab2-adding-a-domain-property-to-each-vertex","title":"Lab2: Adding a Domain Property to Each Vertex","text":"<p>In the following examples, we will assign each node to a specific domain using the <code>domain</code> property. The values in the example are \"A\", \"B\", and \"C\" however you can use any string for the domain value.</p> <pre><code>var nodes = new vis.DataSet([\n    { id: 1, label: 'Node 1A', domain: 'A' },\n    { id: 2, label: 'Node 2A', domain: 'A' },\n    { id: 3, label: 'Node 3A', domain: 'A' },\n\n    { id: 4, label: 'Node 4B', domain: 'B' },\n    { id: 5, label: 'Node 5B', domain: 'B' },\n    { id: 6, label: 'Node 6B', domain: 'B' },\n\n    { id: 7, label: 'Node 7C', domain: 'C' },\n    { id: 8, label: 'Node 8C', domain: 'C' },\n    { id: 9, label: 'Node 9C', domain: 'C' }\n  ]);\n</code></pre>"},{"location":"vis/clusters/#cluster-drawing-properties","title":"Cluster Drawing Properties","text":"<p>Our first step is to learn how to render a cluster.  We do this by adding a <code>clusterNodeProperies</code> JSON data structure to our program.  Here is an example that uses the <code>square</code> shape for the clusters.</p> <p></p> <pre><code>clusterNodeProperties: {\n    id: 'cluster:' + domain,\n    label: 'Cluster ' + domain,\n    shape: 'square', // Change shape to square\n    size: 40,        // Increase size\n    color: {\n        border: 'orange',      // Set border color (e.g., orange)\n        background: '#FFE5B4'   // Set background color (e.g., light orange)\n    },\n    font: { color: 'black' } // Set font color to black for readability\n}\n</code></pre> <p>Note that we are contacting the string \"cluster\" to the domain to create the cluster <code>id</code> and we are using <code>\"Cluster\" + domain</code> for the label.</p> <p>Clustering Example 2</p>"},{"location":"vis/clusters/#lab-3-individual-cluster-colors","title":"Lab 3: Individual Cluster Colors","text":"<p>One of the key things we can do to each domain is to color the domain icons with different colors.  Each domain can have a different color for the boarder and the background of the icon.</p> <p>To do this we will need to create a list of the domains and then use this list to assign the color:</p> <pre><code>var domainColors = {\n      'A': { border: '#FF0000', background: '#FFCCCC' }, // Red\n      'B': { border: '#00FF00', background: '#CCFFCC' }, // Green\n      'C': { border: '#0000FF', background: '#CCCCFF' }  // Blue\n    };\n</code></pre> <pre><code>clusterNodeProperties: {\n   color: domainColors[domain]\n}\n</code></pre> <p></p> <pre><code>function clusterByDomain() {\n  // Get unique domains from nodes\n  var allNodes = nodes.get();\n  var domains = [...new Set(allNodes.map(node =&gt; node.domain))];\n\n  domains.forEach(function(domain) {\n    // Define colors based on domain\n    var domainColors = {\n      'A': { border: '#FF0000', background: '#FFCCCC' }, // Red\n      'B': { border: '#00FF00', background: '#CCFFCC' }, // Green\n      'C': { border: '#0000FF', background: '#CCCCFF' }  // Blue\n    };\n\n    var clusterOptionsByData = {\n      joinCondition: function(childNode) {\n        return childNode.domain === domain;\n      },\n      clusterNodeProperties: {\n        id: 'cluster:' + domain,\n        label: 'Cluster ' + domain,\n        shape: 'square',\n        size: 40,\n        color: domainColors[domain],\n        font: { color: '#000000' }\n      }\n    };\n    network.cluster(clusterOptionsByData);\n  });\n}\n</code></pre> <p>Example 3: Colored Cluster Icons</p>"},{"location":"vis/clusters/#lab-4-repositioning-text","title":"Lab 4: Repositioning Text","text":"<p>Next, we want the text to be positioned in the center of the cluster icon. It would be nice to have a \"centerLabel\" property, but vis.js does not support this.  Instead we must move the vertical positioning up by setting negative distance based on the square size.  For a square of size 40, we need to move up -55.  For a square if size 50 we need to move up -65.</p> <p><pre><code>clusterNodeProperties: {\n  font: {\n    vadjust: -55,      // Adjust label position upwards\n  }\n}\n</code></pre> </p> <p>Example 4: Repositioning the Label Within the Square Cluster</p>"},{"location":"vis/clusters/#lab-5-recollapse","title":"Lab 5: Recollapse","text":"<p>Although we can now double click on each cluster to expand it, we might change our mind and want the cluster to be collapsed again into a single structure.  This allows uses to successively browse through each domain in succession, opening and closing each domain.</p> <p>To do this, we will need to add an event handler that will close the domain if any of the nodes within that domain get a double click.  Here is sample code to collapse a domain.</p>"},{"location":"vis/clusters/#event-handler-for-double-click-events","title":"Event Handler for Double-Click Events","text":"<pre><code>// Event handler for all double-click events on nodes\nnetwork.on(\"doubleClick\", function (params) {\n    if (params.nodes.length === 1) {\n      // get the node we clicked on\n      var nodeId = params.nodes[0];\n      if (network.isCluster(nodeId) === true) {\n        // Open the cluster\n        network.openCluster(nodeId);\n      } else {\n        // Check if the node belongs to any cluster\n        for (var clusterId in clusters) {\n          if (clusters[clusterId].includes(nodeId)) {\n            // Re-cluster the nodes\n            recluster(clusterId);\n            break;\n          }\n        }\n      }\n    }\n});\n</code></pre> <p>The event handler checks if you clicked on a note that is in a cluster. If the node is in a cluster and if is, it calls the <code>recluster()</code> function using the <code>clusterID</code> as a parameter.  Here is that recluster function.</p>"},{"location":"vis/clusters/#the-recluster-function","title":"The Recluster Function","text":"<p>This function gets called when you double-click on any node that is in a cluster.  It extracts the domain name from the input clusterID and then uses that domain to recluster the diagram using cluster properties.</p> <pre><code>// Function to re-cluster nodes into the cluster with the given clusterId\nfunction recluster(clusterId) {\n    var domain = clusterId.split(':')[1];  // Extract domain from clusterId\n\n    var clusterOptionsByData = {\n      joinCondition: function(childNode) {\n        return childNode.domain === domain &amp;&amp; childNode.id !== clusterId;\n      },\n      processProperties: function(clusterOptions, childNodes, childEdges) {\n        // Update the mapping of cluster to its nodes\n        clusters[clusterId] = childNodes.map(function(node) { return node.id; });\n\n        // Set cluster properties\n        clusterOptions.id = clusterId;\n        clusterOptions.label = '&lt;b&gt;Cluster ' + domain + '&lt;/b&gt;';\n        clusterOptions.shape = 'square';\n        clusterOptions.size = 50;\n        clusterOptions.color = {\n          border: 'orange',      // Orange border\n          background: '#FFE5B4'   // Light orange background\n        };\n        clusterOptions.font = {\n          color: '#000000',\n          size: 16,\n          vadjust: -35,\n          align: 'horizontal',\n          multi: true\n        };\n        return clusterOptions;\n      },\n      clusterNodeProperties: {\n        allowSingleNodeCluster: false\n      }\n    };\n    network.cluster(clusterOptionsByData);\n}\n</code></pre> <p>Example 5: Recollapseing the Cluster</p>"},{"location":"vis/clusters/#lab-6-integrating-recollapse","title":"Lab 6: Integrating Recollapse","text":"<p>Example 6 (work in progress)</p>"},{"location":"vis/csv-reader/","title":"CSV to JSON Converter","text":"<p>This prompt generates a Python program that reads in a CSV file for a graph and returns a JSON file in vis.js format.</p>"},{"location":"vis/csv-reader/#prompt","title":"Prompt","text":"<pre><code>I have a CSV file that has graph data in it.\n\nThe fields are:\nConceptID - the node id in a graph. Unique for all nodes. Required.\nThe ConceptName - a node label - Required\nDependencyList - a pipe-delimited list of dependant ConceptIDs.  An edge goes from this concept to other concepts with a directed arrow.\nCategoryID - a group ID for the concept.\nCategoryLabel - the name of the category\n\nThere are about 11 Categories\n\nConceptID,ConceptName,DependencyList,CategoryID,CategoryLabel\n1,Ohm's Law,2|3|4,1,Fundamental Concepts\n2,Voltage,7,1,Fundamental Concepts\n3,Current,7,1,Fundamental Concepts\n4,Resistance,101,1,Fundamental Concepts\n5,Power,2|3,1,Fundamental Concepts\n6,Energy,5|102,1,Fundamental Concepts\n7,Electric charge,120,1,Fundamental Concepts\n8,Conductors,7,1,Fundamental Concepts\n9,Insulators,7,1,Fundamental Concepts\n10,Capacitance,2|7,1,Fundamental Concepts\n11,Inductance,3|104,1,Fundamental Concepts\n\nPlease create a Python program that converts this CSV file into a JSON file that can be easily read by vis.js.  Assume that the category ID will become a group ID.\n</code></pre>"},{"location":"vis/csv-reader/#chatgpt-response","title":"ChatGPT Response","text":"<pre><code>import csv\nimport json\n\ndef csv_to_visjs_json(csv_filename, json_filename):\n    nodes = []\n    edges = []\n    categories = {}\n\n    # Read the CSV file\n    with open(csv_filename, 'r', newline='', encoding='utf-8') as csvfile:\n        reader = csv.DictReader(csvfile)\n        for row in reader:\n            # Extract node information\n            try:\n                concept_id = int(row['ConceptID'])\n            except ValueError:\n                print(f\"Invalid ConceptID '{row['ConceptID']}' skipped.\")\n                continue  # Skip rows with invalid ConceptID\n\n            concept_name = row['ConceptName'].strip()\n            if not concept_name:\n                print(f\"Empty ConceptName for ConceptID {concept_id} skipped.\")\n                continue  # Skip nodes without a name\n\n            try:\n                category_id = int(row['CategoryID'])\n            except ValueError:\n                print(f\"Invalid CategoryID '{row['CategoryID']}' for ConceptID {concept_id} skipped.\")\n                continue  # Skip rows with invalid CategoryID\n\n            category_label = row['CategoryLabel'].strip()\n\n            # Create node object\n            node = {\n                'id': concept_id,\n                'label': concept_name,\n                'group': category_id\n            }\n            nodes.append(node)\n\n            # Store category information (optional, for groups)\n            if category_id not in categories:\n                categories[category_id] = category_label\n\n            # Process DependencyList to create edges\n            dependency_list = row['DependencyList'].strip()\n            if dependency_list:\n                dependencies = dependency_list.split('|')\n                for dep in dependencies:\n                    dep = dep.strip()\n                    if dep:\n                        try:\n                            dep_id = int(dep)\n                            edge = {\n                                'from': concept_id,\n                                'to': dep_id\n                            }\n                            edges.append(edge)\n                        except ValueError:\n                            print(f\"Invalid DependencyID '{dep}' for ConceptID {concept_id} skipped.\")\n                            continue  # Skip invalid DependencyIDs\n\n    # Optionally, create a separate groups structure if needed\n    # Uncomment the following lines if you want to include group labels\n    \"\"\"\n    groups = []\n    for cid, clabel in categories.items():\n        group = {\n            'id': cid,\n            'label': clabel\n            # You can add more styling options here if needed\n        }\n        groups.append(group)\n    data = {\n        'nodes': nodes,\n        'edges': edges,\n        'groups': groups\n    }\n    \"\"\"\n\n    # If not using separate groups, omit the 'groups' key\n    data = {\n        'nodes': nodes,\n        'edges': edges\n    }\n\n    # Write the JSON output\n    with open(json_filename, 'w', encoding='utf-8') as jsonfile:\n        json.dump(data, jsonfile, indent=4)\n\n    print(f\"Successfully converted '{csv_filename}' to '{json_filename}'.\")\n\nif __name__ == \"__main__\":\n    # Define input and output file names\n    input_csv = 'graph-data.csv'\n    output_json = 'graph-data.json'\n\n    # Convert CSV to JSON\n    csv_to_visjs_json(input_csv, output_json)\n</code></pre> <p>Python Code</p>"},{"location":"vis/double-click/","title":"Double Click for Properties","text":"<p>Run Double Click MicroSim</p> <p>We can enhance the hover <code>vis.js</code> demo to include functionality that lists all properties of a node when it's double-clicked. This addition will provide a more interactive experience, allowing users to inspect node details easily.</p> <p>Here is how the node insector will look after you double-click on a node:</p> <p></p>"},{"location":"vis/double-click/#features-added","title":"Features Added:","text":"<ul> <li>Double-Click Event on Nodes: When a user double-clicks on a node, a detailed list of all its properties will be displayed.</li> <li>Display Area for Node Properties: A dedicated section below the network graph will show the properties of the selected node.</li> </ul>"},{"location":"vis/double-click/#updated-html-code","title":"Updated HTML Code:","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;vis.js Hover and Double-Click Demo&lt;/title&gt;\n    &lt;!-- Include the vis-network library from a CDN --&gt;\n    &lt;script type=\"text/javascript\" src=\"https://unpkg.com/vis-network/standalone/umd/vis-network.min.js\"&gt;&lt;/script&gt;\n    &lt;style type=\"text/css\"&gt;\n        body {\n            font-family: Arial, Helvetica, sans-serif;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            padding: 20px;\n        }\n        #mynetwork {\n            width: 700px;\n            height: 500px;\n            background-color: aliceblue;\n            border: 1px solid silver;\n        }\n        #node-details {\n            width: 700px;\n            margin-top: 20px;\n            padding: 10px;\n            background-color: #f9f9f9;\n            border: 1px solid #ddd;\n            max-height: 200px;\n            overflow-y: auto;\n            font-size: 14px;\n        }\n        #node-details h3 {\n            margin-top: 0;\n        }\n        a {\n            margin-top: 20px;\n            text-decoration: none;\n            color: #007BFF;\n        }\n        a:hover {\n            text-decoration: underline;\n        }\n        table {\n            width: 100%;\n            border-collapse: collapse;\n        }\n        table td, table th {\n            padding: 8px 12px;\n            border: 1px solid #ddd;\n        }\n        table th {\n            background-color: #f2f2f2;\n            text-align: left;\n            width: 30%;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h2&gt;vis.js Hover and Double-Click Function Demo&lt;/h2&gt;\n    &lt;div id=\"mynetwork\"&gt;&lt;/div&gt;\n    &lt;div id=\"node-details\"&gt;\n        &lt;h3&gt;Node Details&lt;/h3&gt;\n        &lt;p&gt;Double-click on a node to see its properties here.&lt;/p&gt;\n    &lt;/div&gt;\n    &lt;a href=\".\"&gt;Back to Lesson Plan&lt;/a&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        // Create an array of nodes with 'title' for tooltips\n        var nodes = new vis.DataSet([\n            // Goal node on the right, fixed horizontally\n            { \n                id: 1, \n                label: \"Arithmetic\", \n                color: \"gold\", \n                shape: \"star\", \n                size: 30, \n                x: 200, \n                y: 0, \n                fixed: { x: true, y: false }, \n                font: { size: 24 },\n                title: \"This is the Arithmetic node representing the main topic.\",\n                description: \"Arithmetic is the branch of mathematics dealing with numbers and the basic operations on them.\"\n            },\n            // Operation nodes\n            { \n                id: 2, \n                label: \"Addition\", \n                color: \"tan\", \n                y: -200,\n                title: \"Addition is the process of finding the total or sum by combining two or more numbers.\",\n                description: \"Addition combines two or more numbers into a single sum.\"\n            },\n            { \n                id: 3, \n                label: \"Subtraction\", \n                color: \"tan\", \n                y: -100,\n                title: \"Subtraction is the process of finding the difference between two numbers.\",\n                description: \"Subtraction calculates the difference by removing one number from another.\"\n            },\n            { \n                id: 4, \n                label: \"Multiplication\", \n                color: \"tan\", \n                y: 100,\n                title: \"Multiplication is the process of combining equal groups to find the total.\",\n                description: \"Multiplication involves adding a number to itself a certain number of times.\"\n            },\n            { \n                id: 5, \n                label: \"Division\", \n                color: \"tan\", \n                y: 200,\n                title: \"Division is the process of splitting a number into equal parts.\",\n                description: \"Division determines how many times one number is contained within another.\"\n            },\n            // Foundation node on the left, fixed horizontally\n            { \n                id: 6, \n                label: \"Numbers\", \n                color: \"coral\", \n                shape: \"box\", \n                x: -200, \n                y: 0, \n                fixed: { x: true, y: false },\n                title: \"Numbers are the basic elements used in arithmetic operations.\",\n                description: \"Numbers are symbols used to represent quantities and perform calculations.\"\n            }\n        ]);\n\n        // Create an array of edges with 'title' for tooltips\n        var edges = new vis.DataSet([\n            { \n                from: 1, \n                to: 2,\n                title: \"Connects Arithmetic to Addition\"\n            },\n            { \n                from: 1, \n                to: 3,\n                title: \"Connects Arithmetic to Subtraction\"\n            },\n            { \n                from: 1, \n                to: 4,\n                title: \"Connects Arithmetic to Multiplication\"\n            },\n            { \n                from: 1, \n                to: 5,\n                title: \"Connects Arithmetic to Division\"\n            },\n            { \n                from: 2, \n                to: 6,\n                title: \"Addition relies on Numbers\"\n            },\n            { \n                from: 3, \n                to: 6,\n                title: \"Subtraction relies on Numbers\"\n            },\n            { \n                from: 4, \n                to: 6,\n                title: \"Multiplication relies on Numbers\"\n            },\n            { \n                from: 5, \n                to: 6,\n                title: \"Division relies on Numbers\"\n            }\n        ]);\n\n        // Create a network\n        var container = document.getElementById('mynetwork');\n\n        // Provide the data in the vis format\n        var data = {\n            nodes: nodes,\n            edges: edges\n        };\n\n        var options = {\n            edges: {\n                arrows: {\n                    to: { enabled: true }\n                },\n                color: {\n                    color: 'black',\n                    inherit: false\n                },\n                width: 2,\n                smooth: {\n                    type: 'cubicBezier',\n                    roundness: 0.4\n                }\n            },\n            nodes: {\n                font: {\n                    size: 14,\n                    color: '#343434'\n                },\n                borderWidth: 2,\n                shadow: true\n            },\n            physics: {\n                solver: 'forceAtlas2Based',\n                forceAtlas2Based: {\n                    springLength: 100\n                },\n                stabilization: {\n                    iterations: 1000\n                }\n            },\n            interaction: {\n                hover: true, // Enable hover interactions\n                tooltipDelay: 200 // Delay before showing tooltip\n            },\n            layout: {\n                improvedLayout: true\n            }\n        };\n\n        // Initialize your network!\n        var network = new vis.Network(container, data, options);\n\n        // Function to display node properties\n        function displayNodeProperties(nodeId) {\n            var node = nodes.get(nodeId);\n            if (!node) return;\n\n            var detailsDiv = document.getElementById('node-details');\n            var html = '&lt;h3&gt;Node Details&lt;/h3&gt;';\n            html += '&lt;table&gt;';\n            for (var prop in node) {\n                if (node.hasOwnProperty(prop)) {\n                    html += '&lt;tr&gt;&lt;th&gt;' + prop + '&lt;/th&gt;&lt;td&gt;' + formatProperty(node[prop]) + '&lt;/td&gt;&lt;/tr&gt;';\n                }\n            }\n            html += '&lt;/table&gt;';\n            detailsDiv.innerHTML = html;\n        }\n\n        // Helper function to format property values\n        function formatProperty(value) {\n            if (typeof value === 'object' &amp;&amp; value !== null) {\n                return JSON.stringify(value, null, 2).replace(/\\\\n/g, '&lt;br&gt;').replace(/ /g, '&amp;nbsp;');\n            }\n            return value;\n        }\n\n        // Add event listener for double-click\n        network.on(\"doubleClick\", function (params) {\n            if (params.nodes.length &gt; 0) {\n                var nodeId = params.nodes[0];\n                displayNodeProperties(nodeId);\n            } else {\n                // If double-clicked on empty space, clear the details\n                var detailsDiv = document.getElementById('node-details');\n                detailsDiv.innerHTML = '&lt;h3&gt;Node Details&lt;/h3&gt;&lt;p&gt;Double-click on a node to see its properties here.&lt;/p&gt;';\n            }\n        });\n\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"vis/double-click/#explanation-of-the-additions","title":"Explanation of the Additions:","text":"<ol> <li> <p>HTML Structure Enhancements:</p> <ul> <li>Node Details Div: A new <code>&lt;div&gt;</code> with the ID <code>node-details</code> is added below the network graph. This section will display the properties of a node when it's double-clicked.</li> <li>Styling for Node Details: CSS styles are added to ensure the details section is well-formatted, scrollable if content overflows, and visually distinct.</li> </ul> </li> <li> <p>Extended Node Definitions:</p> <ul> <li>Description Property: Each node now includes a <code>description</code> property to provide more detailed information. This is optional and can be tailored as needed.</li> </ul> </li> <li> <p>JavaScript Enhancements:</p> <ul> <li>displayNodeProperties Function: This function retrieves the node data based on its ID and constructs an HTML table listing all its properties. It formats object properties (like <code>fixed</code> and <code>font</code>) using <code>JSON.stringify</code> for better readability.</li> <li>formatProperty Helper Function: This helper ensures that object properties are displayed in a readable format by converting them to JSON strings and replacing spaces and line breaks with HTML-friendly equivalents.</li> <li>Double-Click Event Listener: An event listener is added to the network to listen for <code>doubleClick</code> events. When a node is double-clicked:<ul> <li>If a node is clicked, its ID is retrieved, and <code>displayNodeProperties</code> is called to show its properties.</li> <li>If the empty space is double-clicked, the details section is reset to its default state.</li> </ul> </li> </ul> </li> <li> <p>User Experience Enhancements:</p> <ul> <li>Responsive Details Section: The node details section updates dynamically based on user interactions, providing immediate feedback.</li> <li>Clear Instructions: The details section initially contains a prompt guiding users to double-click on a node to view its properties.</li> </ul> </li> </ol>"},{"location":"vis/double-click/#how-it-works","title":"How It Works:","text":"<ol> <li> <p>Hover Functionality:</p> <ul> <li>As in the previous version, hovering over nodes or edges displays tooltips with the associated <code>title</code> text.</li> </ul> </li> <li> <p>Double-Click to View Properties:</p> <ul> <li>User Action: The user double-clicks on a node within the network graph.</li> <li>Event Triggered: The <code>doubleClick</code> event is captured by the event listener.</li> <li>Property Display:<ul> <li>The node's ID is extracted from the event parameters.</li> <li>The <code>displayNodeProperties</code> function retrieves all properties of the node using <code>nodes.get(nodeId)</code>.</li> <li>An HTML table is constructed listing each property and its value.</li> <li>The <code>node-details</code> div is updated with this table, allowing the user to view all properties.</li> </ul> </li> </ul> </li> <li> <p>Clearing Details:</p> <ul> <li>If the user double-clicks on an empty area of the network graph (i.e., not on any node), the <code>node-details</code> section resets to its default message.</li> </ul> </li> </ol>"},{"location":"vis/double-click/#live-demo","title":"Live Demo:","text":"<p>You can test the updated functionality by running the above HTML code in your local environment or using online editors like CodePen or JSFiddle.</p>"},{"location":"vis/double-click/#additional-customizations","title":"Additional Customizations:","text":"<ul> <li> <p>Formatting Enhancements:</p> <ul> <li>You can further enhance the <code>formatProperty</code> function to handle specific data types more gracefully or to format certain properties differently.</li> </ul> </li> <li> <p>Selective Property Display:</p> <ul> <li>If you prefer to display only specific properties, modify the <code>displayNodeProperties</code> function to filter out unwanted properties.</li> </ul> </li> <li> <p>Styling Improvements:</p> <ul> <li>Customize the CSS to better match your application's theme or to improve readability.</li> </ul> </li> <li> <p>Exporting Properties:</p> <ul> <li>Add functionality to export the node properties (e.g., as a JSON file) if needed.</li> </ul> </li> </ul> <p>Feel free to adjust and expand upon this foundation to create a more robust and feature-rich network visualization tool tailored to your specific requirements!</p>"},{"location":"vis/fix-x-positions/","title":"Fix the X Positions","text":""},{"location":"vis/fix-x-positions/#left-to-right-concept-graphs","title":"Left to Right Concept Graphs","text":"<p>In this lesson, we learn how to control the X placement of both the foundational concepts to the left of a concept dependency graph and goals to the right of the network.  This allows us to consistently view a learning graph from prerequisite concepts on the left and goals on the right.</p>"},{"location":"vis/fix-x-positions/#order-of-labs","title":"Order of Labs","text":"<p>Our first examples will manually have us label each of the nodes that disable the physics for x-placement of the nodes in the correct locations.  Later, we show that you can add a JavaScript function that will automatically apply placement rules to nodes in groups. This make preparing data much simpler.</p>"},{"location":"vis/fix-x-positions/#background-on-the-physics-of-springs","title":"Background on the Physics of Springs","text":"<p>To place nodes on a 2-dimensional surface so they are automatically spread apart, we simulated the forces on springs.  The springs will pull connected nodes closer together on the drawing canvas, but not so close that they get stacked on top of each other or overlap too much.</p> <p>Here is how the JSON data will look to disable the X movement:</p> <pre><code>{\n    \"nodes\": [\n      { \"id\": 1, \"label\": \"Foundation 1\", \"shape\": \"box\", \"group\": 1, \n        \"x\": -400, \"y\": -200, \n        \"fixed\": { \"x\": true, \"y\": false }, \"physics\": false },\n      { \"id\": 2, \"label\": \"Foundation 2\", \"shape\": \"box\", \"group\": 1, \n        \"x\": -400, \"y\": -150, \n        \"fixed\": { \"x\": true, \"y\": false }, \"physics\": false },\n      { \"id\": 3, \"label\": \"Foundation 3\", \"shape\": \"box\", \"group\": 1, \n        \"x\": -400, \"y\": -100, \n        \"fixed\": { \"x\": true, \"y\": false }, \"physics\": false },\n]}\n</code></pre> <p>The foundation concepts above must be placed on the left edge, around x=-400. But we want to also prevent their X locations from getting moved. So we use the <code>fixed</code> option and indicate that only the x element is fixed.</p>"},{"location":"vis/fix-x-positions/#use-of-visjs-group-property","title":"Use of Vis.js Group Property","text":"<p>Vis.js allows each node in a graph to belong to a single group.  By convention, we use group 1 as the group for all Foundation Concepts. We also use group 12 for goal concepts, since that is a good number to set as the maximum dependency level to reach a goal within a course.</p> <p>By convention, any concepts that only depend on a Foundation Concept are considered to be in level 2 concepts.  If a concept depends on a level 2 concept it is called a level 3 concept.  In these demos, we will be using a group number that indicates the group number = (number of hops +1) from a foundation concept.</p> <p>Fix X Positions Demo</p> <p>Warning</p> <p>We must also disable the <code>Improved Layout</code> which attempts to prevent overlap of the nodes.  Unfortunately, when we use fixed positioning on some nodes this causes conflicts.</p> <pre><code>options: {\n   physics: { ...\n   },\n   layout: {\n        \"improvedLayout\": false, // Prevent node overlap\n  }\n}\n</code></pre>"},{"location":"vis/fix-x-positions/#simple-demo","title":"Simple Demo","text":"<p>Simple Demo</p>"},{"location":"vis/fix-x-positions/#lab-2-loading-from-json","title":"Lab 2 - Loading From JSON","text":"<p>In this lab, we successfully load our graph data from this graph.json file, but the nodes placement and instructions to disable the physics is ignored.</p> <p>Fix X Positions V2</p>"},{"location":"vis/fix-x-positions/#lab-3-fixing-x-and-fixed-by-group","title":"Lab 3 - Fixing X and Fixed By Group","text":"<p>Run the Fix by Groups Demo V3</p> <p>This demo goes through all the nodes after they are loaded and sets their x and fixed properties if they are in the \"found\" or \"goal\" groups.  It loads data from This JSON file graph-3.json which does not have any x or y locations specified and does not specify fixed physics, only groups. The program also used the options/groups to do styling on the nodes.</p>"},{"location":"vis/fix-x-positions/#javascript-to-fix-x-by-group-id","title":"JavaScript to Fix X by Group ID","text":"<pre><code>// Create DataSet instances for nodes and edges\nconst nodes = new vis.DataSet(graphData.nodes);\n\n// Process nodes to fix positions of foundation and goal nodes\nnodes.forEach(function(node) {\n  if (node.group === \"found\") {\n    node.x = -400;\n    node.fixed = { x: true, y: false };\n  } else if (node.group === \"goal\") {\n    node.x = 400;\n    node.fixed = { x: true, y: false };\n  }\n});\n</code></pre>"},{"location":"vis/fix-x-positions/#group-styling","title":"Group Styling","text":"<pre><code>options {...\n  groups: {\n        found: {\n          shape: \"box\", \n          color:{background:'red'},\n          font: {\"color\": \"white\"}\n        },\n        g2: {\n          color:{background:'orange'}, \n        },\n        g3: {\n          color:{background:'green'}, \n        },\n        goal: {\n          shape: \"star\", \n          color:{background:'gold'}, \n          font: { size: 16 }\n        }\n    }\n}\n</code></pre> <p>Fix X Positions V4</p> <p>Fix X Positions V5</p> <p>Fix X Positions V6 - where group 1 and group 12 have their X positions pinned to x=-1000 and x=1000 respectively.</p> <p>The code that fixes the x positions for nodes in groups 1 and 12 is executed immediately after the nodes are created. Since the function is written within a forEach loop right after the nodes are defined, it runs automatically when the script is loaded. No explicit function call is needed because the function is not declared separately; it is an inline anonymous function applied to the nodes directly.</p> <p>Fix X Positions V7 - where we shorten distance between the left and right x positions to be 500, not 1000.</p> <p>An alternative that might be easier to work with is to create a function that fixes the left and right nodes:</p> <pre><code>// Function to fix x positions for specific groups\nfunction fixXPositions(nodes) {\n    nodes.forEach(function (node) {\n        if (node.group === 1) {\n            node.x = -500;\n            node.fixed = { x: true, y: false }; // Fix x, but let y be adjusted by physics\n        } else if (node.group === 12) {\n            node.x = 500;\n            node.fixed = { x: true, y: false }; // Fix x, but let y be adjusted by physics\n        }\n    });\n}\n\n// After defining nodes, call the function\nfixXPositions(nodes);\n</code></pre> <p>Fix X Positions V8 -</p>"},{"location":"vis/fix-x-positions/#prompt","title":"Prompt","text":"<pre><code>using vis.js, is there a way to freeze a node's x position\nbut let the y position float freely and be repositioned\nby the force-directed graph algorithm?\n</code></pre>"},{"location":"vis/fix-x-positions/#chatgpt-said","title":"ChatGPT said:","text":"<p>In vis.js, the built-in options for node positioning allow you to fix both the x and y coordinates of a node using the <code>fixed</code> option. However, freezing only one axis while letting the other float (like freezing the x-axis and letting the y-axis adjust with the force-directed graph algorithm) is not supported natively.</p> <p>That said, you can achieve this behavior with a workaround by using the <code>physics</code> option and manually adjusting the node's x position in each frame:</p> <ol> <li>Set the node's <code>x</code> position and use the <code>fixed: { x: true, y: false }</code> option to lock only the x-axis.</li> <li>During the graph's update cycle, reapply the node's fixed x position while letting the force algorithm adjust the y position.</li> </ol> <p>Here's an example code snippet to implement this behavior:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;vis.js Fixed X Position Example&lt;/title&gt;\n  &lt;script type=\"text/javascript\" src=\"https://unpkg.com/vis-network@9.1.2/dist/vis-network.min.js\"&gt;&lt;/script&gt;\n\n  &lt;style&gt;\n    #network {\n      width: 800px;\n      height: 600px;\n      border: 1px solid lightgray;\n      margin-left: 10px;\n      background-color: aliceblue;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"network\"&gt;&lt;/div&gt;\n&lt;script type=\"text/javascript\" src=\"fix-x-positions.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>var nodes = new vis.DataSet([\n  { id: 1, label: \"Node 1\", x: 100, fixed: { x: true, y: false } },\n  { id: 2, label: \"Node 2\", x: 200, fixed: { x: true, y: false } },\n  { id: 3, label: \"Node 3\", fixed: false },\n]);\n\nvar edges = new vis.DataSet([\n  { from: 1, to: 2 },\n  { from: 2, to: 3 },\n]);\n\nvar container = document.getElementById('network');\nvar data = {\n  nodes: nodes,\n  edges: edges\n};\n\nvar options = {\n  physics: {\n    enabled: true,\n    solver: 'forceAtlas2Based',\n    stabilization: false\n  }\n};\n\nvar network = new vis.Network(container, data, options);\n\n// Workaround: Lock x position while letting y position be free\nnetwork.on(\"beforeDrawing\", function () {\n  nodes.forEach(function (node) {\n    if (node.fixed &amp;&amp; node.fixed.x) {\n      var currentPosition = network.getPosition(node.id);\n      nodes.update({ id: node.id, x: node.x, y: currentPosition.y });\n    }\n  });\n});\n</code></pre>"},{"location":"vis/fix-x-positions/#explanation-of-changes","title":"Explanation of Changes","text":"<ol> <li> <p>Fixed Nodes Configuration:</p> <ul> <li><code>fixed: { x: true, y: false }</code>: This ensures that the x-position of the node remains constant while allowing the y-position to be influenced by the physics engine.</li> <li><code>physics: false</code>: Disables physics simulation for these nodes, preventing them from being moved by forces or other nodes.</li> <li> <p>Removal of <code>beforeDrawing</code> Event:</p> </li> <li> <p>Since we're now using <code>physics: false</code> for fixed nodes, the manual adjustment in the <code>beforeDrawing</code> event is no longer necessary and has been removed to prevent interference.</p> </li> <li> <p>Centering the Graph:</p> </li> <li> <p><code>moveTo</code> Method: After the network stabilizes, <code>moveTo</code> centers the graph at (0,0) with a smooth animation.</p> </li> <li><code>stabilization</code> Settings: Increased the number of iterations to ensure the network has ample time to stabilize before centering.</li> <li> <p>Responsive Design:</p> </li> <li> <p>Window Resize Event: Added an event listener to re-fit the network when the browser window is resized, maintaining the centered view.</p> </li> <li> <p>Node Styling (Optional):</p> </li> <li> <p>Enhanced node appearance for better visibility and aesthetics. This is optional but can help in visual differentiation.</p> </li> </ul> </li> </ol>"},{"location":"vis/fix-x-positions/#additional-tips","title":"Additional Tips","text":"<ul> <li> <p>Adjust Initial Positions: Ensure that the initial <code>x</code> positions of the fixed nodes are within the visible range of your container. If nodes are still drifting off, try setting <code>x</code> to smaller absolute values (e.g., closer to 0).</p> </li> <li> <p>Scale Adjustment: If the graph appears too zoomed out or in, adjust the <code>scale</code> parameter in the <code>moveTo</code> method to better fit the nodes within the view.</p> </li> <li> <p>Solver Selection: While <code>forceAtlas2Based</code> is a good general-purpose solver, experimenting with different solvers like <code>barnesHut</code> or <code>repulsion</code> might yield better results based on your specific graph structure.</p> </li> <li> <p>Debugging Node Positions: Temporarily disable physics (<code>physics: false</code>) for all nodes to manually position them and ensure they appear correctly within the view. Once satisfied, re-enable physics selectively.</p> </li> </ul>"},{"location":"vis/fix-x-positions/#move-to-center","title":"Move to Center","text":"<pre><code>network.moveTo({position:{x:0,y:0},scale:1})\n</code></pre>"},{"location":"vis/fix-x-positions/#modifying-nodes-after-loading","title":"Modifying Nodes after loading","text":"<pre><code> const modifiedNodes = [];\n        // Function to fix the x positions for groups \"found\" and \"goal\" after the data is loaded\n\n        nodes.forEach(function (node) {\n        if (node.group === \"found\") {\n            // Create an updated node object\n            modifiedNodes.push({\n                id: node.id,\n                group: \"found\",\n                x: -1000,\n                fixed: { x: true, y: false } // Fix x, but let y be adjusted by physics\n            });\n            } else if (node.group === \"goal\") {\n                // Create an updated node object\n                modifiedNodes.push({\n                    id: node.id,\n                    group: \"goal\",\n                    x: 1000,\n                    fixed: { x: true, y: false } // Fix x, but let y be adjusted by physics\n                });\n            }\n        });\n\n        // Update the nodes in the DataSet\n        nodes.update(modifiedNodes);\n</code></pre>"},{"location":"vis/fix-x-positions/#fix-to-disable-physics-on-foundation-and-goal-nodes","title":"Fix to Disable Physics on Foundation and Goal Nodes","text":"<p>After your network is generated add the following JavaScript code:</p> <pre><code>  // Initialize the network\n  const network = new vis.Network(container, graphData, options);\n\n  // Wait for the stabilization to finish\n        network.once('stabilizationIterationsDone', function () {\n            // Disable physics to prevent further movement\n            network.setOptions({ physics: { enabled: false } });\n\n            // Fix the x positions of the specified nodes\n            const updatedNodes = [];\n            nodes.forEach(function (node) {\n                if (node.group === \"found\") {\n                    updatedNodes.push({\n                        id: node.id,\n                        x: -2000,\n                        fixed: { x: true, y: false }\n                    });\n                } else if (node.group === \"goal\") {\n                    updatedNodes.push({\n                        id: node.id,\n                        x: 2000,\n                        fixed: { x: true, y: false }\n                    });\n                }\n            });\n            nodes.update(updatedNodes);\n        });\n    })\n</code></pre> <p>Move to Center</p> <p>Reference</p>"},{"location":"vis/fix-x-positions/#final-thoughts","title":"Final Thoughts","text":"<p>By configuring the fixed nodes correctly and ensuring they are excluded from the physics simulation, you should achieve the desired behavior where specific nodes remain anchored on the x-axis while others are dynamically positioned. Centering the graph post-stabilization ensures that all nodes remain within the visible area, providing a clear and organized visualization.</p> <p>Feel free to adjust the parameters further based on the specific requirements of your graph and the visual outcome you desire. Let me know if you encounter any more issues or need further assistance!</p>"},{"location":"vis/graph-editor/","title":"Graph Editor","text":""},{"location":"vis/graph-editor/#label-and-group-only","title":"Label and Group Only","text":"<p>Run the Graph Editor v20</p> <p>This version ONLY allows the user to change the label and the group. All other layout is done by these groups.</p>"},{"location":"vis/graph-editor/#attempting-to-edit-color-and-shapes","title":"Attempting to Edit Color and Shapes","text":"<p>This turned out to be challenging since color can be a property but also an object.  For detailed control of all colors including background and border colors for standard, hover and selected nodes we must have a very complex form.  I feel this is better handled based on the group of the node.</p> <p>Run the Graph Editor v19</p> <p>Run the Graph Editor v18 Integer Node ID</p> <p>Run the Graph Editor v17</p> <p>Graph Editor v16</p> <p>Graph Editor v15</p> <p>Graph Editor v14</p> <p>Graph Editor v13</p> <p>Graph Editor V12</p> <p>Run Graph Editor</p>"},{"location":"vis/graph-editor/#prompt","title":"Prompt","text":"<pre><code>Please generate a graph network editor based on vis.js.  The editor should be able to do the following:\n\n1. Open a graph network from a JSON file to an in memory structure.  Look for files with .json extensions.\n2. Add, update and delete nodes and edges.\n3. Edit various properties of the nodes and edges such as color, shape, size and image\n4. Save the in-memory structure to the file or do a \"Save As\" to a new file\n5. Allow the user to change and save global options\n\nUpon reading the file, display statistics about what was in the file including node count and edge count.  Also display the count of orphaned nodes when a file is read.\nPerform checks on data quality as a new file is opened such as edges without nodes.\n</code></pre>"},{"location":"vis/graph-editor/#graph-editor-check-for-network","title":"Graph Editor Check for Network","text":"<p>Check for Network after Load of JSON data</p>"},{"location":"vis/graph-editor/#adding-details-to-node","title":"Adding Details to Node","text":"<pre><code>What are the most common properties that a user sets on a node? I can think of the following: \n1. Label \n2. Title (for hover text) \n3. Shape (selected from a list of shapes) \n4. Size \n5. Background color (select from list) \n6. Edge color (select from list) \n7. x \n8. y \n9. Fixed location (checkbox) \n\nWhat other parameters might a person change? Update the JavaScript to allow all these parameters to be visible when creating a new node or updating a node.\n</code></pre>"},{"location":"vis/graph-editor/#chatgpt-said","title":"ChatGPT said:","text":"<p>In addition to the properties you've already listed, here are some other common node properties that users might want to set:</p> <ol> <li>Image (for image-based nodes, with a URL to an image)</li> <li>Font (size, color, face for the label)</li> <li>Border Width (controls the thickness of the node's border)</li> <li>Border Color (set separately from edge color, allows customization of node outline)</li> <li>Opacity (allows transparency on nodes)</li> <li>Shadow (option to add shadows for depth perception)</li> <li>Group (used to assign nodes into categories for different styles or behaviors)</li> <li>Icon (if using icons instead of labels)</li> <li>Physics (whether the node is affected by physics simulation)</li> </ol>"},{"location":"vis/graph-editor/#updated-javascript-for-node-creationediting-form","title":"Updated JavaScript for Node Creation/Editing Form","text":"<p>Here is an updated version of your graph-editor.js that includes a form for setting all these parameters when creating or editing nodes:</p>"},{"location":"vis/graph-editor/#references","title":"References","text":"<p>Sam Adams TinkerTiny Vis.js Graph Editor - an interesting UI.  One time code commit in 2022.</p>"},{"location":"vis/graph-viewer/","title":"Graph Viewer","text":"<p>Graph Viewer</p>"},{"location":"vis/groups/","title":"Using Groups in Vis.js","text":""},{"location":"vis/groups/#how-to-add-groups-to-a-learning-graph-node","title":"How To Add Groups to a Learning Graph Node","text":"<p>Each node in a learning graph can have a group attribute:</p> <pre><code>{\n    \"nodes\": [\n        {\"id\": 1, \"label\": \"Node 1\", \"group\": 1},\n        {\"id\": 2, \"label\": \"Node 2\", \"group\": 1},\n        {\"id\": 3, \"label\": \"Node 3\", \"group\": 2},\n        {\"id\": 4, \"label\": \"Node 4\", \"group\": 2},\n        {\"id\": 5, \"label\": \"Node 5\", \"group\": 3}\n    ],\n    \"edges\": [\n        {\"from\": 3, \"to\": 1},\n        {\"from\": 2, \"to\": 1},\n        {\"from\": 4, \"to\": 2},\n        {\"from\": 5, \"to\": 2}\n    ]\n}\n</code></pre> <p> Run Simple Groups Example</p> <p>Note that in the JSON example file, the type of each group  is an integer, but strings can also be used:</p> <pre><code>{\n    \"nodes\": [\n        {\"id\": 1, \"label\": \"Node 1\", \"group\": \"foundation\"},\n        {\"id\": 2, \"label\": \"Node 2\", \"group\": \"foundation\"},\n        {\"id\": 3, \"label\": \"Node 3\", \"group\": \"level2\"},\n        {\"id\": 4, \"label\": \"Node 4\", \"group\": \"level2\"},\n        {\"id\": 5, \"label\": \"Node 5\", \"group\": \"goal\"}\n    ],\n    \"edges\": [\n        {\"from\": 3, \"to\": 1},\n        {\"from\": 2, \"to\": 1},\n        {\"from\": 4, \"to\": 2},\n        {\"from\": 5, \"to\": 2}\n    ]\n}\n</code></pre>"},{"location":"vis/groups/#styling-graph-nodes","title":"Styling Graph Nodes","text":"<p>When options are loaded, we can add style elements to the groups object within the options. </p> <pre><code>var options = {\n      groups: {\n        foundation: {\n           shape: \"box\", \n           color:{background: 'red'},\n           font: {\"color\": \"white\"},\n        },\n        term: {\n           shape: \"dot\", \n           color:{background: 'orange'}, \n        },\n        goal: {\n           shape: \"star\", \n           color:{background: 'gold'}, \n           font: { size: 16 }\n        }\n     }\n}\n</code></pre> <p>Run Groups Style</p> <p>All other valid node properties can also be specified for a group. For example:</p> <ul> <li>color.background</li> <li>color.highlight</li> <li>color.highlight.border</li> <li>color.highlight.background</li> <li>color.hover</li> <li>color.hover.border</li> <li>color.hover.background</li> <li>color.border</li> <li>borderWidth</li> <li>font.size</li> <li>font.color</li> <li>opacity</li> </ul> <p>See the Node Properties docs for more</p>"},{"location":"vis/groups/#unable-to-set-x-and-y-positions-in-the-groups","title":"Unable to Set X and Y Positions in the Groups","text":"<p>Vis.js does not permit us to set the x and y and the fixed attributes in a group. To do this we must set them after the JSON file is loaded...</p> <pre><code>// Create DataSet instances for nodes and edges\n    const nodes = new vis.DataSet(graphData.nodes);\n\n// Process nodes to fix positions of foundation and goal nodes\n    nodes.forEach(function(node) {\n    if (node.group === \"found\") {\n        node.x = -500;\n        node.fixed = { x: true, y: false };\n    } else if (node.group === \"goal\") {\n        node.x = 500;\n        node.fixed = { x: true, y: false };\n    }\n    });\n</code></pre>"},{"location":"vis/groups/#references","title":"References","text":"<p>Vis.js Group Documentation</p> <p>Vis.js Groups Example</p> <p>Vis.js Custom Groups Example</p>"},{"location":"vis/hover-text/","title":"Hover Text","text":"<p>Run the Hover Text MicroSim</p> <p>Things to try:</p> <ol> <li>Hover over a node - note the text describes the node</li> <li>Hover over an edge - note the text describes the edge</li> </ol> <p>Below is a complete HTML example using the vis-network library that demonstrates how to display tooltips when hovering over nodes and edges. The tooltips show the text associated with each vertex (node) and edge.</p>"},{"location":"vis/hover-text/#features-implemented","title":"Features Implemented:","text":"<ol> <li>Nodes with Tooltips: Each node has a <code>title</code> property that specifies the text to display when hovered over.</li> <li>Edges with Tooltips: Similarly, each edge has a <code>title</code> property for hover text.</li> <li>Customized Appearance: Nodes and edges are styled with different colors, shapes, and sizes for better visualization.</li> </ol>"},{"location":"vis/hover-text/#summary","title":"Summary","text":"<ol> <li>Both nodes end edges have <code>title</code> properties.</li> <li>The options have an <code>interaction</code> section</li> </ol> <pre><code>options: {\n   interaction: {\n        hover: true, // Enable hover interactions\n        tooltipDelay: 200 // Delay before showing tooltip\n    }\n}\n</code></pre>"},{"location":"vis/hover-text/#full-listing","title":"Full listing","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;vis.js Hover Demo&lt;/title&gt;\n    &lt;!-- Include the vis-network library from a CDN --&gt;\n    &lt;script type=\"text/javascript\" src=\"https://unpkg.com/vis-network/standalone/umd/vis-network.min.js\"&gt;&lt;/script&gt;\n    &lt;style type=\"text/css\"&gt;\n        body {\n            font-family: Arial, Helvetica, sans-serif;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            padding: 20px;\n        }\n        #mynetwork {\n            width: 700px;\n            height: 500px;\n            background-color: aliceblue;\n            border: 1px solid silver;\n        }\n        a {\n            margin-top: 20px;\n            text-decoration: none;\n            color: #007BFF;\n        }\n        a:hover {\n            text-decoration: underline;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h2&gt;vis.js Hover Function Demo&lt;/h2&gt;\n    &lt;div id=\"mynetwork\"&gt;&lt;/div&gt;\n    &lt;a href=\".\"&gt;Back to Lesson Plan&lt;/a&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        // Create an array of nodes with 'title' for tooltips\n        var nodes = new vis.DataSet([\n            // Goal node on the right, fixed horizontally\n            { \n                id: 1, \n                label: \"Arithmetic\", \n                color: \"gold\", \n                shape: \"star\", \n                size: 30, \n                x: 200, \n                y: 0, \n                fixed: { x: true, y: false }, \n                font: { size: 24 },\n                title: \"This is the Arithmetic node representing the main topic.\"\n            },\n            // Operation nodes\n            { \n                id: 2, \n                label: \"Addition\", \n                color: \"tan\", \n                y: -200,\n                title: \"Addition is the process of finding the total or sum by combining two or more numbers.\"\n            },\n            { \n                id: 3, \n                label: \"Subtraction\", \n                color: \"tan\", \n                y: -100,\n                title: \"Subtraction is the process of finding the difference between two numbers.\"\n            },\n            { \n                id: 4, \n                label: \"Multiplication\", \n                color: \"tan\", \n                y: 100,\n                title: \"Multiplication is the process of combining equal groups to find the total.\"\n            },\n            { \n                id: 5, \n                label: \"Division\", \n                color: \"tan\", \n                y: 200,\n                title: \"Division is the process of splitting a number into equal parts.\"\n            },\n            // Foundation node on the left, fixed horizontally\n            { \n                id: 6, \n                label: \"Numbers\", \n                color: \"coral\", \n                shape: \"box\", \n                x: -200, \n                y: 0, \n                fixed: { x: true, y: false },\n                title: \"Numbers are the basic elements used in arithmetic operations.\"\n            }\n        ]);\n\n        // Create an array of edges with 'title' for tooltips\n        var edges = new vis.DataSet([\n            { \n                from: 1, \n                to: 2,\n                title: \"Connects Arithmetic to Addition\"\n            },\n            { \n                from: 1, \n                to: 3,\n                title: \"Connects Arithmetic to Subtraction\"\n            },\n            { \n                from: 1, \n                to: 4,\n                title: \"Connects Arithmetic to Multiplication\"\n            },\n            { \n                from: 1, \n                to: 5,\n                title: \"Connects Arithmetic to Division\"\n            },\n            { \n                from: 2, \n                to: 6,\n                title: \"Addition relies on Numbers\"\n            },\n            { \n                from: 3, \n                to: 6,\n                title: \"Subtraction relies on Numbers\"\n            },\n            { \n                from: 4, \n                to: 6,\n                title: \"Multiplication relies on Numbers\"\n            },\n            { \n                from: 5, \n                to: 6,\n                title: \"Division relies on Numbers\"\n            }\n        ]);\n\n        // Create a network\n        var container = document.getElementById('mynetwork');\n\n        // Provide the data in the vis format\n        var data = {\n            nodes: nodes,\n            edges: edges\n        };\n\n        var options = {\n            edges: {\n                arrows: {\n                    to: { enabled: true }\n                },\n                color: {\n                    color: 'black',\n                    inherit: false\n                },\n                width: 2,\n                smooth: {\n                    type: 'cubicBezier',\n                    roundness: 0.4\n                }\n            },\n            nodes: {\n                font: {\n                    size: 14,\n                    color: '#343434'\n                },\n                borderWidth: 2,\n                shadow: true\n            },\n            physics: {\n                solver: 'forceAtlas2Based',\n                forceAtlas2Based: {\n                    springLength: 100\n                },\n                stabilization: {\n                    iterations: 1000\n                }\n            },\n            interaction: {\n                hover: true, // Enable hover interactions\n                tooltipDelay: 200 // Delay before showing tooltip\n            },\n            layout: {\n                improvedLayout: true\n            }\n        };\n\n        // Initialize your network!\n        var network = new vis.Network(container, data, options);\n\n        // Optional: Customize the tooltip style (CSS)\n        // You can add CSS rules to style the tooltips if desired\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"vis/hover-text/#explanation-of-the-code","title":"Explanation of the Code:","text":"<ol> <li> <p>Including the vis-network Library:</p> <ul> <li>The <code>vis-network</code> library is included via a CDN link in the <code>&lt;head&gt;</code> section.</li> <li> <p>Styling:</p> </li> <li> <p>The <code>#mynetwork</code> div is styled to have a specific width, height, background color, and border.</p> </li> <li>The body is styled to center the content and add some padding.</li> <li> <p>Defining Nodes:</p> </li> <li> <p>Each node in the <code>nodes</code> DataSet has several properties:</p> <ul> <li><code>id</code>: Unique identifier for the node.</li> <li><code>label</code>: Text displayed on the node.</li> <li><code>color</code>, <code>shape</code>, <code>size</code>, <code>x</code>, <code>y</code>: Define the appearance and position.</li> <li><code>fixed</code>: Fixes the node's position along the x-axis.</li> <li><code>font</code>: Customizes the font size.</li> <li><code>title</code>: The tooltip text that appears on hover.</li> </ul> </li> <li> <p>Defining Edges:</p> </li> <li> <p>Each edge in the <code>edges</code> DataSet connects two nodes (<code>from</code> and <code>to</code>) and includes a <code>title</code> for the tooltip.</p> </li> <li> <p>Network Options:</p> </li> <li> <p>Edges:</p> <ul> <li>Arrows are enabled at the destination.</li> <li>Edges are colored black with a fixed width.</li> <li>Smooth curves are added for better aesthetics.</li> </ul> </li> <li>Nodes:<ul> <li>Font size and color are customized.</li> <li>Borders and shadows are added for better visibility.</li> </ul> </li> <li>Physics:<ul> <li>The <code>forceAtlas2Based</code> solver is used for node positioning.</li> <li>Spring length is adjusted for spacing.</li> <li>Stabilization iterations ensure the network settles into a stable layout.</li> </ul> </li> <li>Interaction:<ul> <li>Hover interactions are enabled to show tooltips.</li> <li>A slight delay is added before tooltips appear.</li> </ul> </li> <li>Layout:<ul> <li>Improved layout settings enhance the visual arrangement of nodes and edges.</li> </ul> </li> <li> <p>Initializing the Network:</p> </li> <li> <p>The <code>vis.Network</code> constructor is used to create and render the network inside the <code>#mynetwork</code> div with the specified <code>data</code> and <code>options</code>.</p> </li> <li> <p>Tooltips:</p> </li> <li> <p>The <code>title</code> property for both nodes and edges automatically enables tooltips on hover.</p> </li> <li>The <code>interaction.hover</code> option ensures that hovering is enabled, and <code>tooltipDelay</code> controls the delay before the tooltip appears.</li> </ul> </li> </ol>"},{"location":"vis/hover-text/#how-it-works","title":"How It Works:","text":"<ul> <li> <p>Hovering Over Nodes: When you move your mouse over any node, a tooltip appears displaying the <code>title</code> associated with that node. For example, hovering over the \"Addition\" node will show \"Addition is the process of finding the total or sum by combining two or more numbers.\"</p> </li> <li> <p>Hovering Over Edges: Similarly, hovering over any edge will display the <code>title</code> of that edge. For example, hovering over the edge connecting \"Arithmetic\" to \"Addition\" will show \"Connects Arithmetic to Addition.\"</p> </li> </ul>"},{"location":"vis/hover-text/#live-demo","title":"Live Demo:","text":"<p>You can run the above HTML code in your local environment or any online HTML editor (like CodePen or JSFiddle) to see the hover functionality in action.</p>"},{"location":"vis/hover-text/#additional-customizations","title":"Additional Customizations:","text":"<ul> <li> <p>Styling Tooltips: If you want to further customize the appearance of the tooltips, you can add custom CSS or use HTML within the <code>title</code> property to include richer content.</p> </li> <li> <p>Dynamic Content: You can dynamically update the <code>title</code> properties based on user interactions or other events to provide more interactive experiences.</p> </li> </ul> <p>Feel free to modify the nodes, edges, and their associated titles to suit your specific needs!</p>"},{"location":"vis/learn-python/","title":"Learn Python and Data Science","text":""},{"location":"vis/learn-python/#prompt","title":"Prompt","text":"<p>Create a graph in vis.js format for learning data science with Python. Make Learn Python the first Concept, but then make that a prerequsite to many Python data science packages like NumPi, SciKitLearn, PyTourch etc.</p>"},{"location":"vis/learn-python/#chatgpt-said","title":"ChatGPT said:","text":"<p>ChatGPT</p> <p>Here is an example of a vis.js graph configuration representing a learning graph for data science with Python. The first concept is \"Learn Python,\" which is a prerequisite for various Python data science packages like NumPy, SciKitLearn, and PyTorch.</p> <pre><code>javascript\nCopy code\n\n`var nodes = new vis.DataSet([\n  { id: 1, label: \"Learn Python\", title: \"Basic Python Programming\" },\n  { id: 2, label: \"Learn NumPy\", title: \"Numerical computing with Python\" },\n  { id: 3, label: \"Learn Pandas\", title: \"Data manipulation and analysis\" },\n  { id: 4, label: \"Learn Matplotlib\", title: \"Data visualization with Python\" },\n  { id: 5, label: \"Learn SciKitLearn\", title: \"Machine learning with Python\" },\n  { id: 6, label: \"Learn TensorFlow\", title: \"Deep learning with Python\" },\n  { id: 7, label: \"Learn PyTorch\", title: \"Deep learning with Python\" },\n  { id: 8, label: \"Learn Seaborn\", title: \"Statistical data visualization\" },\n  { id: 9, label: \"Learn Statsmodels\", title: \"Statistical models in Python\" },\n]);\n\nvar edges = new vis.DataSet([\n  { from: 1, to: 2, label: \"prerequisite\" },\n  { from: 1, to: 3, label: \"prerequisite\" },\n  { from: 1, to: 4, label: \"prerequisite\" },\n  { from: 1, to: 5, label: \"prerequisite\" },\n  { from: 1, to: 6, label: \"prerequisite\" },\n  { from: 1, to: 7, label: \"prerequisite\" },\n  { from: 1, to: 8, label: \"prerequisite\" },\n  { from: 1, to: 9, label: \"prerequisite\" },\n]);\n\nvar container = document.getElementById(\"mynetwork\");\nvar data = {\n  nodes: nodes,\n  edges: edges,\n};\nvar options = {\n  nodes: {\n    shape: \"box\",\n    size: 20,\n    color: {\n      background: \"#ffffff\",\n      border: \"#000000\",\n    },\n    font: {\n      color: \"#000000\",\n      size: 14,\n    },\n  },\n  edges: {\n    arrows: \"to\",\n    smooth: true,\n  },\n  layout: {\n    hierarchical: {\n      direction: \"LR\", // Left to right layout\n      sortMethod: \"directed\",\n    },\n  },\n};\nvar network = new vis.Network(container, data, options);\n`\n</code></pre>"},{"location":"vis/learn-python/#explanation","title":"Explanation:","text":"<ul> <li>Nodes: Each concept (e.g., \"Learn Python,\" \"Learn NumPy\") is represented as a node.</li> <li>Edges: Each edge represents a prerequisite relationship. The <code>from</code> attribute specifies the starting node (e.g., \"Learn Python\") and the <code>to</code> attribute specifies the dependent concept (e.g., \"Learn NumPy\").</li> <li>Layout: The layout is hierarchical and flows from left to right (LR), with arrows pointing from the prerequisite concept to the dependent concept.</li> </ul>"},{"location":"vis/learn-python/#concepts-flow","title":"Concepts Flow:","text":"<ol> <li>Learn Python is the foundation, required for all other data science packages.</li> <li>NumPy, Pandas, Matplotlib, SciKitLearn, TensorFlow, PyTorch, Seaborn, and Statsmodels are all dependent on a solid understanding of Python.</li> </ol>"},{"location":"vis/legend-checkboxes/","title":"Legend Checkboxes","text":"<p>We had a user that wanted to only display specific groups in a learning graph. In order to do this, we need a way to add group-by-group selectors. So we asked ChatGPT if we could add checkboxes to the legend.</p> <p></p> <p>Run the Legend Checkboxes MicroSim</p>"},{"location":"vis/legend-checkboxes/#prompt","title":"Prompt","text":"<pre><code>I have a vis.js program that has a legend for the node types.\nI would like to conditionally include specific nodes that are\nin groups in the network graphs. \nUsing the following template, create a new version that puts\ncheckboxes in the legend in the sidebar.\nThe checkboxes will turn on and off the inclusion of each\ngroup in the network.\n</code></pre>"},{"location":"vis/legend-checkboxes/#response","title":"Response","text":"<p>To implement checkboxes in the legend sidebar to control the visibility of specific groups in the network, I\u2019ll modify your template to add checkboxes next to each group. The checkboxes will toggle the visibility of nodes in that specific group. When a checkbox is unchecked, nodes in that group will be hidden from the network graph; when checked, they will be displayed.</p>"},{"location":"vis/legend-checkboxes/#explanation","title":"Explanation","text":""},{"location":"vis/legend-checkboxes/#group-and-checkbox-property-consistency","title":"Group and Checkbox Property Consistency","text":"<ul> <li>Updated Node Groups: Each node's <code>group</code> property now matches the IDs of the checkboxes. For example, the node for \"Foundation\" has <code>group: 'Foundation'</code>.</li> </ul> <pre><code>{\n  id: 1, \n  label: 'Foundation', \n   shape: \"box\", \n   color: \"red\", \n   font: {color: \"white\"}, \n   group: 'Foundation'\n}\n</code></pre> <ul> <li>Checkbox IDs and <code>toggleGroup</code> Function: The <code>id</code> attributes of the checkboxes match the <code>group</code> names. The <code>toggleGroup</code> function now uses the <code>groupName</code> to reference both the checkbox and the node group.</li> </ul> <pre><code>&lt;input type=\"checkbox\" id=\"groupFoundation\" checked onchange=\"toggleGroup('Foundation')\"&gt;\n</code></pre>"},{"location":"vis/legend-checkboxes/#javascript-function-to-toggle-group-visibility","title":"JavaScript Function to Toggle Group Visibility","text":"<pre><code>function toggleGroup(groupName) {\n      const visible = document.getElementById(`group${groupName}`).checked;\n      nodes.forEach(node =&gt; {\n        if (node.group === groupName) {\n          nodes.update({id: node.id, hidden: !visible});\n        }\n      });\n    }\n</code></pre> <ul> <li>Consistent Colors: The colors in the legend now match the colors assigned to the nodes. For example, \"Flow and Match\" uses <code>color: \"indigo\"</code> and the legend reflects this with <code>background-color: indigo</code>.</li> </ul> <pre><code>&lt;td style=\"background-color: indigo; color: white;\"&gt;Indigo&lt;/td&gt;\n</code></pre>"},{"location":"vis/legend-checkboxes/#testing-the-fix","title":"Testing the Fix:","text":"<ul> <li>When you uncheck a checkbox in the legend, the corresponding nodes in the network graph should disappear.</li> <li>When you check the checkbox again, the nodes reappear.</li> </ul>"},{"location":"vis/legend-checkboxes/#additional-notes","title":"Additional Notes:","text":"<ul> <li> <p>Edge Visibility: If you need the edges connected to the hidden nodes to also be hidden, Vis.js handles this automatically when a connected node is hidden.</p> </li> <li> <p>Multiple Nodes per Group: If you have more nodes in each group, this method will scale appropriately.</p> </li> </ul>"},{"location":"vis/legend-checkboxes/#example-legend-checkbox-program","title":"Example Legend Checkbox Program","text":"<p>Legend Checkboxes</p>"},{"location":"vis/legend-checkboxes/#adding-check-all-and-uncheck-all-buttons","title":"Adding \"Check All\" and \"Uncheck All\" Buttons","text":""},{"location":"vis/legend-checkboxes/#prompt_1","title":"Prompt","text":"<pre><code>How can I add two buttons that will \"Check All\" and \"Uncheck All\"?\n</code></pre>"},{"location":"vis/legend-checkboxes/#response_1","title":"Response","text":"<p>ChatGPT Thought for 17 seconds</p> <p>Certainly! To add \"Check All\" and \"Uncheck All\" buttons that control all the group checkboxes and update the network graph accordingly, we'll:</p> <ol> <li>Add two buttons labeled \"Check All\" and \"Uncheck All\" above the legend table.</li> <li>Implement two functions, <code>checkAllGroups()</code> and <code>uncheckAllGroups()</code>, that will check or uncheck all the checkboxes and update the node visibility in the network graph.</li> <li>Ensure that the network graph updates efficiently when these buttons are clicked.</li> </ol> <p>Here's the updated code with the new buttons and functions</p>"},{"location":"vis/legend-checkboxes/#explanation-of-changes","title":"Explanation of Changes:","text":""},{"location":"vis/legend-checkboxes/#1-added-check-all-and-uncheck-all-buttons","title":"1.  Added \"Check All\" and \"Uncheck All\" Buttons:","text":"<p><pre><code>&lt;div&gt;\n    &lt;button onclick=\"checkAllGroups()\"&gt;Check All&lt;/button&gt;\n    &lt;button onclick=\"uncheckAllGroups()\"&gt;Uncheck All&lt;/button&gt;\n&lt;/div&gt;\n</code></pre> -   These buttons are placed above the legend table in the sidebar. -   They call the functions <code>checkAllGroups()</code> and <code>uncheckAllGroups()</code> when clicked.</p>"},{"location":"vis/legend-checkboxes/#2-implemented-checkallgroups-function","title":"2.  Implemented <code>checkAllGroups()</code> Function:","text":"<p><pre><code>function checkAllGroups() {\n      const checkboxes = document.querySelectorAll('input[id^=\"group\"]');\n      checkboxes.forEach(checkbox =&gt; {\n        if (!checkbox.checked) {\n          checkbox.checked = true;\n          // Update nodes in this group to be visible\n          toggleGroup(checkbox.id.replace('group', ''));\n        }\n      });\n    }\n</code></pre> -   Purpose: Checks all the group checkboxes and makes all corresponding nodes visible. -   How it Works:     -   Selects all input elements with IDs starting with <code>\"group\"</code>.     -   Loops through each checkbox:         -   If it's not already checked, it sets <code>checkbox.checked = true</code>.         -   Calls <code>toggleGroup()</code> with the group name to update node visibility.</p>"},{"location":"vis/legend-checkboxes/#3-implemented-uncheckallgroups-function","title":"3.  Implemented <code>uncheckAllGroups()</code> Function:","text":"<pre><code>function uncheckAllGroups() {\n      const checkboxes = document.querySelectorAll('input[id^=\"group\"]');\n      checkboxes.forEach(checkbox =&gt; {\n        if (checkbox.checked) {\n          checkbox.checked = false;\n          // Update nodes in this group to be hidden\n          toggleGroup(checkbox.id.replace('group', ''));\n        }\n      });\n    }\n</code></pre> <ul> <li>Purpose: Unchecks all the group checkboxes and hides all corresponding nodes.</li> <li>How it Works:<ul> <li>Selects all input elements with IDs starting with <code>\"group\"</code>.</li> <li>Loops through each checkbox:<ul> <li>If it's checked, it sets <code>checkbox.checked = false</code>.<ul> <li>Calls <code>toggleGroup()</code> with the group name to update node visibility.</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"vis/legend-checkboxes/#4-optimizing-node-updates","title":"4.  Optimizing Node Updates:","text":"<ul> <li>By only calling <code>toggleGroup()</code> when a checkbox state changes (from unchecked to checked or vice versa), we avoid unnecessary updates.</li> <li>The <code>toggleGroup()</code> function handles updating the node visibility based on the current state of the checkbox.</li> </ul>"},{"location":"vis/legend-checkboxes/#5-ensuring-consistent-group-names","title":"5.  Ensuring Consistent Group Names:","text":"<ul> <li>The <code>replace('group', '')</code> method extracts the group name from the checkbox ID (e.g., from <code>\"groupFoundation\"</code> to <code>\"Foundation\"</code>).</li> <li>This ensures that <code>toggleGroup()</code> receives the correct group name to update node visibility.</li> </ul>"},{"location":"vis/legend-checkboxes/#how-it-works","title":"How It Works:","text":"<ul> <li> <p>\"Check All\" Button:</p> <ul> <li>When clicked, all checkboxes become checked.</li> <li>For each checkbox that was previously unchecked, <code>toggleGroup()</code> is called to set the corresponding nodes as visible.</li> <li>The network graph updates to show all nodes.</li> <li> <p>\"Uncheck All\" Button:</p> </li> <li> <p>When clicked, all checkboxes become unchecked.</p> </li> <li>For each checkbox that was previously checked, <code>toggleGroup()</code> is called to hide the corresponding nodes.</li> <li>The network graph updates to hide all nodes.</li> <li> <p>Individual Checkboxes:</p> </li> <li> <p>The existing functionality for individual checkboxes remains unchanged.</p> </li> <li>Checking or unchecking a group checkbox will show or hide nodes in that group.</li> </ul> </li> </ul>"},{"location":"vis/legend-checkboxes/#additional-notes_1","title":"Additional Notes:","text":"<ul> <li> <p>Edge Visibility:</p> <ul> <li>Vis.js automatically handles edge visibility. If both connected nodes are hidden, the edge is also hidden.</li> <li>If one node is visible and the other is hidden, the edge will still be displayed, connected to the visible node.</li> <li> <p>Scalability:</p> </li> <li> <p>This approach works efficiently even if more groups or nodes are added.</p> </li> <li>The functions dynamically select checkboxes and nodes based on IDs and group names.</li> <li> <p>Accessibility:</p> </li> <li> <p>The buttons and checkboxes are standard HTML elements, ensuring compatibility with assistive technologies.</p> </li> </ul> </li> </ul>"},{"location":"vis/legend-checkboxes/#testing-the-implementation","title":"Testing the Implementation:","text":"<ol> <li> <p>Initial State:</p> <ul> <li>All checkboxes are checked.</li> <li>All nodes are visible in the network graph.</li> <li> <p>Uncheck All:</p> </li> <li> <p>Click the \"Uncheck All\" button.</p> </li> <li>All checkboxes become unchecked.</li> <li>All nodes are hidden in the network graph.</li> <li>Check All:</li> </ul> </li> <li> <p>Click the \"Check All\" button.</p> </li> <li>All checkboxes become checked.</li> <li> <p>All nodes reappear in the network graph.</p> </li> <li> <p>Combination:</p> </li> <li> <p>Uncheck individual checkboxes to hide specific groups.</p> </li> <li>Use \"Check All\" to restore visibility to all groups.</li> </ol>"},{"location":"vis/legend-checkboxes/#summary-of-check-all-and-uncheck-all","title":"Summary of Check All and Uncheck All","text":"<p>By adding the \"Check All\" and \"Uncheck All\" buttons and implementing the corresponding functions, users can easily control the visibility of all node groups in the network graph with a single click. This enhancement improves the usability of the application, especially when dealing with a large number of groups.</p> <p>Example of Check All</p>"},{"location":"vis/legend-checkboxes/#adding-network-statistics","title":"Adding Network Statistics","text":"<p>When we disable some nodes with the checkboxes, we often need to know that some nodes are now disconnected from the network. We can see the number of orphaned nodes by running a simple query on the graph.  Here is how it works.</p>"},{"location":"vis/legend-checkboxes/#graph-statistics-prompt","title":"Graph Statistics Prompt","text":""},{"location":"vis/legend-checkboxes/#sample-prompt","title":"Sample Prompt","text":"<pre><code>How would I modify the code to display the network statistics\nin the sidebar such as number of nodes, number of edges and\nnumber of orphaned nodes? \nUse HTML in the sidebar under \"Graph Statistics\".\n</code></pre>"},{"location":"vis/legend-checkboxes/#sample-response","title":"Sample Response","text":"<p>ChatGPT o1-preview Thought for 24 seconds</p> <p>Certainly! To display dynamic network statistics---such as the number of nodes, number of edges, and number of orphaned nodes---in the sidebar under \"Graph Statistics\", we'll need to:</p> <ol> <li>Add placeholders in the HTML for the statistics.</li> <li>Write a function <code>updateStatistics()</code> that calculates these statistics based on the current state of the network.</li> <li>Call <code>updateStatistics()</code> whenever the network changes (e.g., when nodes are shown or hidden via the checkboxes).</li> </ol> <p>Below is the updated code with the necessary modifications:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Demo of Toggle Sidebar Legend&lt;/title&gt;\n  &lt;script type=\"text/javascript\" src=\"https://unpkg.com/vis-network/standalone/umd/vis-network.min.js\"&gt;&lt;/script&gt;\n  &lt;style&gt;\n    body {\n      font-family: Arial, Helvetica, sans-serif;\n      display: flex;\n    }\n\n    #sidebar {\n      width: auto;\n      max-width: 300px;\n      padding: 5px;\n      margin-right: 10px;\n      box-sizing: border-box;\n    }\n\n    #main {\n      flex: 1;\n      padding: 10px;\n    }\n\n    #mynetwork {\n      width: 100%;\n      height: 700px;\n      background-color: aliceblue;\n      border: 1px solid lightgray;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;div id=\"sidebar-container\"&gt;\n    &lt;button id=\"toggle-button\" onclick=\"toggleSidebar()\"&gt;&amp;#9776;&lt;/button&gt;\n\n    &lt;div id=\"sidebar\"&gt;\n      &lt;h3&gt;Legend Sidebar&lt;/h3&gt;\n\n      &lt;div&gt;\n        &lt;button onclick=\"checkAllGroups()\"&gt;Check All&lt;/button&gt;\n        &lt;button onclick=\"uncheckAllGroups()\"&gt;Uncheck All&lt;/button&gt;\n      &lt;/div&gt;\n      &lt;table&gt;\n        &lt;tr&gt;\n          &lt;td&gt;&lt;input type=\"checkbox\" id=\"groupFoundation\" checked onchange=\"toggleGroup('Foundation')\"&gt; Foundational Concepts and Definitions&lt;/td&gt;\n          &lt;td style=\"background-color: red; color: white;\"&gt;Red&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;&lt;input type=\"checkbox\" id=\"groupTypes\" checked onchange=\"toggleGroup('Types')\"&gt; Types and Properties of Graphs&lt;/td&gt;\n          &lt;td style=\"background-color: orange;\"&gt;Orange&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;&lt;input type=\"checkbox\" id=\"groupRepresentations\" checked onchange=\"toggleGroup('Representations')\"&gt; Graph Representations and Data Structures&lt;/td&gt;\n          &lt;td style=\"background-color: gold;\"&gt;Gold&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;&lt;input type=\"checkbox\" id=\"groupAlgorithms\" checked onchange=\"toggleGroup('Algorithms')\"&gt; Basic Graph Algorithms&lt;/td&gt;\n          &lt;td style=\"background-color: green; color: white;\"&gt;Green&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;&lt;input type=\"checkbox\" id=\"groupPaths\" checked onchange=\"toggleGroup('Paths')\"&gt; Shortest Path and Spanning Tree Algorithms&lt;/td&gt;\n          &lt;td style=\"background-color: blue; color: white;\"&gt;Blue&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;&lt;input type=\"checkbox\" id=\"groupFlow\" checked onchange=\"toggleGroup('Flow')\"&gt; Network Flow and Matching Algorithms&lt;/td&gt;\n          &lt;td style=\"background-color: indigo; color: white;\"&gt;Indigo&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;&lt;input type=\"checkbox\" id=\"groupAdvanced\" checked onchange=\"toggleGroup('Advanced')\"&gt; Advanced Graph Algorithms&lt;/td&gt;\n          &lt;td style=\"background-color: violet; color: white;\"&gt;Violet&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;&lt;input type=\"checkbox\" id=\"groupMetrics\" checked onchange=\"toggleGroup('Metrics')\"&gt; Graph Measures and Centrality Metrics&lt;/td&gt;\n          &lt;td style=\"background-color: gray; color: white;\"&gt;Gray&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;&lt;input type=\"checkbox\" id=\"groupSpectral\" checked onchange=\"toggleGroup('Spectral')\"&gt; Spectral Graph Theory and Clustering&lt;/td&gt;\n          &lt;td style=\"background-color: brown; color: white;\"&gt;Brown&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;&lt;input type=\"checkbox\" id=\"groupML\" checked onchange=\"toggleGroup('ML')\"&gt; Graph Machine Learning and Network Models&lt;/td&gt;\n          &lt;td style=\"background-color: teal; color: white;\"&gt;Teal&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/table&gt;\n      &lt;h3&gt;Graph Statistics&lt;/h3&gt;\n\n      &lt;ul&gt;\n        &lt;li&gt;&lt;b&gt;Nodes:&lt;/b&gt; &lt;span id=\"nodeCount\"&gt;0&lt;/span&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;b&gt;Edges:&lt;/b&gt; &lt;span id=\"edgeCount\"&gt;0&lt;/span&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;b&gt;Orphans:&lt;/b&gt; &lt;span id=\"orphanCount\"&gt;0&lt;/span&gt;&lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div id=\"main\"&gt;\n    &lt;div id=\"mynetwork\"&gt;&lt;/div&gt;\n  &lt;/div&gt;\n\n  &lt;script&gt;\n    function toggleSidebar() {\n      const sidebar = document.getElementById(\"sidebar\");\n      const mainContent = document.getElementById(\"main\");\n      const toggleButton = document.getElementById(\"toggle-button\");\n\n      if (sidebar.style.display === \"none\") {\n        sidebar.style.display = \"block\";\n        toggleButton.innerHTML = \"&amp;#9776;\";\n        mainContent.style.marginLeft = \"auto\";\n      } else {\n        sidebar.style.display = \"none\";\n        toggleButton.innerHTML = \"&amp;#8594;\";\n        mainContent.style.marginLeft = \"0\";\n      }\n    }\n\n    // Create an array with nodes\n    var nodes = new vis.DataSet([\n      {id: 1, label: 'Foundation', shape: \"box\", color: \"red\", font: {color: \"white\"}, group: 'Foundation'},\n      {id: 2, label: 'Types', color: \"orange\", font: {color: \"black\"}, group: 'Types'},\n      {id: 3, label: 'Representations', color: \"gold\", font: {color: \"black\"}, group: 'Representations'},\n      {id: 4, label: 'Algorithms', color: \"green\", font: {color: \"white\"}, group: 'Algorithms'},\n      {id: 5, label: 'Paths', color: \"blue\", font: {color: \"white\"}, group: 'Paths'},\n      {id: 6, label: 'Flow and Match', color: \"indigo\", font: {color: \"white\"}, group: 'Flow'},\n      {id: 7, label: 'Advanced', color: \"violet\", font: {color: \"white\"}, group: 'Advanced'},\n      {id: 8, label: 'Metrics', color: \"gray\", font: {color: \"white\"}, group: 'Metrics'},\n      {id: 9, label: 'Spectral', color: \"brown\", font: {color: \"white\"}, group: 'Spectral'},\n      {id: 10, label: 'ML and NN', shape: \"star\", color: \"teal\", font: {color: \"black\"}, group: 'ML'},\n    ]);\n\n    // Create an array with edges\n    var edges = new vis.DataSet([\n      {from: 2, to: 1},\n      {from: 3, to: 2},\n      {from: 4, to: 3},\n      {from: 5, to: 4},\n      {from: 6, to: 5},\n      {from: 7, to: 6},\n      {from: 8, to: 7},\n      {from: 9, to: 8},\n      {from: 10, to: 9}\n    ]);\n\n    // Create a network\n    var container = document.getElementById('mynetwork');\n\n    // Provide the data in the vis format\n    var data = {\n      nodes: nodes,\n      edges: edges\n    };\n    var options = {\n      edges: {\n        arrows: {\n          to: { enabled: true, type: 'arrow', color: 'black', scaleFactor: 1 }\n        },\n        smooth: { type: 'continuous' }\n      },\n      layout: {\n        hierarchical: { direction: \"LR\" }\n      }\n    };\n    var network = new vis.Network(container, data, options);\n\n    // Function to update statistics\n    function updateStatistics() {\n      // Get all nodes and edges\n      var allNodes = nodes.get();\n      var allEdges = edges.get();\n\n      // Filter visible nodes\n      var visibleNodes = allNodes.filter(node =&gt; !node.hidden);\n\n      // Filter visible edges (both connected nodes must be visible)\n      var visibleEdges = allEdges.filter(edge =&gt; {\n        var fromNode = nodes.get(edge.from);\n        var toNode = nodes.get(edge.to);\n        return (!fromNode.hidden &amp;&amp; !toNode.hidden);\n      });\n\n      // Calculate number of visible nodes and edges\n      var nodeCount = visibleNodes.length;\n      var edgeCount = visibleEdges.length;\n\n      // Find orphan nodes (nodes with no visible edges)\n      var connectedNodeIds = new Set();\n      visibleEdges.forEach(edge =&gt; {\n        connectedNodeIds.add(edge.from);\n        connectedNodeIds.add(edge.to);\n      });\n      var orphanNodes = visibleNodes.filter(node =&gt; !connectedNodeIds.has(node.id));\n      var orphanCount = orphanNodes.length;\n\n      // Update the HTML elements with the statistics\n      document.getElementById('nodeCount').textContent = nodeCount;\n      document.getElementById('edgeCount').textContent = edgeCount;\n      document.getElementById('orphanCount').textContent = orphanCount;\n    }\n\n    // Call updateStatistics after the network is initialized\n    updateStatistics();\n\n    // Function to toggle groups\n    function toggleGroup(groupName) {\n      const visible = document.getElementById(`group${groupName}`).checked;\n      nodes.forEach(node =&gt; {\n        if (node.group === groupName) {\n          nodes.update({id: node.id, hidden: !visible});\n        }\n      });\n      updateStatistics(); // Update statistics after toggling a group\n    }\n\n    // Function to check all groups\n    function checkAllGroups() {\n      const checkboxes = document.querySelectorAll('input[id^=\"group\"]');\n      checkboxes.forEach(checkbox =&gt; {\n        if (!checkbox.checked) {\n          checkbox.checked = true;\n          // Update nodes in this group to be visible\n          toggleGroup(checkbox.id.replace('group', ''));\n        }\n      });\n      // updateStatistics(); // Already called within toggleGroup\n    }\n\n    // Function to uncheck all groups\n    function uncheckAllGroups() {\n      const checkboxes = document.querySelectorAll('input[id^=\"group\"]');\n      checkboxes.forEach(checkbox =&gt; {\n        if (checkbox.checked) {\n          checkbox.checked = false;\n          // Update nodes in this group to be hidden\n          toggleGroup(checkbox.id.replace('group', ''));\n        }\n      });\n      // updateStatistics(); // Already called within toggleGroup\n    }\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"vis/legend-checkboxes/#explanation-of-modifications","title":"Explanation of Modifications:","text":""},{"location":"vis/legend-checkboxes/#step-1-added-placeholders-in-the-html-for-statistics","title":"Step 1.  Added Placeholders in the HTML for Statistics:","text":"<p><pre><code>&lt;h3&gt;Graph Statistics&lt;/h3&gt;\n  &lt;ul&gt;\n    &lt;li&gt;&lt;b&gt;Nodes:&lt;/b&gt; &lt;span id=\"nodeCount\"&gt;0&lt;/span&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;b&gt;Edges:&lt;/b&gt; &lt;span id=\"edgeCount\"&gt;0&lt;/span&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;b&gt;Orphans:&lt;/b&gt; &lt;span id=\"orphanCount\"&gt;0&lt;/span&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n</code></pre>   -   Replaced the hardcoded numbers with <code>&lt;span&gt;</code> elements having IDs (<code>nodeCount</code>, <code>edgeCount</code>, <code>orphanCount</code>).   -   These elements will be updated dynamically via JavaScript.</p>"},{"location":"vis/legend-checkboxes/#step-2-created-updatestatistics-function","title":"Step 2.  Created <code>updateStatistics()</code> Function:","text":"<p>```javascript   function updateStatistics() {       // Get all nodes and edges       var allNodes = nodes.get();       var allEdges = edges.get();</p> <pre><code>  // Filter visible nodes\n  var visibleNodes = allNodes.filter(node =&gt; !node.hidden);\n\n  // Filter visible edges (both connected nodes must be visible)\n  var visibleEdges = allEdges.filter(edge =&gt; {\n    var fromNode = nodes.get(edge.from);\n    var toNode = nodes.get(edge.to);\n    return (!fromNode.hidden &amp;&amp; !toNode.hidden);\n  });\n\n  // Calculate number of visible nodes and edges\n  var nodeCount = visibleNodes.length;\n  var edgeCount = visibleEdges.length;\n\n  // Find orphan nodes (nodes with no visible edges)\n  var connectedNodeIds = new Set();\n  visibleEdges.forEach(edge =&gt; {\n    connectedNodeIds.add(edge.from);\n    connectedNodeIds.add(edge.to);\n  });\n  var orphanNodes = visibleNodes.filter(node =&gt; !connectedNodeIds.has(node.id));\n  var orphanCount = orphanNodes.length;\n\n  // Update the HTML elements with the statistics\n  document.getElementById('nodeCount').textContent = nodeCount;\n  document.getElementById('edgeCount').textContent = edgeCount;\n  document.getElementById('orphanCount').textContent = orphanCount;\n}\n</code></pre> <p>```</p> <ul> <li> <p>Purpose: Calculates the current number of visible nodes, visible edges, and orphan nodes, and updates the HTML elements accordingly.</p> </li> <li> <p>Steps in the Function:</p> </li> <li>Get All Nodes and Edges: Retrieve all nodes and edges from the DataSets.</li> <li>Filter Visible Nodes: Use <code>filter</code> to get nodes that are not hidden.</li> <li>Filter Visible Edges: Only include edges where both the <code>from</code> and <code>to</code> nodes are visible.</li> <li>Calculate Counts: Count the number of visible nodes and edges.</li> <li>Identify Orphan Nodes:<ul> <li>Create a <code>Set</code> of node IDs that are connected via visible edges.</li> <li>An orphan node is one that is visible but not included in the <code>connectedNodeIds</code> set.</li> </ul> </li> <li>Update HTML Elements: Set the <code>textContent</code> of the span elements to display the calculated counts.</li> </ul>"},{"location":"vis/legend-checkboxes/#step-3-calling-updatestatistics-appropriately","title":"Step 3.  Calling <code>updateStatistics()</code> Appropriately:","text":"<ul> <li>After Network Initialization:</li> </ul> <p><pre><code>// Call updateStatistics after the network is initialized\n        updateStatistics();\n</code></pre> -   Ensures that the statistics are accurate when the page first loads. -   Within <code>toggleGroup()</code> Function:</p> <pre><code>function toggleGroup(groupName) {\n// ... existing code ...\n  updateStatistics(); // Update statistics after toggling a group\n}`\n</code></pre> <ul> <li>Updates statistics whenever a group is toggled (shown or hidden).</li> <li>No Need to Call <code>updateStatistics()</code> in <code>checkAllGroups()</code> and <code>uncheckAllGroups()</code>:</li> <li>Since <code>toggleGroup()</code> is called for each group within these functions and <code>updateStatistics()</code> is called within <code>toggleGroup()</code>, it's unnecessary to call it again.</li> <li>This avoids redundant calculations and ensures efficiency.</li> </ul>"},{"location":"vis/legend-checkboxes/#how-it-works_1","title":"How It Works:","text":"<ul> <li>Initial Load:</li> <li>The statistics display the total number of nodes and edges in the network.</li> <li>Orphan nodes are calculated based on the current visibility of nodes and edges.</li> <li>When Nodes Are Hidden/Shown:</li> <li>Toggling checkboxes hides or shows nodes.</li> <li>Edges connected to hidden nodes are also hidden automatically by Vis.js.</li> <li>The <code>updateStatistics()</code> function recalculates the counts and updates the sidebar.</li> <li>Orphan Nodes:</li> <li>An orphan node is a visible node with no visible edges connected to it.</li> <li>As nodes or edges are hidden, the number of orphan nodes may increase.</li> </ul>"},{"location":"vis/legend-checkboxes/#testing-the-implementation_1","title":"Testing the Implementation:","text":"<ol> <li> <p>Check All Groups:</p> </li> <li> <p>Click \"Check All\" to ensure all nodes and edges are visible.</p> </li> <li>The statistics should display the total number of nodes and edges.</li> <li> <p>Orphan count should be <code>0</code> if all nodes are connected.</p> </li> <li> <p>Uncheck All Groups:</p> </li> <li> <p>Click \"Uncheck All\" to hide all nodes.</p> </li> <li> <p>Statistics should show <code>0</code> nodes, <code>0</code> edges, and <code>0</code> orphans.</p> </li> <li> <p>Toggle Individual Groups:</p> </li> <li> <p>Uncheck individual groups to hide specific nodes.</p> </li> <li>Statistics should update to reflect the current counts.</li> <li>Observe how the number of orphans changes as nodes become disconnected.</li> </ol>"},{"location":"vis/legend-checkboxes/#additional-notes_2","title":"Additional Notes:","text":"<ul> <li>Edge Visibility:</li> <li>Vis.js hides edges automatically when connected nodes are hidden.</li> <li> <p>Edges are only considered visible if both connected nodes are visible.</p> </li> <li> <p>Scalability:</p> </li> <li>The <code>updateStatistics()</code> function works dynamically with any number of nodes and edges.</li> <li> <p>If you add more nodes or edges, the statistics will adjust accordingly.</p> </li> <li> <p>Performance:</p> </li> <li>The use of <code>Set</code> for <code>connectedNodeIds</code> improves performance when checking for orphan nodes.</li> <li>Filtering and mapping functions are efficient for datasets of moderate size.</li> </ul>"},{"location":"vis/legend-checkboxes/#summary-of-dynamic-networks-statistics","title":"Summary of Dynamic Networks Statistics","text":"<p>By adding dynamic network statistics to the sidebar, users can gain insights into the structure and connectivity of the network at any given time. The statistics update automatically in response to user interactions, enhancing the interactivity and usefulness of the visualization.</p>"},{"location":"vis/legends/","title":"Learning Graph Legends","text":"<p>A legend is a key that shows you what different shapes, icons, images and colors imply in your learning graphs.  We will demo two ways to place a legend on your learning graph and each method has tradeoffs.</p> <p>Node Legend - which uses nodes in the upper left area to show the legend.  This legend tends to move around based on the scale of the graph layout.</p> <p>HTML Table Legend - which uses a HTML table in a CSS flexbox to display the legend.  The HTML table is usually placed in a border region such as a left-sidebar.  This allows you to collapse the sidebar with a toggle button (hamburger icon).</p>"},{"location":"vis/legends/#node-legend","title":"Node Legend","text":"<p>The node legend has the advantage that it can use exactly the same colors, shapes, icons and images as the nodes in the actual graph.</p> <p>Here is a good example of how this might look: </p> <p>Unfortunately, this legend can easily overlap with the actual graph network.</p> <p>Here is a bad example where the actual nodes overlap the legend. </p> <p>Sample of how node legends are use is at node-legend.js which was originally taken from the vis.js node legend example.</p>"},{"location":"vis/legends/#html-table-legend","title":"HTML Table Legend","text":"<p>HTML tables usually are located in a fixed position of the edge of a graph viewer. In the example above, we use a left-sidebar. They have the benefit of having a regular structure that is easy to align. They can also be configured to appear and disappear if the screen region is needed for viewing the full graph.</p>"},{"location":"vis/legends/#felxbox-layout","title":"Felxbox Layout","text":"<p>The flexbox layout strategy allows us to just put in an HTML table with an max value.  All the other region dimensions are calculated automatically with CSS.</p>"},{"location":"vis/legends/#explanation","title":"Explanation:","text":"<ul> <li><code>display: flex</code> on the <code>body</code> element allows <code>#sidebar</code> and <code>#main</code> to sit side by side.</li> <li><code>#sidebar</code> automatically resizes based on its content, constrained by <code>max-width</code>.</li> <li><code>#main</code> with <code>flex: 1</code> takes up the remaining available space.</li> </ul> <p>This approach avoids conflicts and should handle dynamic sizing for the sidebar smoothly. Here\u2019s an and example of the CSS using flexbox for layout control:</p> <pre><code>&lt;body&gt;\n    &lt;div id=\"sidebar\"&gt;\n        &lt;h3&gt;Legend Sidebar&lt;/h3&gt;\n        &lt;button id=\"toggle-button\" onclick=\"toggleSidebar()\"&gt;&amp;#9776;&lt;/button&gt;\n        &lt;table&gt;\n          &lt;!--  table data here --&gt;\n        &lt;/table&gt;\n    &lt;/div&gt;\n    &lt;div id=\"main\"&gt;\n        &lt;div id=\"mynetwork\"&gt;&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre> <pre><code>body {\n    font-family: Arial, Helvetica, sans-serif;\n    display: flex;\n}\n\n#sidebar {\n    width: auto; /* Automatically adjust width based on content in the table */\n    max-width: 300px; /* Set a maximum width to avoid excessive size */\n    padding: 5px; /* around the sidebar */\n    margin-right: 10px; /* Space between sidebar and main content */\n    box-sizing: border-box;\n}\n\n#main {\n    flex: 1; /* Takes up remaining space to the right */\n    padding: 10px;\n}\n\n#mynetwork {\n    width: 100%;\n    height: 700px;\n    background-color: aliceblue;\n    border: 1px solid lightgray;\n}\n</code></pre>"},{"location":"vis/legends/#toggle-sidebar","title":"Toggle Sidebar","text":"<p>Lab 6: Toggle Sidebar</p>"},{"location":"vis/legends/#node-legends","title":"Node Legends","text":"<p>https://jsfiddle.net/adgd87/szt7h6kv/19/</p>"},{"location":"vis/network-properties/","title":"Network Properties","text":"<p>We sometimes run into bugs with different versions of the vis.js network library. When we do have this problem, we have a challenge in that there is no function to tell us what version of vis.js we are running when the library is loaded.</p> <p>We also can't get the version from the JavaScript src string if we always use the latest version:</p> <pre><code>&lt;script type=\"text/javascript\" \n  src=\"https://unpkg.com/vis-network/standalone/umd/vis-network.min.js\"&gt;&lt;/script&gt;\n</code></pre> <p>To get around this problem, we have to visit the unpkg.com site and find the package JSON file.  Here is the current location of this file:</p> <p>https://unpkg.com/vis-network/package.json</p> <p>Here is an excerpt of that file:</p> <pre><code>{\n  \"name\": \"vis-network\",\n  \"version\": \"9.1.9\",\n  \"description\": \"A dynamic, browser-based visualization library.\",\n  \"homepage\": \"https://visjs.github.io/vis-network/\",\n  \"license\": \"(Apache-2.0 OR MIT)\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/visjs/vis-network.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/visjs/vis-network/issues\"\n  },\n  \"keywords\": [\n    \"vis\",\n    \"visualization\",\n    \"web based\",\n    \"browser based\",\n    \"typescript\",\n    \"javascript\",\n    \"chart\",\n    \"graph\",\n    \"network\",\n    \"browser\"\n  ],\n}\n</code></pre> <p>We can then use the following code to extract the version property</p> <pre><code>\"version\": \"9.1.9\",\n</code></pre> <pre><code>async function getVisVersion() {\n            try {\n                const response = await fetch('https://unpkg.com/vis-network/package.json');\n                if (response.ok) {\n                    const packageInfo = await response.json();\n                    return packageInfo.version;\n                } else {\n                    return 'Unknown (Failed to fetch version)';\n                }\n            } catch (error) {\n                console.error('Error fetching vis-network version:', error);\n                return 'Unknown (Error occurred)';\n            }\n        }\n\n        (async () =&gt; {\n            const version = await getVisVersion();\n            document.getElementById('vis-version').textContent = `vis.js version: ${version}`;\n        })();\n\n        function toggleSidebar() {\n            const sidebar = document.getElementById('sidebar-container');\n            sidebar.style.display = sidebar.style.display === 'none' ? 'block' : 'none';\n        }\n</code></pre> <p>Run The Get Vis Network Latest Version</p>"},{"location":"vis/node-enricher/","title":"Vis.js Node Enricher Example","text":""},{"location":"vis/node-enricher/#prompt","title":"Prompt","text":"<pre><code>I have a JSON file that represents the nodes and edges in a network graph. I would like you to generate a Python program that reads in this JSON file and returns it with one addition. If the node has a group of 1, I want you to add another property \"x\": -300. \n\nAll other elements in the JSON file should remain unchained. Here is a sample of the nodes: { \"nodes\": \\[ { \"id\": 1, \"label\": \"Ohm's Law\", \"group\": 1 }, { \"id\": 2, \"label\": \"Voltage\", \"group\": 1 }, { \"id\": 3, \"label\": \"Current\", \"group\": 1 }, { \"id\": 4, \"label\": \"Resistance\", \"group\": 1 }, { \"id\": 5, \"label\": \"Power\", \"group\": 1 }, { \"id\": 6, \"label\": \"Energy\", \"group\": 1 } You should return: \"nodes\": \\[ { \"id\": 1, \"label\": \"Ohm's Law\", \"group\": 1, \"x\": 0 } etc.\n</code></pre>"},{"location":"vis/node-enricher/#chatgpt-response","title":"ChatGPT Response","text":"<p>Certainly! Below is a Python program that accomplishes your requirements. This script reads a JSON file representing a network graph, adds an <code>\"x\": -300</code> property to each node with <code>\"group\": 1</code>, and writes the modified data back to a new JSON file. All other elements in the JSON remain unchanged.</p>"},{"location":"vis/node-enricher/#step-by-step-explanation","title":"Step-by-Step Explanation","text":"<ol> <li> <p>Import Necessary Modules:</p> <ul> <li><code>json</code>: To handle JSON data.</li> <li><code>sys</code>: To handle command-line arguments (optional, for flexibility).</li> <li> <p>Define the Functionality:</p> </li> <li> <p>Reading the JSON File: The script reads the input JSON file containing the network graph.</p> </li> <li>Modifying Nodes: It iterates through each node in the <code>\"nodes\"</code> list. If a node has <code>\"group\": 1</code>, it adds a new property <code>\"x\": -300</code> to that node.</li> <li>Writing the Modified JSON: The script writes the updated JSON data to an output file.</li> <li> <p>Usage:</p> </li> <li> <p>You can run the script from the command line, specifying the input and output file paths. If no arguments are provided, it defaults to <code>input.json</code> and <code>output.json</code>.</p> </li> </ul> </li> </ol>"},{"location":"vis/node-enricher/#python-code","title":"Python Code","text":"<pre><code>import json\nimport sys\n\ndef add_x_property(input_file, output_file):\n    try:\n        # Read the input JSON file\n        with open(input_file, 'r', encoding='utf-8') as f:\n            data = json.load(f)\n\n        # Check if 'nodes' key exists\n        if 'nodes' not in data:\n            print(f\"Error: The key 'nodes' was not found in {input_file}.\")\n            return\n\n        # Iterate through each node and add \"x\": -300 if group is 1\n        for node in data['nodes']:\n            if node.get('group') == 1:\n                node['x'] = -300\n\n        # Write the modified data to the output JSON file\n        with open(output_file, 'w', encoding='utf-8') as f:\n            json.dump(data, f, indent=4)\n\n        print(f\"Successfully wrote the modified JSON to {output_file}.\")\n\n    except FileNotFoundError:\n        print(f\"Error: The file {input_file} does not exist.\")\n    except json.JSONDecodeError:\n        print(f\"Error: The file {input_file} is not a valid JSON file.\")\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n\ndef main():\n    # Default input and output file names\n    input_file = 'input.json'\n    output_file = 'output.json'\n\n    # If command-line arguments are provided, use them\n    if len(sys.argv) == 3:\n        input_file = sys.argv[1]\n        output_file = sys.argv[2]\n    elif len(sys.argv) != 1:\n        print(\"Usage: python script.py [input_file output_file]\")\n        return\n\n    add_x_property(input_file, output_file)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"vis/node-enricher/#how-to-use-the-script","title":"How to Use the Script","text":"<ol> <li> <p>Save the Script:</p> <ul> <li>Save the above code to a file, for example, <code>modify_graph.py</code>.</li> <li> <p>Prepare Your JSON File:</p> </li> <li> <p>Ensure your JSON file (e.g., <code>input.json</code>) is properly formatted. Here's an example based on your sample:</p> <pre><code>json\nCopy code\n\n`{\n    \"nodes\": [\n        {\n            \"id\": 1,\n            \"label\": \"Ohm's Law\",\n            \"group\": 1\n        },\n        {\n            \"id\": 2,\n            \"label\": \"Voltage\",\n            \"group\": 1\n        },\n        {\n            \"id\": 3,\n            \"label\": \"Current\",\n            \"group\": 1\n        },\n        {\n            \"id\": 4,\n            \"label\": \"Resistance\",\n            \"group\": 1\n        },\n        {\n            \"id\": 5,\n            \"label\": \"Power\",\n            \"group\": 1\n        },\n        {\n            \"id\": 6,\n            \"label\": \"Energy\",\n            \"group\": 1\n        }\n    ],\n    \"edges\": [\n        // Your edge definitions here\n    ]\n}\n`\n</code></pre> </li> </ul> </li> <li> <p>Run the Script:</p> <ul> <li> <p>Open your terminal or command prompt.</p> </li> <li> <p>Navigate to the directory containing <code>modify_graph.py</code> and your <code>input.json</code>.</p> </li> <li> <p>Execute the script using Python. You can specify input and output files or use the defaults.</p> <p>Using Default File Names (<code>input.json</code> and <code>output.json</code>):</p> <pre><code>bash\nCopy code\n\n`python modify_graph.py\n`\n</code></pre> <p>Specifying Input and Output Files:</p> <pre><code>bash\nCopy code\n\n`python modify_graph.py your_input.json your_output.json\n`\n</code></pre> </li> </ul> </li> <li> <p>Check the Output:</p> <ul> <li> <p>After running the script, check the <code>output.json</code> file. Nodes with <code>\"group\": 1</code> will have an additional property <code>\"x\": -300</code>.</p> </li> <li> <p>Example Output:</p> <pre><code>json\nCopy code\n\n`{\n    \"nodes\": [\n        {\n            \"id\": 1,\n            \"label\": \"Ohm's Law\",\n            \"group\": 1,\n            \"x\": -300\n        },\n        {\n            \"id\": 2,\n            \"label\": \"Voltage\",\n            \"group\": 1,\n            \"x\": -300\n        },\n        {\n            \"id\": 3,\n            \"label\": \"Current\",\n            \"group\": 1,\n            \"x\": -300\n        },\n        {\n            \"id\": 4,\n            \"label\": \"Resistance\",\n            \"group\": 1,\n            \"x\": -300\n        },\n        {\n            \"id\": 5,\n            \"label\": \"Power\",\n            \"group\": 1,\n            \"x\": -300\n        },\n        {\n            \"id\": 6,\n            \"label\": \"Energy\",\n            \"group\": 1,\n            \"x\": -300\n        }\n    ],\n    \"edges\": [\n        // Your edge definitions here\n    ]\n}\n`\n</code></pre> </li> </ul> </li> </ol>"},{"location":"vis/node-enricher/#notes","title":"Notes","text":"<ul> <li>Error Handling: The script includes basic error handling for missing files and invalid JSON formats.</li> <li>Flexibility: You can specify different input and output files via command-line arguments.</li> <li>Extensibility: You can easily modify the script to add more properties or handle different conditions as needed.</li> </ul> <p>Feel free to customize the script further based on your specific requirements!</p> <p>o1-mini</p> <p>window.__oai_logHTML?window.__oai_logHTML():window.__oai_SSR_HTML=window.__oai_SSR_HTML||Date.now();requestAnimationFrame((function(){window.__oai_logTTI?window.__oai_logTTI():window.__oai_SSR_TTI=window.__oai_SSR_TTI||Date.now()}))</p> <p>ChatGPT can make mistakes. Check imp</p>"},{"location":"vis/physics-params/","title":"Physics Parameters","text":"<p>Run the MicroSim</p>"},{"location":"vis/physics-params/#prompt","title":"Prompt","text":"<pre><code>Create a vis.js program that demonstrates the different\nparameters in a physics model. Add horizontal sliders\nto change the physics parameters.\n</code></pre>"},{"location":"vis/physics-params/#response","title":"Response","text":"<p>ChatGPT o1-preview thought for 17 seconds</p> <p>Sure! Below is a vis.js program that demonstrates different physics parameters in a network visualization. You can adjust the parameters using horizontal sliders to see how they affect the network's behavior.</p>"},{"location":"vis/physics-params/#html-and-javascript-code","title":"HTML and JavaScript Code:","text":"<p>Save the following code in an <code>index.html</code> file and open it in a web browser.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;vis.js Physics Parameters Demo&lt;/title&gt;\n\n  &lt;script type=\"text/javascript\" src=\"https://unpkg.com/vis-network/standalone/umd/vis-network.min.js\"&gt;&lt;/script&gt;\n  &lt;style type=\"text/css\"&gt;\n    #network {\n      width: 800px;\n      height: 600px;\n      border: 1px solid lightgray;\n      margin-bottom: 20px;\n    }\n    .slider-container {\n      margin: 10px 0;\n    }\n    .slider-label {\n      display: inline-block;\n      width: 150px;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;div id=\"network\"&gt;&lt;/div&gt;\n\n&lt;div class=\"slider-container\"&gt;\n  &lt;label class=\"slider-label\" for=\"repulsion\"&gt;Repulsion (Node Distance):&lt;/label&gt;\n  &lt;input type=\"range\" id=\"repulsion\" min=\"50\" max=\"500\" value=\"100\" step=\"10\"&gt;\n  &lt;span id=\"repulsion-value\"&gt;100&lt;/span&gt;\n&lt;/div&gt;\n\n&lt;div class=\"slider-container\"&gt;\n  &lt;label class=\"slider-label\" for=\"gravity\"&gt;Central Gravity:&lt;/label&gt;\n  &lt;input type=\"range\" id=\"gravity\" min=\"0\" max=\"1\" value=\"0.3\" step=\"0.01\"&gt;\n  &lt;span id=\"gravity-value\"&gt;0.30&lt;/span&gt;\n&lt;/div&gt;\n\n&lt;div class=\"slider-container\"&gt;\n  &lt;label class=\"slider-label\" for=\"damping\"&gt;Damping:&lt;/label&gt;\n  &lt;input type=\"range\" id=\"damping\" min=\"0\" max=\"1\" value=\"0.09\" step=\"0.01\"&gt;\n  &lt;span id=\"damping-value\"&gt;0.09&lt;/span&gt;\n&lt;/div&gt;\n\n&lt;script type=\"text/javascript\"&gt;\n  // Create nodes and edges for the network\n  var nodes = new vis.DataSet([\n    {id: 1, label: 'Node 1'},\n    {id: 2, label: 'Node 2'},\n    {id: 3, label: 'Node 3'},\n    {id: 4, label: 'Node 4'},\n    {id: 5, label: 'Node 5'},\n    {id: 6, label: 'Node 6'},\n    {id: 7, label: 'Node 7'}\n  ]);\n\n  var edges = new vis.DataSet([\n    {from: 1, to: 2},\n    {from: 1, to: 3},\n    {from: 2, to: 4},\n    {from: 2, to: 5},\n    {from: 3, to: 6},\n    {from: 3, to: 7}\n  ]);\n\n  // Get the container element\n  var container = document.getElementById('network');\n\n  // Initial physics options\n  var physicsOptions = {\n    repulsion: {\n      centralGravity: 0.3,\n      nodeDistance: 100,\n      damping: 0.09\n    },\n    solver: 'repulsion'\n  };\n\n  // Initialize the network\n  var data = {nodes: nodes, edges: edges};\n  var options = {physics: physicsOptions};\n  var network = new vis.Network(container, data, options);\n\n  // Function to update physics options\n  function updatePhysics() {\n    network.setOptions({physics: physicsOptions});\n  }\n\n  // Event listeners for sliders\n  document.getElementById('repulsion').addEventListener('input', function () {\n    var value = parseInt(this.value);\n    document.getElementById('repulsion-value').innerText = value;\n    physicsOptions.repulsion.nodeDistance = value;\n    updatePhysics();\n  });\n\n  document.getElementById('gravity').addEventListener('input', function () {\n    var value = parseFloat(this.value).toFixed(2);\n    document.getElementById('gravity-value').innerText = value;\n    physicsOptions.repulsion.centralGravity = parseFloat(value);\n    updatePhysics();\n  });\n\n  document.getElementById('damping').addEventListener('input', function () {\n    var value = parseFloat(this.value).toFixed(2);\n    document.getElementById('damping-value').innerText = value;\n    physicsOptions.repulsion.damping = parseFloat(value);\n    updatePhysics();\n  });\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"vis/physics-params/#explanation","title":"Explanation:","text":"<ul> <li> <p>Nodes and Edges:</p> <ul> <li>We define a simple network with 7 nodes and connections (edges) between them.</li> <li>Nodes are labeled from \"Node 1\" to \"Node 7\".</li> <li>Edges create connections forming a small network graph.</li> </ul> </li> <li> <p>Physics Options:</p> <ul> <li>We initialize the physics options with default values:<ul> <li><code>centralGravity</code>: Attraction of nodes towards the center.</li> <li><code>nodeDistance</code>: Desired distance between nodes (affects repulsion).</li> <li><code>damping</code>: Reduces the velocity over time to stabilize the network.</li> </ul> </li> <li>We set the physics solver to <code>'repulsion'</code> for a force-directed layout.</li> <li> <p>Sliders:</p> </li> <li> <p>Three sliders allow users to adjust:</p> <ul> <li>Repulsion (Node Distance): How far apart nodes repel each other.</li> <li>Central Gravity: How strongly nodes are pulled toward the center.</li> <li>Damping: The rate at which movement slows down over time.</li> </ul> </li> <li>Each slider displays its current value next to it.</li> <li> <p>Updating Physics:</p> </li> <li> <p>When a slider is moved, an event listener updates the corresponding physics parameter.</p> </li> <li>The <code>network.setOptions()</code> method is called to apply the new physics settings.</li> <li>The network visualization updates in real-time to reflect changes.</li> <li> <p>Styling:</p> </li> <li> <p>Basic CSS styles define the size of the network container and layout of sliders.</p> </li> </ul> </li> </ul>"},{"location":"vis/physics-params/#how-to-use","title":"How to Use:","text":"<ol> <li> <p>Copy and Save the Code:</p> <ul> <li>Paste the code into a text editor and save it as <code>index.html</code>.</li> <li> <p>Open in a Web Browser:</p> </li> <li> <p>Double-click the <code>index.html</code> file to open it in your default web browser.</p> </li> <li> <p>Interact with the Sliders:</p> </li> <li> <p>Adjust the sliders for Repulsion, Central Gravity, and Damping.</p> </li> <li>Observe how the network graph rearranges itself based on the physics parameters.</li> </ul> </li> </ol>"},{"location":"vis/physics-params/#understanding-the-parameters","title":"Understanding the Parameters","text":"<ul> <li> <p>Repulsion (Node Distance):</p> <ul> <li>Higher values increase the distance nodes push away from each other.</li> <li>Lower values allow nodes to come closer together.</li> </ul> </li> <li> <p>Central Gravity:</p> <ul> <li>Higher values pull nodes towards the center more strongly.</li> <li>A value of <code>0</code> means no central gravity; nodes only interact based on repulsion.</li> </ul> </li> <li> <p>Damping:</p> <ul> <li>Controls how quickly nodes slow down after movement.</li> <li>Higher values make the network stabilize faster.</li> </ul> </li> </ul> <p>Feel free to experiment with different values to see how they affect the network's behavior. This interactive demo helps in understanding how physics parameters influence  force-directed graph layouts in vis.js.</p>"},{"location":"vis/templates/","title":"Vis.js Templates for Learning Graph","text":"<p>The following are a list of template files you can use to create your own learning graphs that embody the best practices we have learned.</p> <p>We begin with the simplest template and proceed to more complex versions.  If you are using generative AI tools, providing them with the simplest template for a working learning graph is a good first step.</p>"},{"location":"vis/templates/#indexmd-file","title":"Index.md file","text":"<pre><code>![Image Name](./image.png){ width=\"400\" }\n</code></pre> <pre><code>&lt;iframe src=\"../lab-01.html\" height=\"320px\" width=\"600px\"&gt;&lt;/iframe&gt;\n</code></pre> <pre><code>[Run the MicroSim Template](./template.html){ .md-button .md-button--primary }\n[Edit this MicroSim](https://editor.p5js.org/dmccreary/sketches/dJq4nTXE4)\n</code></pre>"},{"location":"vis/templates/#single-template-html-file","title":"Single Template HTML File","text":"<p>This is a very simple of a learning graph example for arithmetic that uses our best practices.</p> <p>Single HTML File Template</p> <p>Specifically you will see that:</p> <ol> <li>All nodes are associated with a group.</li> <li>All edges have an arrow on the \"to\" end.</li> <li>Foundation elements use a red box</li> <li>Goals use a gold star shape.</li> <li>The physics engine place all nodes on the graph.</li> <li>You can drag the central nodes around with both X and Y, but the foundation and goal nodes have a fixed horizontal position</li> </ol> <p>This example is ideal when you have a small example where you want to edit the HTML file directly and the CSS and JavaScript are imbedded directly in the HTML.</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;script type=\"text/javascript\" src=\"https://unpkg.com/vis-network/standalone/umd/vis-network.min.js\"&gt;&lt;/script&gt;\n    &lt;style type=\"text/css\"&gt;\n        body {\n            font-family: Arial, Helvetica, sans-serif;\n        }\n        #mynetwork {\n            width: 350px;\n            height: 200px;\n            background-color: aliceblue;\n            border: 1px solid silver;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=\"mynetwork\"&gt;&lt;/div&gt;\n  &lt;br/&gt;\n&lt;a href=\".\"&gt;Back to Lesson Plan&lt;/a&gt;\n&lt;script type=\"text/javascript\" delay&gt;\n\n    // create an array of nodes in groups\n    var nodes = new vis.DataSet([\n      // our goal node place on the right and fixed\n      { id: 1, label: \"Arithmetic\", color: \"gold\", shape: \"star\", size: 30, x: 200, y: 0, fixed: { x: true, y: false }, font: { size: 24 } },\n      // default is from the top to the bottom\n      { id: 2, label: \"Addition\", color: \"tan\", y: -200},\n      { id: 3, label: \"Subtraction\", color: \"tan\", y: -100},\n      { id: 4, label: \"Multiplication\", color: \"tan\", y: 100},\n      { id: 5, label: \"Division\", color: \"tan\", y: 200},\n      // our foundation node on the left\n      { id: 6, label: \"Numbers\", color: \"coral\", shape: \"box\", x: -200, y: 0, fixed: { x: true, y: false } }\n    ]);\n\n    var edges = new vis.DataSet([\n      { from: 1, to: 2},\n      { from: 1, to: 3},\n      { from: 1, to: 4},\n      { from: 1, to: 5},\n      { from: 2, to: 6},\n      { from: 3, to: 6},\n      { from: 4, to: 6},\n      { from: 5, to: 6}\n    ]);\n\n    // create a network\n    var container = document.getElementById('mynetwork');\n\n    // provide the data in the vis format\n    var data = {\n        nodes: nodes,\n        edges: edges\n    };\n\n    var options = {\n        edges: {\n            arrows: {\n                to: { enabled: true}\n            },     // Arrow at the destination\n            color: {\n                color: 'black',  // Set edge color to black\n                inherit: false     // Ensure color is applied to all edges explicitly\n            },\n            width: 2               // Set edge width to 2\n        },\n        physics: {\n            solver: 'forceAtlas2Based',\n            forceAtlas2Based: {\n                springLength: 80          // Higher value for larger spacing\n            }\n        }\n    };\n\n    // initialize your network!\n    var network = new vis.Network(container, data, options);\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"vis/templates/#single-file-template-with-legend","title":"Single File Template With Legend","text":"<p>This is another single-file HTML template file with the CSS and JavaScript embedded directly in the HTML.  The addition is a collapsible sidebar that displays the legend and graph statistics.</p> <p>Single HTML File With Legend</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;script type=\"text/javascript\" src=\"https://unpkg.com/vis-network/standalone/umd/vis-network.min.js\"&gt;&lt;/script&gt;\n    &lt;style type=\"text/css\"&gt;\n    body {\n      font-family: Arial, Helvetica, sans-serif;\n      display: flex;\n    }\n\n    #sidebar {\n        width: auto; /* Automatically adjust width based on content */\n        max-width: 300px; /* Set a maximum width to avoid excessive size */\n        padding: 2px;\n        margin-right: 5px; /* Space between sidebar and main content */\n        box-sizing: border-box;\n    }\n\n    #main {\n        flex: 1; /* Takes up remaining space */\n        padding: 5px;\n    }\n\n    #mynetwork {\n        width: 100%;\n        height: 700px;\n        background-color: aliceblue;\n        border: 1px solid lightgray;\n    }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"sidebar-container\"&gt;\n        &lt;button id=\"toggle-button\" onclick=\"toggleSidebar()\"&gt;&amp;#9776;&lt;/button&gt;\n\n    &lt;div id=\"sidebar\"&gt;\n        &lt;h3&gt;Legend Sidebar&lt;/h3&gt;\n        &lt;table&gt;\n            &lt;tr&gt;\n                &lt;td&gt;Foundation&lt;/td&gt;\n                &lt;td style=\"background-color: red; color: white;\"&gt;Red&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;Level 1&lt;/td&gt;\n                &lt;td style=\"background-color: orange;\"&gt;Orange&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;Level 2&lt;/td&gt;\n                &lt;td style=\"background-color: yellow;\"&gt;Yellow&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;Level 3&lt;/td&gt;\n                &lt;td style=\"background-color: green; color: white;\"&gt;Green&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;Level 4&lt;/td&gt;\n                &lt;td style=\"background-color: cyan;\"&gt;Cyan&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;Level 5&lt;/td&gt;\n                &lt;td style=\"background-color: blue; color: white;\"&gt;Blue&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;Level 6&lt;/td&gt;\n                &lt;td style=\"background-color: indigo; color: white;\"&gt;Indigo&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;Level 7&lt;/td&gt;\n                &lt;td style=\"background-color: violet;\"&gt;Violet&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;Level 8&lt;/td&gt;\n                &lt;td style=\"background-color: gray; color: white;\"&gt;Gray&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;Level 9&lt;/td&gt;\n                &lt;td style=\"background-color: brown; color: white;\"&gt;Brown&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;Goal&lt;/td&gt;\n                &lt;td style=\"background-color: lightgreen; color: black;\"&gt;LightGreen&lt;/td&gt;\n            &lt;/tr&gt;\n        &lt;/table&gt;\n    &lt;/div&gt;\n    &lt;/div&gt; &lt;!-- sidebar container--&gt;\n    &lt;div id=\"main\"&gt;\n        &lt;div id=\"mynetwork\"&gt;&lt;/div&gt;\n        &lt;br/&gt;\n        &lt;a href=\".\"&gt;Back to Lesson Plan&lt;/a&gt;\n    &lt;/div&gt;\n&lt;script type=\"text/javascript\"&gt;\n\n    // create an array of nodes in groups\n    var nodes = new vis.DataSet([\n      // our goal node place on the right and fixed\n      { id: 1, label: \"Arithmetic\", color: \"gold\", shape: \"star\", size: 50, x: 200, y: 0, fixed: { x: true, y: false }, font: { size: 24 } },\n      // default is from the top to the bottom\n      { id: 2, label: \"Addition\", color: \"tan\", y: -200},\n      { id: 3, label: \"Subtraction\", color: \"tan\", y: -100},\n      { id: 4, label: \"Multiplication\", color: \"tan\", y: 100},\n      { id: 5, label: \"Division\", color: \"tan\", y: 200},\n      // our foundation node on the left\n      { id: 6, label: \"Numbers\", color: \"coral\", shape: \"box\", x: -200, y: 0, fixed: { x: true, y: false } }\n    ]);\n\n    var edges = new vis.DataSet([\n      { from: 1, to: 2},\n      { from: 1, to: 3},\n      { from: 1, to: 4},\n      { from: 1, to: 5},\n      { from: 2, to: 6},\n      { from: 3, to: 6},\n      { from: 4, to: 6},\n      { from: 5, to: 6}\n    ]);\n\n    // create a network\n    var container = document.getElementById('mynetwork');\n\n    // provide the data in the vis format\n    var data = {\n        nodes: nodes,\n        edges: edges\n    };\n\n    var options = {\n        edges: {\n            arrows: {\n                to: { enabled: true}\n            },     // Arrow at the destination\n            color: {\n                color: 'black',  // Set edge color to black\n                inherit: false     // Ensure color is applied to all edges explicitly\n            },\n            width: 2               // Set edge width to 2\n        },\n        physics: {\n            solver: 'forceAtlas2Based',\n            forceAtlas2Based: {\n                springLength: 100          // Higher value for larger spacing\n            }\n        }\n    };\n\n    // initialize your network!\n    var network = new vis.Network(container, data, options);\n\n    function toggleSidebar() {\n        const sidebar = document.getElementById(\"sidebar\");\n        const mainContent = document.getElementById(\"main\");\n        const toggleButton = document.getElementById(\"toggle-button\");\n\n        if (sidebar.style.display === \"none\") {\n            sidebar.style.display = \"block\";\n            // toggleButton.textContent = \"\u2630\"; // Open icon\n            toggleButton.innerHTML = \"&amp;#9776;\"; // Hamburger menu icon (open state)\n\n            mainContent.style.marginLeft = \"auto\"; // Restore margin\n        } else {\n            sidebar.style.display = \"none\";\n            // toggleButton.textContent = \"\u2192\"; // Collapse icon\n            toggleButton.innerHTML = \"&amp;#8594;\"; // Right arrow (collapsed state)\n            mainContent.style.marginLeft = \"0\"; // Remove margin for full width\n        }\n    }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"}]}