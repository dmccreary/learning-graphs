{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Learning Graph","text":"<p>Welcome to the website for Learning Graphs.  Learning Graphs are concept dependency graphs that are used to:</p> <ol> <li>Understand the important concepts in a course and their dependencies</li> <li>Suggest learning paths to achieve learning objectives</li> <li>Serve as the core data structure for hyper-personalization of lesson plans by generative AI agents.</li> </ol> <p>Please see the About This Site for more details.</p> <p>Please contact me on LinkedIn</p> <p>Thanks! - Dan</p>"},{"location":"about/","title":"About the Learning Graphs Website","text":"<p>The goal of this website is to enable teaching the concepts around Learning Graphs.  It was inspired by the cyberpunk science fiction novel Diamond Age by Neal Stephenson.  In this novel, a child uses a tablet-like device that customizes stories to the needs of the child.  This form of highly-customized learning is our goal.  We believe that learning graphs are the core data structure that these intelligent learning agents will be built on.</p> <p>Learning Graphs are concept dependency graphs that are used to:</p> <ol> <li>Understand the important concepts in a course and their dependencies</li> <li>Suggest learning paths to achieve learning objectives</li> <li>Serve as the core data structure for hyper-personalization of lesson plans by generative AI agents.</li> </ol>"},{"location":"about/#course-learning-objectives","title":"Course Learning Objectives","text":"<p>Here are 10 learning objectives for a course on learning Concept Dependency Graphs (CDGs) using Bloom's Taxonomy, aligned with the use of Generative AI (GenAI) for analyzing course content, creating concept taxonomies, visualizing, editing, and personalizing lesson plans:</p>"},{"location":"about/#remembering","title":"Remembering:","text":"<ol> <li> <p>Identify the basic structure of Concept Dependency Graphs (CDGs) used to model concepts and their dependencies in a course.</p> </li> <li> <p>Example: Define the nodes and edges in a CDG and recognize them in different graphical representations.</p> </li> </ol>"},{"location":"about/#understanding","title":"Understanding:","text":"<ol> <li> <p>Explain how CDGs represent the relationships between course concepts and how they suggest learning paths based on these dependencies.</p> </li> <li> <p>Example: Describe how prerequisite concepts are connected to higher-level concepts within a CDG.</p> </li> </ol>"},{"location":"about/#applying","title":"Applying:","text":"<ol> <li> <p>Use Generative AI to generate concepts lists or use NLP frameworks to extract key concepts from course materials and generate a list of vertices (nodes) for building a CDG.</p> </li> <li> <p>Example: Apply AI tools to analyze a syllabus or textbook and identify core concepts.</p> </li> <li> <p>Apply vis.js (or similar tools) to visualize a Concept Dependency Graph for a given set of concepts and dependencies.</p> </li> <li> <p>Example: Use vis.js to create an interactive graph of course concepts and their dependencies.</p> </li> </ol>"},{"location":"about/#analyzing","title":"Analyzing:","text":"<ol> <li> <p>Analyze concept relationships using Generative AI to discover hidden dependencies that may not be immediately obvious from the course materials.</p> </li> <li> <p>Example: Use an AI agent to uncover indirect concept dependencies based on patterns found in text data.</p> </li> </ol>"},{"location":"about/#evaluating","title":"Evaluating:","text":"<ol> <li> <p>Evaluate the quality of a generated CDG in terms of completeness, accuracy, and alignment with learning objectives.</p> </li> <li> <p>Example: Critically assess a CDG created by AI for coverage of all key topics and concept dependencies.</p> </li> <li> <p>Assess personalized learning paths generated from a CDG, ensuring they meet the individual learning objectives of diverse student profiles.</p> </li> <li> <p>Example: Review AI-generated personalized lesson plans for different student backgrounds and adjust if needed.</p> </li> </ol>"},{"location":"about/#creating","title":"Creating:","text":"<ol> <li> <p>Use Generative AI to automatically generate a concept taxonomy for a course, organizing concepts into hierarchical categories that represent broader topics.</p> </li> <li> <p>Example: Create a hierarchical taxonomy of concepts in a data structures course using AI tools.</p> </li> <li> <p>Edit a CDG interactively to improve learning pathways, adding or removing dependencies between concepts based on AI suggestions or instructor insights.</p> </li> <li> <p>Example: Modify a CDG for a calculus course by adding missing concepts or removing unnecessary dependencies.</p> </li> <li> <p>Design intelligent AI agents that use CDGs to generate hyper-personalized lesson plans, adapting to each student's learning progress and needs.</p> </li> <li> <p>Example: Build an AI system that integrates with a Learning Management System (LMS) to continuously update personalized learning paths based on the student's mastery of concepts.</p> </li> </ol> <p>Each of these objectives integrates various levels of Bloom's Taxonomy (from remembering and understanding basic concepts to applying, analyzing, evaluating, and creating new knowledge) while leveraging Generative AI and CDGs to enhance the learning process.</p>"},{"location":"checklist/","title":"Site Checklist","text":"<ol> <li>Customize the fields in your mkdocs.yml file</li> <li>Configure Google Analytics to use the right site ID</li> <li>Make sure that your .gitignore file includes the <code>site</code> directory</li> <li>Test the build</li> <li>Make sure the Edit button appears</li> <li>Make sure that code color heightening renders correctly</li> <li>run <code>git config advice.addIgnoredFile false</code></li> </ol>"},{"location":"contact/","title":"Contact","text":"<p>Please contact me on LinkedIn</p> <p>Thanks! - Dan</p>"},{"location":"course-description/","title":"Course Description","text":"<p>Title: Customizing Learning Materials with Intelligent Agents</p> <p>In this course, we will learn how on-line content can be generated or quickly customized to the needs of individuals or small groups of students.  We begin with a discussion of learning concepts and the use of concept dependency graphs (CDGs) to model these concepts.  We then show how generative AI tools can be used to generate these concepts or review existing concepts graphs for suitability of learning objectives.  We then describe the process of creating taxonomies and ontologies that can be used with CDGs.  We cover topics of abstraction, clustering and graph algorithms such as graph traversal, search and dependency analysis.  Next we cover the topic of tools to visualize and navigate CDG and explore tools such as vis.js for visualizing CDGs.  Finally, we show how these data structures and algorithms are used together with intelligent agents to customize complex lesson plans for students.</p> <p>Prerequisites: </p> <p>Student should have access to the internet and be familiar with using a web browser and search engines.  Students should also have access to a generative AI tool such as ChatGPG.</p> <p>It is helpful but not required for students should have a background in data structures, teaching theory, lesson plans, curriculum development processes.</p>"},{"location":"glossary/","title":"Glossary of Terms","text":""},{"location":"glossary/#agent","title":"Agent","text":""},{"location":"glossary/#alternate-label","title":"Alternate Label","text":""},{"location":"glossary/#concept","title":"Concept","text":""},{"location":"glossary/#concept-dependency-graph","title":"Concept Dependency Graph","text":""},{"location":"glossary/#directed-graph","title":"Directed Graph","text":""},{"location":"glossary/#generative-ai","title":"Generative AI","text":""},{"location":"glossary/#hyperpersonalization","title":"HyperPersonalization","text":""},{"location":"glossary/#iso-definition","title":"ISO Definition","text":"<p>A term definition is considered to be consistent with ISO/IEC 11179 metadata registry guideline if it meets the following criteria:</p> <ol> <li>Precise</li> <li>Concise</li> <li>Distinct</li> <li>Non-circular</li> <li>Unencumbered with business rules</li> </ol>"},{"location":"glossary/#learning-graph","title":"Learning Graph","text":"<p>A network graph that stores learning Concepts and their dependencies.</p> <p>Learning graphs are a type of Directed Graphs where every node is a learning Concept and every edge is a concept dependency or prerequisite.</p>"},{"location":"glossary/#learning-objective","title":"Learning Objective","text":""},{"location":"glossary/#learning-path","title":"Learning Path","text":""},{"location":"glossary/#preferred-label","title":"Preferred Label","text":"<p>The preferred name of a Concept.</p> <p>In general, a concept has one and only one preferred name per language such as English, but a Concept may have many alternate labels.</p> <p>Within a learning graph, no two Concepts should have the same preferred name.</p>"},{"location":"how-we-built-this-site/","title":"How We Built This Site","text":"<p>This page describes how we built this website and some of  the rationale behind why we made various design choices.</p>"},{"location":"how-we-built-this-site/#python","title":"Python","text":"<p>MicroSims are about how we use generative AI to create animations and simulations.  The language of AI is Python.  So we wanted to create a site that could be easily understood by Python developers.</p>"},{"location":"how-we-built-this-site/#mkdocs-vs-docusaurus","title":"Mkdocs vs. Docusaurus","text":"<p>There are two main tools used by Python developers to write documentation: Mkdocs and Docusaurus.  Mkdocs is easier to use and more popular than Docusaurus. Docusaurus is also optimized for single-page applications. Mkdocs also has an extensive library of themes and plugins. None of us are experts in JavaScript or React. Based on our ChatGPT Analysis of the Tradeoffs we chose mkdocs for this site management.</p>"},{"location":"how-we-built-this-site/#github-and-github-pages","title":"GitHub and GitHub Pages","text":"<p>GitHub is a logical choice to store our  site source code and documentation.  GitHub also has a Custom GitHub Action that does auto-deployment if any files on the site change. We don't currently have this action enabled, but other teams can use this feature if they don't have the ability to do a local build with mkdocs.</p> <p>GitHub also has Issues,  Projects and releases that we can use to manage our bugs and tasks.</p> <p>The best practice for low-cost websites that have public-only content is GitHub Pages. Mkdocs has a command (<code>mkdocs gh-deploy</code>) that does deployment directly to GitHub Pages.  This was an easy choice to make.</p>"},{"location":"how-we-built-this-site/#github-clone","title":"GitHub Clone","text":"<p>If you would like to clone this repository, here are the commands:</p> <pre><code>mkdir projects\ncd projects\ngit clone https://github.com/dmccreary/microsims\n</code></pre>"},{"location":"how-we-built-this-site/#after-changes","title":"After Changes","text":"<p>After you make local changes you must do the following:</p> <pre><code># add the new files to a a local commit transaction\ngit add FILES\n# Execute the a local commit with a message about what and why you are doing the commit\ngit commit -m \"comment\"\n# Update the central GitHub repository\ngit push\n</code></pre>"},{"location":"how-we-built-this-site/#material-theme","title":"Material Theme","text":"<p>We had several options when picking a mkdocs theme:</p> <ol> <li>Mkdocs default</li> <li>Readthedocs</li> <li>Third-Party Themes See Ranking</li> </ol> <p>The Material Theme had 16K stars.  No other theme had over a few hundred. This was also an easy design decision.</p> <p>One key criterial was the social Open Graph tags so that when our users post a link to a simulation, the image of the simulation is included in the link.  Since Material supported this, we used the Material theme. You can see our ChatGPT Design Decision Analysis if you want to check our decision process.</p>"},{"location":"how-we-built-this-site/#enable-edit-icon","title":"Enable Edit Icon","text":"<p>To enable the Edit icon on all pages, you must add the edit_uri and the content.action.edit under the theme features area.</p> <pre><code>edit_uri: edit/master/docs/\n</code></pre> <pre><code>    theme:\n        features:\n            - content.action.edit\n</code></pre>"},{"location":"how-we-built-this-site/#conda-vs-venv","title":"Conda vs VENV","text":"<p>There are two choices for virtual environments.  We can use the native Python venv or use Conda.  venv is simle but is only designed for pure Python projects.  We imagine that this site could use JavaScript and other langauges in the future, so we picked Conda. There is nothing on this microsite that prevents you from using one or the other.  See the ChatGPT Analysis Here.</p> <p>Here is the conda script that we ran to create a new mkdocs environment that also supports the material social imaging libraries.</p> <pre><code>conda deactivate\nconda create -n mkdocs python=3\nconda activate mkdocs\npip install mkdocs \"mkdocs-material[imaging]\"\n</code></pre>"},{"location":"how-we-built-this-site/#mkdocs-commands","title":"Mkdocs Commands","text":"<p>There are three simple mkdoc commands we use.</p>"},{"location":"how-we-built-this-site/#local-build","title":"Local Build","text":"<pre><code>mkdocs build\n</code></pre> <p>This builds your website in a folder called <code>site</code>.  Use this to test that the mkdocs.yml site is working and does not have any errors.</p>"},{"location":"how-we-built-this-site/#run-a-local-server","title":"Run a Local Server","text":"<pre><code>mkdocs serve\n</code></pre> <p>This runs a server on <code>http://localhost:8000</code>. Use this to test the display formatting locally before you push your code up to the GitHub repo.</p> <pre><code>mkdoc gh-deploy\n</code></pre> <p>This pushes everything up to the GitHub Pages site. Note that it does not commit your code to GitHub.</p>"},{"location":"how-we-built-this-site/#mkdocs-material-social-tags","title":"Mkdocs Material Social Tags","text":"<p>We are using the Material Social tags.  This is a work in progress!</p> <p>Here is what we have learned.</p> <ol> <li>There are extensive image processing libraries that can't be installed with just pip.  You will need to run a tool like brew on the Mac to get the libraries installed.</li> <li>Even after <code>brew</code> installs the libraries, you have to get your environment to find the libraries.  The only way I could get that to work was to set up a local UNIX environment variable.</li> </ol> <p>Here is the brew command that I ran:</p> <pre><code>brew install cairo freetype libffi libjpeg libpng zlib\n</code></pre> <p>I then had to add the following to my ~/.zshrc file:</p> <pre><code>export DYLD_FALLBACK_LIBRARY_PATH=/opt/homebrew/lib\n</code></pre> <p>Note that I am running on a Mac with Apple silicon.  This means that the image libraries that brew downloads must be specific to the Mac Arm instruction set.</p> <ul> <li>Cover images for blog post #4364</li> <li>Discussion on overriding the Social Card Image</li> </ul>"},{"location":"license/","title":"Creative Commons License","text":"<p>All content in this repository is governed by the following license agreement:</p>"},{"location":"license/#license-type","title":"License Type","text":"<p>Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0 DEED)</p>"},{"location":"license/#link-to-license-agreement","title":"Link to License Agreement","text":"<p>https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en</p>"},{"location":"license/#your-rights","title":"Your Rights","text":"<p>You are free to:</p> <ul> <li>Share \u2014 copy and redistribute the material in any medium or format</li> <li>Adapt \u2014 remix, transform, and build upon the material</li> </ul> <p>The licensor cannot revoke these freedoms as long as you follow the license terms.</p>"},{"location":"license/#restrictions","title":"Restrictions","text":"<ul> <li>Attribution \u2014 You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.</li> <li>NonCommercial \u2014 You may not use the material for commercial purposes.</li> <li>ShareAlike \u2014 If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original.</li> <li>No additional restrictions \u2014 You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.</li> </ul> <p>Notices</p> <p>You do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation.</p> <p>No warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material.</p> <p>This deed highlights only some of the key features and terms of the actual license. It is not a license and has no legal value. You should carefully review all of the terms and conditions of the actual license before using the licensed material.</p>"},{"location":"references/","title":"Site References","text":"<ol> <li>mkdocs - https://www.mkdocs.org/ - this is our tool for building the website.  It converts Markdown into HTML in the <code>site</code> directory.</li> <li>mkdocs material theme - https://squidfunk.github.io/mkdocs-material/ - this is the theme for our site.  The theme adds the user interface elements that give our site the look and feel.  It also has the features such as social cards.</li> <li>GitHub Pages - https://pages.github.com/ - this is the free tool for hosting public websites created by mkdocs</li> <li>Markdown - https://www.mkdocs.org/user-guide/writing-your-docs/#writing-with-markdown - this is the format we use for text.  It allows us to have headers, lists, tables, links and images without learning HTML.</li> <li>Deploy Mkdocs GitHub Action - https://github.com/marketplace/actions/deploy-mkdocs - this is the tool we use to automatically build our site after edits are checked in with Git.</li> <li>Git Book - https://git-scm.com/book/en/v2 - a useful book on Git.  Just read the first two chapters to learn how to check in new code.</li> <li>Conda - https://conda.io/ - this is a command line tool that keeps our Python libraries organized for each project.</li> <li>VS Code - https://code.visualstudio.com/ - this is the integrated development environment we use to mange the files on our website.</li> <li>Markdown Paste - https://marketplace.visualstudio.com/items?itemName=telesoho.vscode-markdown-paste-image - this is the VS code extension we use to make sure we keep the markdown format generated by ChatGPT.</li> </ol>"},{"location":"chapters/","title":"Learning Graphs","text":"<ul> <li>Learning Graphs</li> <li>Concepts</li> <li>Concept Dependency</li> <li>Concept Taxonomies</li> <li>Displaying Graphs</li> <li>Vis.js</li> <li>Enumerating Concepts</li> <li>Generating Dependencies</li> <li>Generating Taxonomies</li> <li>Dependency Analysis</li> <li>Customizing Lesson Plans</li> <li>LMS Integration</li> <li>Building Intelligent Agents</li> </ul>"},{"location":"chapters/01-learning-graphs/","title":"Learning Graphs","text":"<p>In this chapter, we introduce you to the foundational data structures that are used by intelligent agents that build customized lesson plans for each student: The Learning Graph.</p>"},{"location":"chapters/01-learning-graphs/#what-are-learning-graphs","title":"What Are Learning Graphs?","text":"<p>Learning graphs are network graph that stores learning Concepts and their dependencies.</p> <p>Learning graphs are a type of Directed Graphs where every node is a learning Concept and every edge is a concept dependency or prerequisite.</p> <p>A Learning Graph is a powerful representation of knowledge used to model the relationships between different learning concepts and their dependencies. This graph-based approach enables a structured, visual way to map out the sequence in which learners need to acquire knowledge, making it particularly effective for hypercustomized lesson plan generation.</p> <p>In essence, a learning graph is a type of directed graph where every node represents a learning concept, and each directed edge signifies a prerequisite relationship between two concepts. By modeling the learning process as a graph, we can identify the optimal path a learner should follow to master a specific topic.</p>"},{"location":"chapters/01-learning-graphs/#why-learning-graphs-matter","title":"Why Learning Graphs Matter","text":"<p>Learning graphs offer several key advantages when designing personalized learning paths:</p> <ul> <li>Clarity in Concept Dependencies: They make the relationships between concepts explicit, ensuring learners acquire foundational knowledge before advancing to more complex topics.</li> <li>Adaptive Learning Paths: By analyzing the structure of the graph, we can create tailored lesson plans for individual learners, focusing on the gaps in their knowledge while skipping over concepts they've already mastered.</li> <li>Flexibility and Scalability: Learning graphs are highly flexible and can scale across different subjects and educational levels, from elementary school topics to advanced technical subjects.</li> </ul>"},{"location":"chapters/01-learning-graphs/#structure-of-a-learning-graph","title":"Structure of a Learning Graph","text":"<p>A learning graph is composed of two primary elements:</p> <ul> <li>Nodes (Concepts): Each node represents a distinct learning concept. These could range from fundamental principles, like \"Ohm's Law\" in an electrical circuits course, to more complex topics like \"Neural Networks\" in a machine learning course.</li> <li>Edges (Prerequisites): Each directed edge represents a dependency or prerequisite. For example, a concept such as \"Electric Current\" must be understood before a learner can grasp \"Circuit Resistance.\"</li> </ul> <p>  A diagram showing 5-6 nodes connected by directed edges, illustrating a simple learning path where each node depends on the previous one. For instance, concepts related to mathematics, starting with \"Basic Algebra\" leading to \"Linear Equations\" and ending with \"Quadratic Functions.\" </p>"},{"location":"chapters/01-learning-graphs/#types-of-learning-graphs","title":"Types of Learning Graphs","text":"<p>Learning graphs can take on various forms depending on the complexity of the learning domain and the learner's background.</p>"},{"location":"chapters/01-learning-graphs/#linear-graph","title":"Linear Graph**:","text":"<p>In this form, each concept has exactly one prerequisite. This structure is suitable for topics that build incrementally without divergence, such as learning how to assemble a robot where part order is critical. In this lesson, each step depends on the prior step being completed before it can begin.</p> <ol> <li>Open Box</li> <li>Confirm Part List</li> <li>Attach Motor Chassis</li> <li>Attach Wheels to Chassis</li> <li>Attach Battery to Chassis</li> <li>Mount Microcontroller</li> <li>Mount Sensors</li> <li>Connect Microcontroller</li> <li>Upload Code to Microcontroller</li> <li>Test the Robot</li> </ol>"},{"location":"chapters/01-learning-graphs/#branching-graph","title":"Branching Graph","text":"<p>A more complex form where certain concepts can lead to multiple others. For example, mastering \"Statistics\" may be a prerequisite for both \"Data Science\" and \"Machine Learning.\"</p> <p>Example:</p> <ol> <li>Learn Python</li> <li> <p>Use </p> </li> <li> <p>Converging Graph: This graph structure occurs when multiple prerequisite concepts lead to the mastery of a single, more advanced concept. For instance, mastering both \"Trigonometry\" and \"Algebra\" may be required before understanding \"Calculus.\"</p> </li> </ol>"},{"location":"chapters/01-learning-graphs/#figure-suggestion","title":"Figure Suggestion:","text":"<ol> <li>Branching Graph Example: A diagram showing nodes with multiple paths branching out from a single node, illustrating how different branches of learning lead to diverse advanced topics.</li> </ol>"},{"location":"chapters/01-learning-graphs/#practical-applications-of-learning-graphs","title":"Practical Applications of Learning Graphs","text":"<ol> <li> <p>Course Design and Planning: Educators can use learning graphs to map out entire courses, ensuring the logical progression of topics and making it easy to identify areas where students might struggle based on their gaps in prerequisite knowledge.</p> </li> <li> <p>Personalized Learning Paths: In personalized education, learning graphs allow for dynamic adjustment of lesson plans based on an individual's current knowledge. When a learner demonstrates proficiency in a specific concept, they can immediately proceed to the next dependent concept.</p> </li> <li> <p>Assessment and Remediation: Learning graphs are particularly useful in assessment-driven learning environments. By pinpointing exactly where a student is struggling, educators can focus on reinforcing specific concepts without re-teaching the entire curriculum.</p> </li> </ol>"},{"location":"chapters/01-learning-graphs/#leveraging-learning-graphs-in-hypercustomized-lesson-plans","title":"Leveraging Learning Graphs in Hypercustomized Lesson Plans","text":"<p>When creating hypercustomized lesson plans, learning graphs provide the foundational structure to ensure that each student receives the exact lessons they need, in the proper sequence. By identifying where a learner is within the graph, lesson plans can be dynamically generated to either:</p> <ul> <li>Focus on filling gaps in prerequisite knowledge</li> <li>Accelerate the learner through concepts they have already mastered</li> <li>Present appropriate challenges based on the learner's current level</li> </ul> <p>This approach not only enhances learning efficiency but also keeps students engaged by delivering content that is neither too difficult nor too easy.</p>"},{"location":"chapters/01-learning-graphs/#figure-suggestion_1","title":"Figure Suggestion:","text":"<ol> <li>Customized Learning Path: A learning graph with certain nodes highlighted, showing how an individualized lesson path is formed by skipping over mastered concepts and focusing on specific prerequisites.</li> </ol>"},{"location":"chapters/01-learning-graphs/#challenges-in-designing-learning-graphs","title":"Challenges in Designing Learning Graphs","text":"<p>While learning graphs offer great benefits, there are some challenges in creating and maintaining them:</p> <ul> <li> <p>Conceptual Granularity: Deciding the appropriate level of granularity for concepts can be difficult. Too many fine-grained concepts may overcomplicate the graph, while too few might overlook essential nuances in learning.</p> </li> <li> <p>Dynamic Changes: As educational methods and content evolve, learning graphs need to be adaptable to accommodate new concepts or altered dependencies.</p> </li> </ul>"},{"location":"chapters/01-learning-graphs/#conclusion","title":"Conclusion","text":"<p>Learning graphs are an essential tool for structuring educational content and designing hypercustomized lesson plans. By representing concepts and their dependencies as a directed graph, educators can ensure that learners progress through material in an optimal, personalized manner. In the next chapter, we will delve deeper into what constitutes a \"Concept\" and how it plays a role in the overall structure of a learning graph.</p>"},{"location":"chapters/01-learning-graphs/#figure-suggestion_2","title":"Figure Suggestion:","text":"<ol> <li>Advanced Learning Graph: A more detailed network graph with multiple branching paths and dependencies, showing how a complex subject area might be organized in a learning graph format.</li> </ol> <p>4o</p> <p>window.__oai_logHTML?window.__oai_logHTML():window.__oai_SSR_HTML=window.__oai_SSR_HTML||Date.now();requestAnimationFrame((function(){window.__oai_logTTI?window.__oai_logTTI():window.__oai_SSR_TTI=window.__oai_SSR_TTI||Date.now()}))</p>"},{"location":"chapters/02-concepts/","title":"Concepts","text":"<p>In this course, it is important to give the term \"concept\" a precise definition.  Borrowing from the World-Wide-Web (W3C) standard for storing knowledge (SKOS), here is the definition for the term \"concept\" they use:</p> <p>SKOS Definition of Concept: A unit of thought, an idea, or a notion, which is considered as an atomic unit of meaning within a given context.</p> <p>This is a broad definition and to make it a little more useful, we will add one additional property: let's require concepts to have a name.  We also refine \"given context\" to a specific learning context such as a course or curriculum.  Here is the full definition we can use for this course:</p> <p>Course Definition of Concept: A named unit of thought, such as an idea or notion, which is considered as an atomic unit of meaning within a given learning context.</p> <p>In general, think of opening a high-school or college textbook and looking at the index at the back of the book.  Each item in the index is typically a concept in that course.  If the authors for the book think that it is important enough, they will list it in the index.</p> <p>There are certainly concepts that don't have names.  Our neocortex stores around 82 billion neurons and LLMs have trillions of neuron-like structures in their neural networks.  Studies have shown that some LLM models can enumerate around 20 million named concepts.  But for all practical purposes, in this course all concepts have a name.  Technically, the primary name given to a concept is called a Preferred Label. If a concept has other names they are called Alternate Labels</p>"},{"location":"chapters/02-concepts/#how-many-concepts-in-a-high-school-course","title":"How Many Concepts in a High School Course?","text":"<p>The number of concepts covered in a typical high-school course can vary significantly depending on the subject, the curriculum, and the level of depth expected. However, a general estimate can be made.  In this analysis, we will use the term \"core concept\" as being a concept that is introduced within a course, has a clear name, and is used consistency across many educational systems.</p> <p>The number of core concepts introduce in a course also varies by subject area.  Here are some examples.</p> <ol> <li> <p>Mathematics: A high school algebra or geometry course might cover around 100 to 150 key concepts. These include foundational ideas such as solving equations, graphing functions, and understanding geometric proofs. Advanced courses like calculus might introduce 50 to 100 additional, more specialized concepts.</p> </li> <li> <p>Science: In a typical biology, chemistry, or physics course, students might learn around 200-300 major concepts. For example, a biology course might introduce cell structure, genetics, ecosystems, and evolution, while a chemistry course could cover atomic theory, chemical reactions, and thermodynamics. Physics might introduce concepts related to motion, energy, and electricity.</p> </li> <li> <p>Literature/Language Arts: An English literature course may cover 50 to 100 major literary concepts, such as themes, symbolism, metaphor, and narrative structure. It might also include concepts related to specific literary movements, authors, and genres.</p> </li> <li> <p>Social Studies: A history or civics course may focus on 150-200 key concepts, including historical events, political theories, government structures, and cultural movements.</p> </li> </ol> <p>Each course typically emphasizes a set of core concepts while also encouraging students to connect these ideas with broader themes or related areas of study. The number of concepts can be thought of as the core building blocks students are expected to understand and apply by the end of the course.</p> <p>These estimates are drawn from educational standards such as the Common Core and subject-specific curriculum guides from various educational boards.</p>"},{"location":"chapters/02-concepts/#counting-indexed-concepts","title":"Counting Indexed Concepts","text":"<p>The number of concepts typically listed in the index or glossary at the back of a high-school or college textbook varies depending on the subject and depth of the material. However, here are general estimates:</p> <ol> <li> <p>High-School Textbooks:</p> <ul> <li>Science (e.g., Biology, Chemistry): 200--400 key terms and concepts. For instance, a biology textbook may include concepts like \"photosynthesis,\" \"cell division,\" and \"genetic inheritance.\"</li> <li>Mathematics (e.g., Algebra, Geometry): Around 100--250 concepts, including \"quadratic equations,\" \"trigonometric functions,\" and \"coordinate geometry.\"</li> <li>Literature/Language Arts: 100--200 literary terms, including concepts such as \"alliteration,\" \"foreshadowing,\" and \"narrative structure.\"</li> <li> <p>College Textbooks:</p> </li> <li> <p>Introductory Courses (e.g., Psychology, Economics, Physics): 300--500 concepts, covering key definitions, theories, and models. For example, an introductory psychology textbook might list terms like \"cognitive dissonance,\" \"classical conditioning,\" and \"neuroplasticity.\"</p> </li> <li>Advanced Courses (e.g., Organic Chemistry, Advanced Calculus): 400--600 concepts, especially in subjects with extensive technical terminology.</li> </ul> </li> </ol> <p>In most textbooks, the index or glossary is a critical tool for students to reference important concepts, which are often highlighted in bold or italic throughout the text. The number of concepts aligns with the complexity of the course and the learning outcomes set by educational standards.</p>"},{"location":"chapters/03-concept-dependency/","title":"Concept Dependency","text":""},{"location":"chapters/04-concept-taxonomies/","title":"Concept Taxonomies and Ontologies","text":""},{"location":"chapters/05-displaying-graphs/","title":"Displaying Graphs","text":""},{"location":"chapters/05-displaying-graphs/#laying-out-dependency-graphs","title":"Laying out Dependency Graphs","text":""},{"location":"chapters/05-displaying-graphs/#circles-arrow-and-labels","title":"Circles, Arrow and Labels","text":""},{"location":"chapters/05-displaying-graphs/#force-directed-graphs","title":"Force Directed Graphs","text":""},{"location":"chapters/05-displaying-graphs/#adjusting-distances","title":"Adjusting Distances","text":""},{"location":"chapters/05-displaying-graphs/#left-to-right-and-top-down-hierarcies","title":"Left to Right and Top Down Hierarcies","text":""},{"location":"chapters/05-displaying-graphs/#pinning-foundational-concepts-and-goals","title":"Pinning Foundational Concepts and Goals","text":""},{"location":"chapters/05-displaying-graphs/#using-colors-and-shapes","title":"Using Colors and Shapes","text":""},{"location":"chapters/05-displaying-graphs/#using-size-and-borders","title":"Using Size and Borders","text":""},{"location":"chapters/05-displaying-graphs/#placing-labels-and-using-abbreviations","title":"Placing Labels and Using Abbreviations","text":""},{"location":"chapters/05-displaying-graphs/#abstraction-and-clustering","title":"Abstraction and Clustering","text":""},{"location":"chapters/05-displaying-graphs/#leveraging-taxonomies-and-ontologies","title":"Leveraging Taxonomies and Ontologies","text":""},{"location":"chapters/05-displaying-graphs/#_1","title":"Displaying Graphs","text":""},{"location":"chapters/15-dependency-analysis/","title":"Dependency Analysis","text":"<p>In this chapter we will look at algorithms that help find all the dependencies of a given concept within a course learning graph.</p> <p>This is not just finding all the direct dependencies of a concept. It is also about finding the dependencies of the dependencies etc. The number of levels we search is called the number of \"hops\" in the dependency graph.</p>"},{"location":"chapters/17-lms-integration/","title":"Integrating with LMSs","text":""},{"location":"prompts/","title":"Prompts to Create Learning Graphs","text":""},{"location":"prompts/#concept-enumeration","title":"Concept Enumeration","text":""},{"location":"vis/","title":"Vis Tutorials","text":""},{"location":"vis/#basic-properties-of-nodes-and-edges","title":"Basic Properties of Nodes and Edges","text":""},{"location":"vis/#lab-1","title":"Lab 1","text":"<p>Lab 1</p>"},{"location":"vis/#lab-2-json","title":"Lab 2 - JSON","text":"<p>Learn the JSON format</p> <p>Lab 2</p>"},{"location":"vis/#lab-3-node-properties","title":"Lab 3 - Node Properties","text":"<p>Learn the Properties of a Node</p> <p>Lab 3</p>"},{"location":"vis/#lab-4-custom-shapes","title":"Lab 4 - Custom Shapes","text":"<p>Lab 4 - Custom Shapes</p>"},{"location":"vis/#examples","title":"Examples","text":"<p>Concept Dependency Graph</p>"},{"location":"vis/#graph-editor","title":"Graph Editor","text":"<p>Learn how to create an interactive graph editor</p> <p>Graph Editor</p>"},{"location":"vis/#csv-reader","title":"CSV-Reader","text":"<p>CSV Reader</p>"},{"location":"vis/#node-enricher","title":"Node Enricher","text":"<p>Node Enricher</p>"},{"location":"vis/concept-dependency-graph/","title":"Concept Dependency Graph","text":"<p>SampleConcept Dependency Graph for Ohm's Law</p> <p>A Concept Dependency Graph is a specific type of graph that has the following properties.</p> <ol> <li>Each Concept is represented by a vertex and all concepts have a short name called the \"label\".</li> <li>By default circles are used to represent concepts in a graph.</li> <li>To learn a new Concept, you must understand the prerequisite concepts called the dependant concepts.</li> <li>Concepts each have a DEPENDS_ON directed link that points to what other Concepts any concept depends on.  To keep the chart ink smaller, the abbreviation \"dep\" is often used.</li> <li>A course is a collection of Concepts that must be learned in an approximate order.</li> <li>Every course has a collection of background foundational concepts that should be mastered before the student takes the course.</li> <li>Concepts that are prerequisites for the course often appear on the left edge of the concept graph at a location of x=-300.</li> <li>Advanced concepts often appear on the right at x=300</li> <li>By convention, concrete physical concepts are lower in the graph and more abstract mathematical concepts are initially located toward the top of the graph.</li> <li>When we want to focus on a concept, that concept is displayed in a larger font.</li> </ol>"},{"location":"vis/concept-dependency-graph/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Generate a vis.js application that shows what concepts must\nbe mastered before you understand Ohm's Law.\n\nUse this graph data:\n\n// create an array with nodes\n    var nodes = new vis.DataSet([\n        {id: 1, label: \"Ohm's Law\", color: \"wheat\", size: 150, x: 150, y: 0, fixed: true,font: { size: 24 }, color: {border: \"black\"}},\n        {id: 2, label: 'Voltage', color: \"tan\"},\n        {id: 3, label: 'Current', color: \"tan\"},\n        {id: 4, label: 'Resistance', color: \"tan\"},\n        {id: 5, label: 'Linear Equations', color: \"coral\", shape: \"box\", x: -150, y: 0, fixed: true}\n    ]);\n\n    // create an array with edges\n    var edges = new vis.DataSet([\n        {from: 1, to: 2, arrows: 'to', label: 'DEPENDS_ON' },\n        {from: 1, to: 3, arrows: 'to', label: 'DEPENDS_ON' },\n        {from: 1, to: 4, arrows: 'to', label: 'DEPENDS_ON' },\n        {from: 1, to: 5, arrows: 'to', label: 'DEPENDS_ON' }\n    ]);\n</code></pre>"},{"location":"vis/lab-01/","title":"Vis Tutorial 1","text":"<p>Lab 1</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;script type=\"text/javascript\" src=\"https://unpkg.com/vis-network/standalone/umd/vis-network.min.js\"&gt;&lt;/script&gt;\n\n    &lt;style type=\"text/css\"&gt;\n        #mynetwork {\n            width: 600px;\n            height: 400px;\n            border: 1px solid lightgray;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"mynetwork\"&gt;&lt;/div&gt;\n&lt;a href=\"lab-01\"&gt;Back to Lesson&lt;/a&gt;\n&lt;script type=\"text/javascript\"&gt;\n    // create an array with nodes\n    var nodes = new vis.DataSet([\n        {id: 1, label: 'Node 1'},\n        {id: 2, label: 'Node 2'},\n        {id: 3, label: 'Node 3'},\n        {id: 4, label: 'Node 4'},\n        {id: 5, label: 'Node 5'}\n    ]);\n\n    // create an array with edges\n    var edges = new vis.DataSet([\n        {from: 1, to: 3},\n        {from: 1, to: 2},\n        {from: 2, to: 4},\n        {from: 2, to: 5}\n    ]);\n\n    // create a network\n    var container = document.getElementById('mynetwork');\n\n    // provide the data in the vis format\n    var data = {\n        nodes: nodes,\n        edges: edges\n    };\n    var options = {};\n\n    // initialize your network!\n    var network = new vis.Network(container, data, options);\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"vis/lab-02/","title":"Lab 2: JSON","text":"<p>Run Lab 2</p>"},{"location":"vis/lab-02/#prompt","title":"Prompt","text":"<pre><code>Refactor the attached vis.js program to read the data\nfrom a file called \"lab-02.json\" and store\nthe JavaScript in a separate file called lab-02.js\n</code></pre>"},{"location":"vis/lab-02/#chatgpt-4o-response","title":"ChatGPT 4o Response","text":"<p>To refactor your <code>lab-01.html</code> file, we can follow these steps:</p> <ol> <li>Move the JavaScript code to a separate file called <code>lab-02.js</code>.</li> <li>Fetch the node and edge data from a separate <code>lab-02.json</code> file.</li> <li>Refactor the HTML to reference the new JavaScript file and load the JSON data dynamically.</li> </ol> <p>Here is how we can structure the files:</p>"},{"location":"vis/lab-02/#refactored-html-lab-01html","title":"Refactored HTML (<code>lab-01.html</code>):","text":"<pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;script type=\"text/javascript\" src=\"https://unpkg.com/vis-network/standalone/umd/vis-network.min.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"network.js\"&gt;&lt;/script&gt;\n\n    &lt;style type=\"text/css\"&gt;\n        #mynetwork {\n            width: 600px;\n            height: 400px;\n            border: 1px solid lightgray;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"mynetwork\"&gt;&lt;/div&gt;\n&lt;a href=\"lab-01\"&gt;Back to Lesson&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"vis/lab-02/#javascript-lab-02js","title":"JavaScript (<code>lab-02.js</code>):","text":"<pre><code>// Fetch data from the JSON file\nfetch('lab-02.json')\n    .then(response =&gt; response.json())\n    .then(data =&gt; {\n        // Parse the data from JSON\n        const nodes = new vis.DataSet(data.nodes);\n        const edges = new vis.DataSet(data.edges);\n\n        // Create a network\n        const container = document.getElementById('mynetwork');\n        const networkData = {\n            nodes: nodes,\n            edges: edges\n        };\n        const options = {};\n\n        // Initialize the network\n        const network = new vis.Network(container, networkData, options);\n    })\n    .catch(error =&gt; console.error('Error loading the network data:', error));\n</code></pre>"},{"location":"vis/lab-02/#json-file-lab-01json","title":"JSON File (<code>lab-01.json</code>):","text":"<pre><code>{\n    \"nodes\": [\n        {\"id\": 1, \"label\": \"Node 1\"},\n        {\"id\": 2, \"label\": \"Node 2\"},\n        {\"id\": 3, \"label\": \"Node 3\"},\n        {\"id\": 4, \"label\": \"Node 4\"},\n        {\"id\": 5, \"label\": \"Node 5\"}\n    ],\n    \"edges\": [\n        {\"from\": 1, \"to\": 3},\n        {\"from\": 1, \"to\": 2},\n        {\"from\": 2, \"to\": 4},\n        {\"from\": 2, \"to\": 5}\n    ]\n}\n</code></pre>"},{"location":"vis/lab-02/#explanation","title":"Explanation:","text":"<ul> <li>The HTML file now only includes the necessary script tags and references the new JavaScript file (<code>network.js</code>).</li> <li>The <code>network.js</code> script fetches the data from <code>lab-01.json</code> and initializes the network once the data is loaded.</li> <li>The <code>lab-01.json</code> file contains the nodes and edges in a format that can be easily fetched and parsed in JavaScript.</li> </ul> <p>With this refactor, your data can now be dynamically loaded from the JSON file, and your JavaScript code is cleanly separated from the HTML.</p>"},{"location":"vis/lab-03/","title":"Vis Tutorial Lesson 3: Node Properties","text":"<p>Run Lab 3 HTML</p> <p>In this lab we learn how to change the properties of each node including:</p> <ol> <li>The shape</li> <li>The background color</li> <li>The size</li> <li>The font color</li> </ol>"},{"location":"vis/lab-03/#prompt","title":"Prompt","text":"<pre><code>Refactor the attached vis.js to add color and shape to each vertex.\n\nNode 1: red triangle\nNode 2: orange square\nNode 3: gold circle\nNode 4: green big box\nNode 5: blue star\nNode 6: purple ellipse\n</code></pre>"},{"location":"vis/lab-03/#chatgpt-o4-response","title":"ChatGPT o4 Response","text":"<p>To refactor the <code>lab-02</code> files to add color and shape to each vertex, we will modify the <code>lab-02.json</code> to include the color and shape properties for each node. Here's how we can adjust the structure:</p>"},{"location":"vis/lab-03/#updated-lab-03json","title":"Updated <code>lab-03.json</code>:","text":"<pre><code>{\n    \"nodes\": [\n        {\"id\": 1, \"label\": \"Node 1\", \"color\": \"red\", \"shape\": \"triangle\"},\n        {\"id\": 2, \"label\": \"Node 2\", \"color\": \"orange\", \"shape\": \"square\"},\n        {\"id\": 3, \"label\": \"Node 3\", \"color\": \"gold\", \"shape\": \"circle\"},\n        {\"id\": 4, \"label\": \"Node 4\", \"color\": \"green\", \"shape\": \"box\", \"size\": 50},\n        {\"id\": 5, \"label\": \"Node 5\", \"color\": \"blue\", \"shape\": \"star\"},\n        {\"id\": 6, \"label\": \"Node 6\", \"color\": \"purple\", \"shape\": \"ellipse\"}\n    ],\n    \"edges\": [\n        {\"from\": 1, \"to\": 3},\n        {\"from\": 1, \"to\": 2},\n        {\"from\": 2, \"to\": 4},\n        {\"from\": 2, \"to\": 5},\n        {\"from\": 3, \"to\": 6}\n    ]\n}\n</code></pre>"},{"location":"vis/lab-03/#updated-lab-03js","title":"Updated <code>lab-03.js</code>:","text":"<p>You don't need to change much in the JavaScript file, but here it is for completeness.</p> <pre><code>// Fetch data from the JSON file\nfetch('lab-03.json')\n    .then(response =&gt; response.json())\n    .then(data =&gt; {\n        // Parse the data from JSON\n        const nodes = new vis.DataSet(data.nodes);\n        const edges = new vis.DataSet(data.edges);\n\n        // Create a network\n        const container = document.getElementById('mynetwork');\n        const networkData = {\n            nodes: nodes,\n            edges: edges\n        };\n        const options = {};\n\n        // Initialize the network\n        const network = new vis.Network(container, networkData, options);\n    })\n    .catch(error =&gt; console.error('Error loading the network data:', error));\n</code></pre>"},{"location":"vis/lab-03/#changes-explained","title":"Changes explained:","text":"<ul> <li>Each node now has a <code>color</code> and <code>shape</code> property. These properties allow you to customize the appearance of each node.</li> <li>For node 4, a larger size is specified with the <code>size</code> property to make it a \"big box.\"</li> <li>The edges are unchanged but include a new edge between nodes 3 and 6 to reflect the inclusion of Node 6.</li> </ul> <p>When you run this, each node will now have the specified color and shape, creating a visually distinct network.</p>"},{"location":"vis/lab-03/#using-white-text-on-dark-colors","title":"Using White Text On Dark Colors","text":""},{"location":"vis/lab-03/#prompt_1","title":"Prompt","text":"<pre><code>The black text is hard to read on the darker colors. How do I change the text to be white in the green and purple nodes?\n</code></pre>"},{"location":"vis/lab-03/#chatgpt-said","title":"ChatGPT said:","text":"<p>ChatGPT</p> <p>To change the text color for nodes with darker background colors like blue and purple, you can use the <code>font</code> property within each node's configuration to specify the text color. Here's how you can update your <code>lab-03.json</code> file to set the text color to white for the green and purple nodes:</p>"},{"location":"vis/lab-03/#updated-lab-02json","title":"Updated <code>lab-02.json</code>:","text":"<pre><code>{\n    \"nodes\": [\n        {\"id\": 1, \"label\": \"Node 1\", \"color\": \"red\", \"shape\": \"triangle\"},\n        {\"id\": 2, \"label\": \"Node 2\", \"color\": \"orange\", \"shape\": \"square\"},\n        {\"id\": 3, \"label\": \"Node 3\", \"color\": \"yellow\", \"shape\": \"circle\"},\n        {\"id\": 4, \"label\": \"Node 4\", \"color\": \"green\", \"shape\": \"box\", \"size\": 50, \"font\": {\"color\": \"white\"}},\n        {\"id\": 5, \"label\": \"Node 5\", \"color\": \"blue\", \"shape\": \"star\"},\n        {\"id\": 6, \"label\": \"Node 6\", \"color\": \"purple\", \"shape\": \"ellipse\", \"font\": {\"color\": \"white\"}}\n    ],\n    \"edges\": [\n        {\"from\": 1, \"to\": 3},\n        {\"from\": 1, \"to\": 2},\n        {\"from\": 2, \"to\": 4},\n        {\"from\": 2, \"to\": 5},\n        {\"from\": 3, \"to\": 6}\n    ]\n}\n</code></pre>"},{"location":"vis/lab-03/#explanation","title":"Explanation:","text":"<ul> <li>For <code>Node 5</code> (blue) and <code>Node 6</code> (purple), I added the <code>\"font\": {\"color\": \"white\"}</code> property, which changes the text color to white for better readability against the darker backgrounds.</li> </ul> <p>Now, when you display the graph, the text on the blue and purple nodes will appear in white, making it much easier to read.</p>"},{"location":"vis/lab-03/#more-things-to-try","title":"More Things to Try","text":"<p>You can also change the border width:</p> <ol> <li>borderWidth</li> <li>color.border</li> <li>opacity</li> <li>icon</li> <li>image</li> </ol> <p>The size is used to determine the size of node shapes that do not have the label inside of them. These shapes are: image, circularImage, diamond, dot, star, triangle, triangleDown, hexagon, square and icon</p>"},{"location":"vis/lab-03/#custom-canvas-shapes","title":"Custom Canvas Shapes","text":"<p>You can make the shape \"custom\" and then supply a Canvas drawing function:</p> <p>Canvas Drawing Function</p>"},{"location":"vis/lab-03/#references","title":"References","text":"<p>Vis.js Documentation on Node Properties</p>"},{"location":"vis/lab-04/","title":"Lab 4: Custom Shape","text":"<p>Lab 4 Custom Shapes HTML</p> <p>Here's a small example of a <code>vis.js</code> program that uses the <code>ctxRenderer</code> function to draw a custom hexagonal shape for a node:</p>"},{"location":"vis/lab-04/#html-code","title":"HTML Code:","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;vis.js Custom Shape Example&lt;/title&gt;\n    &lt;script type=\"text/javascript\" src=\"https://unpkg.com/vis-network/standalone/umd/vis-network.min.js\"&gt;&lt;/script&gt;\n    &lt;style type=\"text/css\"&gt;\n        #mynetwork {\n            width: 600px;\n            height: 400px;\n            border: 1px solid lightgray;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"mynetwork\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    function customShapeRenderer({ ctx, x, y, state: { selected, hover }, style }) {\n        const r = style.size;  // size of the shape (radius)\n        ctx.beginPath();\n        const sides = 6;  // number of sides for the hexagon\n        const a = (Math.PI * 2) / sides;  // angle between sides\n\n        // Start drawing the hexagon\n        ctx.moveTo(x + r * Math.sin(0), y + r * Math.cos(0));\n        for (let i = 1; i &lt;= sides; i++) {\n            ctx.lineTo(x + r * Math.sin(a * i), y + r * Math.cos(a * i));\n        }\n\n        ctx.closePath();\n        ctx.save();\n        ctx.fillStyle = selected ? 'blue' : 'red';  // change color if selected\n        ctx.fill();\n        ctx.strokeStyle = hover ? 'orange' : 'black';  // change stroke if hovered\n        ctx.stroke();\n        ctx.restore();\n\n        // Add label inside the shape\n        ctx.font = \"normal 12px sans-serif\";\n        ctx.fillStyle = 'black';\n        ctx.fillText('Custom Node', x - r / 2, y + 4);\n\n        // Return dimensions of the node\n        return {\n            nodeDimensions: { width: r * 2, height: r * 2 }\n        };\n    }\n\n    // Create nodes and edges\n    const nodes = new vis.DataSet([\n        {\n            id: 1,\n            label: 'Custom Node',\n            shape: 'custom',\n            ctxRenderer: customShapeRenderer,  // specify the custom renderer\n            size: 40  // set the size of the node\n        }\n    ]);\n\n    const edges = new vis.DataSet([]);\n\n    // Create the network\n    const container = document.getElementById('mynetwork');\n    const data = {\n        nodes: nodes,\n        edges: edges\n    };\n    const options = {};\n    const network = new vis.Network(container, data, options);\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"vis/lab-04/#explanation","title":"Explanation:","text":"<ul> <li>Custom Renderer (<code>customShapeRenderer</code>): This function creates a hexagonal node. It takes the context (<code>ctx</code>) and node state as input, calculates the position of each side of the hexagon, and draws the shape using the <code>canvas</code> API.<ul> <li>The node is filled with red unless it is selected, in which case it becomes blue.</li> <li>The stroke color is black but changes to orange when the node is hovered over.</li> <li>The label \"Custom Node\" is drawn inside the hexagon.</li> </ul> </li> <li>Node Configuration: The node uses the <code>shape: 'custom'</code> property to specify that it should use a custom renderer. The <code>ctxRenderer</code> property is set to the <code>customShapeRenderer</code> function.</li> <li>Node Dimensions: The size of the hexagonal node is defined by the <code>r</code> variable, which is passed in via <code>style.size</code>.</li> </ul> <p>When you load this HTML file in a browser, it will draw a single hexagonal node with the ability to change color when selected or hovered. You can easily modify the shape or style further by changing the drawing logic inside the <code>customShapeRenderer</code> function.</p> <p>4o</p> <p>requestAnimationFrame((function(){window.__oai_logTTI?window.__oai_logTTI():window.__oai_SSR_TTI=window.__oai_SSR_TTI??Date.now()}))</p> <p>ChatGPT can make mistakes. Check important info.</p>"},{"location":"vis/csv-reader/","title":"CSV to JSON Converter","text":"<p>This prompt generates a Python program that reads in a CSV file for a graph and returns a JSON file in vis.js format.</p>"},{"location":"vis/csv-reader/#prompt","title":"Prompt","text":"<pre><code>I have a CSV file that has graph data in it.\n\nThe fields are:\nConceptID - the node id in a graph. Unique for all nodes. Required.\nThe ConceptName - a node label - Required\nDependencyList - a pipe-delimited list of dependant ConceptIDs.  An edge goes from this concept to other concepts with a directed arrow.\nCategoryID - a group ID for the concept.\nCategoryLabel - the name of the category\n\nThere are about 11 Categories\n\nConceptID,ConceptName,DependencyList,CategoryID,CategoryLabel\n1,Ohm's Law,2|3|4,1,Fundamental Concepts\n2,Voltage,7,1,Fundamental Concepts\n3,Current,7,1,Fundamental Concepts\n4,Resistance,101,1,Fundamental Concepts\n5,Power,2|3,1,Fundamental Concepts\n6,Energy,5|102,1,Fundamental Concepts\n7,Electric charge,120,1,Fundamental Concepts\n8,Conductors,7,1,Fundamental Concepts\n9,Insulators,7,1,Fundamental Concepts\n10,Capacitance,2|7,1,Fundamental Concepts\n11,Inductance,3|104,1,Fundamental Concepts\n\nPlease create a Python program that converts this CSV file into a JSON file that can be easily read by vis.js.  Assume that the category ID will become a group ID.\n</code></pre>"},{"location":"vis/csv-reader/#chatgpt-response","title":"ChatGPT Response","text":"<pre><code>import csv\nimport json\n\ndef csv_to_visjs_json(csv_filename, json_filename):\n    nodes = []\n    edges = []\n    categories = {}\n\n    # Read the CSV file\n    with open(csv_filename, 'r', newline='', encoding='utf-8') as csvfile:\n        reader = csv.DictReader(csvfile)\n        for row in reader:\n            # Extract node information\n            try:\n                concept_id = int(row['ConceptID'])\n            except ValueError:\n                print(f\"Invalid ConceptID '{row['ConceptID']}' skipped.\")\n                continue  # Skip rows with invalid ConceptID\n\n            concept_name = row['ConceptName'].strip()\n            if not concept_name:\n                print(f\"Empty ConceptName for ConceptID {concept_id} skipped.\")\n                continue  # Skip nodes without a name\n\n            try:\n                category_id = int(row['CategoryID'])\n            except ValueError:\n                print(f\"Invalid CategoryID '{row['CategoryID']}' for ConceptID {concept_id} skipped.\")\n                continue  # Skip rows with invalid CategoryID\n\n            category_label = row['CategoryLabel'].strip()\n\n            # Create node object\n            node = {\n                'id': concept_id,\n                'label': concept_name,\n                'group': category_id\n            }\n            nodes.append(node)\n\n            # Store category information (optional, for groups)\n            if category_id not in categories:\n                categories[category_id] = category_label\n\n            # Process DependencyList to create edges\n            dependency_list = row['DependencyList'].strip()\n            if dependency_list:\n                dependencies = dependency_list.split('|')\n                for dep in dependencies:\n                    dep = dep.strip()\n                    if dep:\n                        try:\n                            dep_id = int(dep)\n                            edge = {\n                                'from': concept_id,\n                                'to': dep_id\n                            }\n                            edges.append(edge)\n                        except ValueError:\n                            print(f\"Invalid DependencyID '{dep}' for ConceptID {concept_id} skipped.\")\n                            continue  # Skip invalid DependencyIDs\n\n    # Optionally, create a separate groups structure if needed\n    # Uncomment the following lines if you want to include group labels\n    \"\"\"\n    groups = []\n    for cid, clabel in categories.items():\n        group = {\n            'id': cid,\n            'label': clabel\n            # You can add more styling options here if needed\n        }\n        groups.append(group)\n    data = {\n        'nodes': nodes,\n        'edges': edges,\n        'groups': groups\n    }\n    \"\"\"\n\n    # If not using separate groups, omit the 'groups' key\n    data = {\n        'nodes': nodes,\n        'edges': edges\n    }\n\n    # Write the JSON output\n    with open(json_filename, 'w', encoding='utf-8') as jsonfile:\n        json.dump(data, jsonfile, indent=4)\n\n    print(f\"Successfully converted '{csv_filename}' to '{json_filename}'.\")\n\nif __name__ == \"__main__\":\n    # Define input and output file names\n    input_csv = 'graph-data.csv'\n    output_json = 'graph-data.json'\n\n    # Convert CSV to JSON\n    csv_to_visjs_json(input_csv, output_json)\n</code></pre> <p>Python Code</p>"},{"location":"vis/fix-x-positions/","title":"Fix the X Positions","text":"<p>Fix X Positions Demo</p>"},{"location":"vis/fix-x-positions/#prompt","title":"Prompt","text":"<pre><code>using vis.js, is there a way to freeze a node's x position\nbut let the y position float freely and be repositioned\nby the force-directed graph algorithm?\n</code></pre>"},{"location":"vis/fix-x-positions/#chatgpt-said","title":"ChatGPT said:","text":"<p>In vis.js, the built-in options for node positioning allow you to fix both the x and y coordinates of a node using the <code>fixed</code> option. However, freezing only one axis while letting the other float (like freezing the x-axis and letting the y-axis adjust with the force-directed graph algorithm) is not supported natively.</p> <p>That said, you can achieve this behavior with a workaround by using the <code>physics</code> option and manually adjusting the node's x position in each frame:</p> <ol> <li>Set the node's <code>x</code> position and use the <code>fixed: { x: true, y: false }</code> option to lock only the x-axis.</li> <li>During the graph's update cycle, reapply the node's fixed x position while letting the force algorithm adjust the y position.</li> </ol> <p>Here's an example code snippet to implement this behavior:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;vis.js Fixed X Position Example&lt;/title&gt;\n  &lt;script type=\"text/javascript\" src=\"https://unpkg.com/vis-network@9.1.2/dist/vis-network.min.js\"&gt;&lt;/script&gt;\n\n  &lt;style&gt;\n    #network {\n      width: 800px;\n      height: 600px;\n      border: 1px solid lightgray;\n      margin-left: 10px;\n      background-color: aliceblue;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"network\"&gt;&lt;/div&gt;\n&lt;script type=\"text/javascript\" src=\"fix-x-positions.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>var nodes = new vis.DataSet([\n  { id: 1, label: \"Node 1\", x: 100, fixed: { x: true, y: false } },\n  { id: 2, label: \"Node 2\", x: 200, fixed: { x: true, y: false } },\n  { id: 3, label: \"Node 3\", fixed: false },\n]);\n\nvar edges = new vis.DataSet([\n  { from: 1, to: 2 },\n  { from: 2, to: 3 },\n]);\n\nvar container = document.getElementById('network');\nvar data = {\n  nodes: nodes,\n  edges: edges\n};\n\nvar options = {\n  physics: {\n    enabled: true,\n    solver: 'forceAtlas2Based',\n    stabilization: false\n  }\n};\n\nvar network = new vis.Network(container, data, options);\n\n// Workaround: Lock x position while letting y position be free\nnetwork.on(\"beforeDrawing\", function () {\n  nodes.forEach(function (node) {\n    if (node.fixed &amp;&amp; node.fixed.x) {\n      var currentPosition = network.getPosition(node.id);\n      nodes.update({ id: node.id, x: node.x, y: currentPosition.y });\n    }\n  });\n});\n</code></pre>"},{"location":"vis/fix-x-positions/#explanation-of-changes","title":"Explanation of Changes","text":"<ol> <li> <p>Fixed Nodes Configuration:</p> <ul> <li><code>fixed: { x: true, y: false }</code>: This ensures that the x-position of the node remains constant while allowing the y-position to be influenced by the physics engine.</li> <li><code>physics: false</code>: Disables physics simulation for these nodes, preventing them from being moved by forces or other nodes.</li> <li> <p>Removal of <code>beforeDrawing</code> Event:</p> </li> <li> <p>Since we're now using <code>physics: false</code> for fixed nodes, the manual adjustment in the <code>beforeDrawing</code> event is no longer necessary and has been removed to prevent interference.</p> </li> <li> <p>Centering the Graph:</p> </li> <li> <p><code>moveTo</code> Method: After the network stabilizes, <code>moveTo</code> centers the graph at (0,0) with a smooth animation.</p> </li> <li><code>stabilization</code> Settings: Increased the number of iterations to ensure the network has ample time to stabilize before centering.</li> <li> <p>Responsive Design:</p> </li> <li> <p>Window Resize Event: Added an event listener to re-fit the network when the browser window is resized, maintaining the centered view.</p> </li> <li> <p>Node Styling (Optional):</p> </li> <li> <p>Enhanced node appearance for better visibility and aesthetics. This is optional but can help in visual differentiation.</p> </li> </ul> </li> </ol>"},{"location":"vis/fix-x-positions/#additional-tips","title":"Additional Tips","text":"<ul> <li> <p>Adjust Initial Positions: Ensure that the initial <code>x</code> positions of the fixed nodes are within the visible range of your container. If nodes are still drifting off, try setting <code>x</code> to smaller absolute values (e.g., closer to 0).</p> </li> <li> <p>Scale Adjustment: If the graph appears too zoomed out or in, adjust the <code>scale</code> parameter in the <code>moveTo</code> method to better fit the nodes within the view.</p> </li> <li> <p>Solver Selection: While <code>forceAtlas2Based</code> is a good general-purpose solver, experimenting with different solvers like <code>barnesHut</code> or <code>repulsion</code> might yield better results based on your specific graph structure.</p> </li> <li> <p>Debugging Node Positions: Temporarily disable physics (<code>physics: false</code>) for all nodes to manually position them and ensure they appear correctly within the view. Once satisfied, re-enable physics selectively.</p> </li> </ul>"},{"location":"vis/fix-x-positions/#final-thoughts","title":"Final Thoughts","text":"<p>By configuring the fixed nodes correctly and ensuring they are excluded from the physics simulation, you should achieve the desired behavior where specific nodes remain anchored on the x-axis while others are dynamically positioned. Centering the graph post-stabilization ensures that all nodes remain within the visible area, providing a clear and organized visualization.</p> <p>Feel free to adjust the parameters further based on the specific requirements of your graph and the visual outcome you desire. Let me know if you encounter any more issues or need further assistance!</p>"},{"location":"vis/graph-editor/","title":"Graph Editor","text":"<p>Run Graph Editor</p>"},{"location":"vis/graph-editor/#prompt","title":"Prompt","text":"<pre><code>Please generate a graph network editor based on vis.js.  The editor should be able to do the following:\n\n1. Open a graph network from a JSON file to an in memory structure.  Look for files with .json extensions.\n2. Add, update and delete nodes and edges.\n3. Edit various properties of the nodes and edges such as color, shape, size and image\n4. Save the in-memory structure to the file or do a \"Save As\" to a new file\n5. Allow the user to change and save global options\n\nUpon reading the file, display statistics about what was in the file including node count and edge count.  Also display the count of orphaned nodes when a file is read.\nPerform checks on data quality as a new file is opened such as edges without nodes.\n</code></pre>"},{"location":"vis/graph-editor/#graph-editor-check-for-network","title":"Graph Editor Check for Network","text":"<p>Check for Network after Load of JSON data</p>"},{"location":"vis/graph-editor/#references","title":"References","text":"<p>Sam Adams TinkerTiny Vis.js Graph Editor - an interesting UI.  One time code commit in 2022.</p>"},{"location":"vis/graph-editor/prompt-history/","title":"Prompt History for Graph Editor","text":""},{"location":"vis/graph-editor/prompt-history/#adding-details-to-node","title":"Adding Details to Node","text":"<p>``` What are the most common properties that a user sets on a node? I can think of the following:  1. Label  2. Title (for hover text)  3. Shape (selected from a list of shapes)  4. Size  5. Background color (select from list)  6. Edge color (select from list)  7. x  8. y  9. Fixed location (checkbox) </p> <p>What other parameters might a person change? Update the JavaScript to allow all these parameters to be visible when creating a new node or updating a node.</p>"},{"location":"vis/graph-editor/prompt-history/#chatgpt-said","title":"ChatGPT said:","text":"<p>In addition to the properties you've already listed, here are some other common node properties that users might want to set:</p> <ol> <li>Image (for image-based nodes, with a URL to an image)</li> <li>Font (size, color, face for the label)</li> <li>Border Width (controls the thickness of the node's border)</li> <li>Border Color (set separately from edge color, allows customization of node outline)</li> <li>Opacity (allows transparency on nodes)</li> <li>Shadow (option to add shadows for depth perception)</li> <li>Group (used to assign nodes into categories for different styles or behaviors)</li> <li>Icon (if using icons instead of labels)</li> <li>Physics (whether the node is affected by physics simulation)</li> </ol>"},{"location":"vis/graph-editor/prompt-history/#updated-javascript-for-node-creationediting-form","title":"Updated JavaScript for Node Creation/Editing Form","text":"<p>Here is an updated version of your graph-editor.js that includes a form for setting all these parameters when creating or editing nodes:</p>"},{"location":"vis/graph-viewer/","title":"Graph Viewer","text":"<p>Graph Viewer</p>"},{"location":"vis/learn-python/","title":"Learn Python and Data Science","text":""},{"location":"vis/learn-python/#prompt","title":"Prompt","text":"<p>Create a graph in vis.js format for learning data science with Python. Make Learn Python the first Concept, but then make that a prerequsite to many Python data science packages like NumPi, SciKitLearn, PyTourch etc.</p>"},{"location":"vis/learn-python/#chatgpt-said","title":"ChatGPT said:","text":"<p>ChatGPT</p> <p>Here is an example of a vis.js graph configuration representing a learning graph for data science with Python. The first concept is \"Learn Python,\" which is a prerequisite for various Python data science packages like NumPy, SciKitLearn, and PyTorch.</p> <pre><code>javascript\nCopy code\n\n`var nodes = new vis.DataSet([\n  { id: 1, label: \"Learn Python\", title: \"Basic Python Programming\" },\n  { id: 2, label: \"Learn NumPy\", title: \"Numerical computing with Python\" },\n  { id: 3, label: \"Learn Pandas\", title: \"Data manipulation and analysis\" },\n  { id: 4, label: \"Learn Matplotlib\", title: \"Data visualization with Python\" },\n  { id: 5, label: \"Learn SciKitLearn\", title: \"Machine learning with Python\" },\n  { id: 6, label: \"Learn TensorFlow\", title: \"Deep learning with Python\" },\n  { id: 7, label: \"Learn PyTorch\", title: \"Deep learning with Python\" },\n  { id: 8, label: \"Learn Seaborn\", title: \"Statistical data visualization\" },\n  { id: 9, label: \"Learn Statsmodels\", title: \"Statistical models in Python\" },\n]);\n\nvar edges = new vis.DataSet([\n  { from: 1, to: 2, label: \"prerequisite\" },\n  { from: 1, to: 3, label: \"prerequisite\" },\n  { from: 1, to: 4, label: \"prerequisite\" },\n  { from: 1, to: 5, label: \"prerequisite\" },\n  { from: 1, to: 6, label: \"prerequisite\" },\n  { from: 1, to: 7, label: \"prerequisite\" },\n  { from: 1, to: 8, label: \"prerequisite\" },\n  { from: 1, to: 9, label: \"prerequisite\" },\n]);\n\nvar container = document.getElementById(\"mynetwork\");\nvar data = {\n  nodes: nodes,\n  edges: edges,\n};\nvar options = {\n  nodes: {\n    shape: \"box\",\n    size: 20,\n    color: {\n      background: \"#ffffff\",\n      border: \"#000000\",\n    },\n    font: {\n      color: \"#000000\",\n      size: 14,\n    },\n  },\n  edges: {\n    arrows: \"to\",\n    smooth: true,\n  },\n  layout: {\n    hierarchical: {\n      direction: \"LR\", // Left to right layout\n      sortMethod: \"directed\",\n    },\n  },\n};\nvar network = new vis.Network(container, data, options);\n`\n</code></pre>"},{"location":"vis/learn-python/#explanation","title":"Explanation:","text":"<ul> <li>Nodes: Each concept (e.g., \"Learn Python,\" \"Learn NumPy\") is represented as a node.</li> <li>Edges: Each edge represents a prerequisite relationship. The <code>from</code> attribute specifies the starting node (e.g., \"Learn Python\") and the <code>to</code> attribute specifies the dependent concept (e.g., \"Learn NumPy\").</li> <li>Layout: The layout is hierarchical and flows from left to right (LR), with arrows pointing from the prerequisite concept to the dependent concept.</li> </ul>"},{"location":"vis/learn-python/#concepts-flow","title":"Concepts Flow:","text":"<ol> <li>Learn Python is the foundation, required for all other data science packages.</li> <li>NumPy, Pandas, Matplotlib, SciKitLearn, TensorFlow, PyTorch, Seaborn, and Statsmodels are all dependent on a solid understanding of Python.</li> </ol>"},{"location":"vis/node-enricher/","title":"Vis.js Node Enricher Example","text":""},{"location":"vis/node-enricher/#prompt","title":"Prompt","text":"<pre><code>I have a JSON file that represents the nodes and edges in a network graph. I would like you to generate a Python program that reads in this JSON file and returns it with one addition. If the node has a group of 1, I want you to add another property \"x\": -300. \n\nAll other elements in the JSON file should remain unchained. Here is a sample of the nodes: { \"nodes\": \\[ { \"id\": 1, \"label\": \"Ohm's Law\", \"group\": 1 }, { \"id\": 2, \"label\": \"Voltage\", \"group\": 1 }, { \"id\": 3, \"label\": \"Current\", \"group\": 1 }, { \"id\": 4, \"label\": \"Resistance\", \"group\": 1 }, { \"id\": 5, \"label\": \"Power\", \"group\": 1 }, { \"id\": 6, \"label\": \"Energy\", \"group\": 1 } You should return: \"nodes\": \\[ { \"id\": 1, \"label\": \"Ohm's Law\", \"group\": 1, \"x\": 0 } etc.\n</code></pre>"},{"location":"vis/node-enricher/#chatgpt-response","title":"ChatGPT Response","text":"<p>Certainly! Below is a Python program that accomplishes your requirements. This script reads a JSON file representing a network graph, adds an <code>\"x\": -300</code> property to each node with <code>\"group\": 1</code>, and writes the modified data back to a new JSON file. All other elements in the JSON remain unchanged.</p>"},{"location":"vis/node-enricher/#step-by-step-explanation","title":"Step-by-Step Explanation","text":"<ol> <li> <p>Import Necessary Modules:</p> <ul> <li><code>json</code>: To handle JSON data.</li> <li><code>sys</code>: To handle command-line arguments (optional, for flexibility).</li> <li> <p>Define the Functionality:</p> </li> <li> <p>Reading the JSON File: The script reads the input JSON file containing the network graph.</p> </li> <li>Modifying Nodes: It iterates through each node in the <code>\"nodes\"</code> list. If a node has <code>\"group\": 1</code>, it adds a new property <code>\"x\": -300</code> to that node.</li> <li>Writing the Modified JSON: The script writes the updated JSON data to an output file.</li> <li> <p>Usage:</p> </li> <li> <p>You can run the script from the command line, specifying the input and output file paths. If no arguments are provided, it defaults to <code>input.json</code> and <code>output.json</code>.</p> </li> </ul> </li> </ol>"},{"location":"vis/node-enricher/#python-code","title":"Python Code","text":"<pre><code>import json\nimport sys\n\ndef add_x_property(input_file, output_file):\n    try:\n        # Read the input JSON file\n        with open(input_file, 'r', encoding='utf-8') as f:\n            data = json.load(f)\n\n        # Check if 'nodes' key exists\n        if 'nodes' not in data:\n            print(f\"Error: The key 'nodes' was not found in {input_file}.\")\n            return\n\n        # Iterate through each node and add \"x\": -300 if group is 1\n        for node in data['nodes']:\n            if node.get('group') == 1:\n                node['x'] = -300\n\n        # Write the modified data to the output JSON file\n        with open(output_file, 'w', encoding='utf-8') as f:\n            json.dump(data, f, indent=4)\n\n        print(f\"Successfully wrote the modified JSON to {output_file}.\")\n\n    except FileNotFoundError:\n        print(f\"Error: The file {input_file} does not exist.\")\n    except json.JSONDecodeError:\n        print(f\"Error: The file {input_file} is not a valid JSON file.\")\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n\ndef main():\n    # Default input and output file names\n    input_file = 'input.json'\n    output_file = 'output.json'\n\n    # If command-line arguments are provided, use them\n    if len(sys.argv) == 3:\n        input_file = sys.argv[1]\n        output_file = sys.argv[2]\n    elif len(sys.argv) != 1:\n        print(\"Usage: python script.py [input_file output_file]\")\n        return\n\n    add_x_property(input_file, output_file)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"vis/node-enricher/#how-to-use-the-script","title":"How to Use the Script","text":"<ol> <li> <p>Save the Script:</p> <ul> <li>Save the above code to a file, for example, <code>modify_graph.py</code>.</li> <li> <p>Prepare Your JSON File:</p> </li> <li> <p>Ensure your JSON file (e.g., <code>input.json</code>) is properly formatted. Here's an example based on your sample:</p> <pre><code>json\nCopy code\n\n`{\n    \"nodes\": [\n        {\n            \"id\": 1,\n            \"label\": \"Ohm's Law\",\n            \"group\": 1\n        },\n        {\n            \"id\": 2,\n            \"label\": \"Voltage\",\n            \"group\": 1\n        },\n        {\n            \"id\": 3,\n            \"label\": \"Current\",\n            \"group\": 1\n        },\n        {\n            \"id\": 4,\n            \"label\": \"Resistance\",\n            \"group\": 1\n        },\n        {\n            \"id\": 5,\n            \"label\": \"Power\",\n            \"group\": 1\n        },\n        {\n            \"id\": 6,\n            \"label\": \"Energy\",\n            \"group\": 1\n        }\n    ],\n    \"edges\": [\n        // Your edge definitions here\n    ]\n}\n`\n</code></pre> </li> </ul> </li> <li> <p>Run the Script:</p> <ul> <li> <p>Open your terminal or command prompt.</p> </li> <li> <p>Navigate to the directory containing <code>modify_graph.py</code> and your <code>input.json</code>.</p> </li> <li> <p>Execute the script using Python. You can specify input and output files or use the defaults.</p> <p>Using Default File Names (<code>input.json</code> and <code>output.json</code>):</p> <pre><code>bash\nCopy code\n\n`python modify_graph.py\n`\n</code></pre> <p>Specifying Input and Output Files:</p> <pre><code>bash\nCopy code\n\n`python modify_graph.py your_input.json your_output.json\n`\n</code></pre> </li> </ul> </li> <li> <p>Check the Output:</p> <ul> <li> <p>After running the script, check the <code>output.json</code> file. Nodes with <code>\"group\": 1</code> will have an additional property <code>\"x\": -300</code>.</p> </li> <li> <p>Example Output:</p> <pre><code>json\nCopy code\n\n`{\n    \"nodes\": [\n        {\n            \"id\": 1,\n            \"label\": \"Ohm's Law\",\n            \"group\": 1,\n            \"x\": -300\n        },\n        {\n            \"id\": 2,\n            \"label\": \"Voltage\",\n            \"group\": 1,\n            \"x\": -300\n        },\n        {\n            \"id\": 3,\n            \"label\": \"Current\",\n            \"group\": 1,\n            \"x\": -300\n        },\n        {\n            \"id\": 4,\n            \"label\": \"Resistance\",\n            \"group\": 1,\n            \"x\": -300\n        },\n        {\n            \"id\": 5,\n            \"label\": \"Power\",\n            \"group\": 1,\n            \"x\": -300\n        },\n        {\n            \"id\": 6,\n            \"label\": \"Energy\",\n            \"group\": 1,\n            \"x\": -300\n        }\n    ],\n    \"edges\": [\n        // Your edge definitions here\n    ]\n}\n`\n</code></pre> </li> </ul> </li> </ol>"},{"location":"vis/node-enricher/#notes","title":"Notes","text":"<ul> <li>Error Handling: The script includes basic error handling for missing files and invalid JSON formats.</li> <li>Flexibility: You can specify different input and output files via command-line arguments.</li> <li>Extensibility: You can easily modify the script to add more properties or handle different conditions as needed.</li> </ul> <p>Feel free to customize the script further based on your specific requirements!</p> <p>o1-mini</p> <p>window.__oai_logHTML?window.__oai_logHTML():window.__oai_SSR_HTML=window.__oai_SSR_HTML||Date.now();requestAnimationFrame((function(){window.__oai_logTTI?window.__oai_logTTI():window.__oai_SSR_TTI=window.__oai_SSR_TTI||Date.now()}))</p> <p>ChatGPT can make mistakes. Check imp</p>"}]}