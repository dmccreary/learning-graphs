{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Learning Graph","text":"<p>Welcome to the website for Learning Graphs.  Learning Graphs are concept dependency graphs that are used to:</p> <ol> <li>Understand the important concepts in a course and their dependencies</li> <li>Suggest learning paths to achieve learning objectives</li> <li>Serve as the core data structure for hyper-personalization of lesson plans by generative AI agents.</li> </ol> <p>Please see the About This Site for more details.</p> <p>Please contact me on LinkedIn</p> <p>Thanks! - Dan</p>"},{"location":"about/","title":"About the Learning Graphs Website","text":"<p>The goal of this website is to enable teaching the concepts around Learning Graphs.  It was inspired by the cyberpunk science fiction novel Diamond Age by Neal Stephenson.  In this novel, a child uses a tablet-like device that customizes stories to the needs of the child.  This form of highly-customized learning is our goal.  We believe that learning graphs are the core data structure that these intelligent learning agents will be built on.</p> <p>Learning Graphs are concept dependency graphs that are used to:</p> <ol> <li>Understand the important concepts in a course and their dependencies</li> <li>Suggest learning paths to achieve learning objectives</li> <li>Serve as the core data structure for hyper-personalization of lesson plans by generative AI agents.</li> </ol>"},{"location":"about/#course-learning-objectives","title":"Course Learning Objectives","text":"<p>Here are 10 learning objectives for a course on learning Concept Dependency Graphs (CDGs) using Bloom's Taxonomy, aligned with the use of Generative AI (GenAI) for analyzing course content, creating concept taxonomies, visualizing, editing, and personalizing lesson plans:</p>"},{"location":"about/#remembering","title":"Remembering:","text":"<ol> <li> <p>Identify the basic structure of Concept Dependency Graphs (CDGs) used to model concepts and their dependencies in a course.</p> </li> <li> <p>Example: Define the nodes and edges in a CDG and recognize them in different graphical representations.</p> </li> </ol>"},{"location":"about/#understanding","title":"Understanding:","text":"<ol> <li> <p>Explain how CDGs represent the relationships between course concepts and how they suggest learning paths based on these dependencies.</p> </li> <li> <p>Example: Describe how prerequisite concepts are connected to higher-level concepts within a CDG.</p> </li> </ol>"},{"location":"about/#applying","title":"Applying:","text":"<ol> <li> <p>Use Generative AI to generate concepts lists or use NLP frameworks to extract key concepts from course materials and generate a list of vertices (nodes) for building a CDG.</p> </li> <li> <p>Example: Apply AI tools to analyze a syllabus or textbook and identify core concepts.</p> </li> <li> <p>Apply vis.js (or similar tools) to visualize a Concept Dependency Graph for a given set of concepts and dependencies.</p> </li> <li> <p>Example: Use vis.js to create an interactive graph of course concepts and their dependencies.</p> </li> </ol>"},{"location":"about/#analyzing","title":"Analyzing:","text":"<ol> <li> <p>Analyze concept relationships using Generative AI to discover hidden dependencies that may not be immediately obvious from the course materials.</p> </li> <li> <p>Example: Use an AI agent to uncover indirect concept dependencies based on patterns found in text data.</p> </li> </ol>"},{"location":"about/#evaluating","title":"Evaluating:","text":"<ol> <li> <p>Evaluate the quality of a generated CDG in terms of completeness, accuracy, and alignment with learning objectives.</p> </li> <li> <p>Example: Critically assess a CDG created by AI for coverage of all key topics and concept dependencies.</p> </li> <li> <p>Assess personalized learning paths generated from a CDG, ensuring they meet the individual learning objectives of diverse student profiles.</p> </li> <li> <p>Example: Review AI-generated personalized lesson plans for different student backgrounds and adjust if needed.</p> </li> </ol>"},{"location":"about/#creating","title":"Creating:","text":"<ol> <li> <p>Use Generative AI to automatically generate a concept taxonomy for a course, organizing concepts into hierarchical categories that represent broader topics.</p> </li> <li> <p>Example: Create a hierarchical taxonomy of concepts in a data structures course using AI tools.</p> </li> <li> <p>Edit a CDG interactively to improve learning pathways, adding or removing dependencies between concepts based on AI suggestions or instructor insights.</p> </li> <li> <p>Example: Modify a CDG for a calculus course by adding missing concepts or removing unnecessary dependencies.</p> </li> <li> <p>Design intelligent AI agents that use CDGs to generate hyper-personalized lesson plans, adapting to each student's learning progress and needs.</p> </li> <li> <p>Example: Build an AI system that integrates with a Learning Management System (LMS) to continuously update personalized learning paths based on the student's mastery of concepts.</p> </li> </ol> <p>Each of these objectives integrates various levels of Bloom's Taxonomy (from remembering and understanding basic concepts to applying, analyzing, evaluating, and creating new knowledge) while leveraging Generative AI and CDGs to enhance the learning process.</p>"},{"location":"checklist/","title":"Site Checklist","text":"<ol> <li>Customize the fields in your mkdocs.yml file</li> <li>Configure Google Analytics to use the right site ID</li> <li>Make sure that your .gitignore file includes the <code>site</code> directory</li> <li>Test the build</li> <li>Make sure the Edit button appears</li> <li>Make sure that code color heightening renders correctly</li> <li>run <code>git config advice.addIgnoredFile false</code></li> </ol>"},{"location":"contact/","title":"Contact","text":"<p>Please contact me on LinkedIn</p> <p>Thanks! - Dan</p>"},{"location":"course-description/","title":"Course Description","text":"<p>Title: Customizing Learning Materials with Intelligent Agents</p> <p>In this course, we will learn how on-line content can be generated or quickly customized to the needs of individuals or small groups of students.  We begin with a discussion of learning concepts and the use of concept dependency graphs (CDGs) to model these concepts.  We then show how generative AI tools can be used to generate these concepts or review existing concepts graphs for suitability of learning objectives.  We then describe the process of creating taxonomies and ontologies that can be used with CDGs.  We cover topics of abstraction, clustering and graph algorithms such as graph traversal, search and dependency analysis.  Next we cover the topic of tools to visualize and navigate CDG and explore tools such as vis.js for visualizing CDGs.  Finally, we show how these data structures and algorithms are used together with intelligent agents to customize complex lesson plans for students.</p> <p>Prerequisites: </p> <p>Student should have access to the internet and be familiar with using a web browser and search engines.  Students should also have access to a generative AI tool such as ChatGPG.</p> <p>It is helpful but not required for students should have a background in data structures, teaching theory, lesson plans, curriculum development processes.</p>"},{"location":"glossary/","title":"Glossary of Terms","text":""},{"location":"glossary/#agent","title":"Agent","text":""},{"location":"glossary/#alternate-label","title":"Alternate Label","text":""},{"location":"glossary/#concept","title":"Concept","text":""},{"location":"glossary/#concept-dependency-graph","title":"Concept Dependency Graph","text":""},{"location":"glossary/#generative-ai","title":"Generative AI","text":""},{"location":"glossary/#hyperpersonalization","title":"HyperPersonalization","text":""},{"location":"glossary/#iso-definition","title":"ISO Definition","text":"<p>A term definition is considered to be consistent with ISO/IEC 11179 metadata registry guideline if it meets the following criteria:</p> <ol> <li>Precise</li> <li>Concise</li> <li>Distinct</li> <li>Non-circular</li> <li>Unencumbered with business rules</li> </ol>"},{"location":"glossary/#learning-objective","title":"Learning Objective","text":""},{"location":"glossary/#learning-path","title":"Learning Path","text":""},{"location":"glossary/#preferred-label","title":"Preferred Label","text":""},{"location":"glossary/#term","title":"Term","text":"<p>This is the definition of the term.</p>"},{"location":"how-we-built-this-site/","title":"How We Built This Site","text":"<p>This page describes how we built this website and some of  the rationale behind why we made various design choices.</p>"},{"location":"how-we-built-this-site/#python","title":"Python","text":"<p>MicroSims are about how we use generative AI to create animations and simulations.  The language of AI is Python.  So we wanted to create a site that could be easily understood by Python developers.</p>"},{"location":"how-we-built-this-site/#mkdocs-vs-docusaurus","title":"Mkdocs vs. Docusaurus","text":"<p>There are two main tools used by Python developers to write documentation: Mkdocs and Docusaurus.  Mkdocs is easier to use and more popular than Docusaurus. Docusaurus is also optimized for single-page applications. Mkdocs also has an extensive library of themes and plugins. None of us are experts in JavaScript or React. Based on our ChatGPT Analysis of the Tradeoffs we chose mkdocs for this site management.</p>"},{"location":"how-we-built-this-site/#github-and-github-pages","title":"GitHub and GitHub Pages","text":"<p>GitHub is a logical choice to store our  site source code and documentation.  GitHub also has a Custom GitHub Action that does auto-deployment if any files on the site change. We don't currently have this action enabled, but other teams can use this feature if they don't have the ability to do a local build with mkdocs.</p> <p>GitHub also has Issues,  Projects and releases that we can use to manage our bugs and tasks.</p> <p>The best practice for low-cost websites that have public-only content is GitHub Pages. Mkdocs has a command (<code>mkdocs gh-deploy</code>) that does deployment directly to GitHub Pages.  This was an easy choice to make.</p>"},{"location":"how-we-built-this-site/#github-clone","title":"GitHub Clone","text":"<p>If you would like to clone this repository, here are the commands:</p> <pre><code>mkdir projects\ncd projects\ngit clone https://github.com/dmccreary/microsims\n</code></pre>"},{"location":"how-we-built-this-site/#after-changes","title":"After Changes","text":"<p>After you make local changes you must do the following:</p> <pre><code># add the new files to a a local commit transaction\ngit add FILES\n# Execute the a local commit with a message about what and why you are doing the commit\ngit commit -m \"comment\"\n# Update the central GitHub repository\ngit push\n</code></pre>"},{"location":"how-we-built-this-site/#material-theme","title":"Material Theme","text":"<p>We had several options when picking a mkdocs theme:</p> <ol> <li>Mkdocs default</li> <li>Readthedocs</li> <li>Third-Party Themes See Ranking</li> </ol> <p>The Material Theme had 16K stars.  No other theme had over a few hundred. This was also an easy design decision.</p> <p>One key criterial was the social Open Graph tags so that when our users post a link to a simulation, the image of the simulation is included in the link.  Since Material supported this, we used the Material theme. You can see our ChatGPT Design Decision Analysis if you want to check our decision process.</p>"},{"location":"how-we-built-this-site/#enable-edit-icon","title":"Enable Edit Icon","text":"<p>To enable the Edit icon on all pages, you must add the edit_uri and the content.action.edit under the theme features area.</p> <pre><code>edit_uri: edit/master/docs/\n</code></pre> <pre><code>    theme:\n        features:\n            - content.action.edit\n</code></pre>"},{"location":"how-we-built-this-site/#conda-vs-venv","title":"Conda vs VENV","text":"<p>There are two choices for virtual environments.  We can use the native Python venv or use Conda.  venv is simle but is only designed for pure Python projects.  We imagine that this site could use JavaScript and other langauges in the future, so we picked Conda. There is nothing on this microsite that prevents you from using one or the other.  See the ChatGPT Analysis Here.</p> <p>Here is the conda script that we ran to create a new mkdocs environment that also supports the material social imaging libraries.</p> <pre><code>conda deactivate\nconda create -n mkdocs python=3\nconda activate mkdocs\npip install mkdocs \"mkdocs-material[imaging]\"\n</code></pre>"},{"location":"how-we-built-this-site/#mkdocs-commands","title":"Mkdocs Commands","text":"<p>There are three simple mkdoc commands we use.</p>"},{"location":"how-we-built-this-site/#local-build","title":"Local Build","text":"<pre><code>mkdocs build\n</code></pre> <p>This builds your website in a folder called <code>site</code>.  Use this to test that the mkdocs.yml site is working and does not have any errors.</p>"},{"location":"how-we-built-this-site/#run-a-local-server","title":"Run a Local Server","text":"<pre><code>mkdocs serve\n</code></pre> <p>This runs a server on <code>http://localhost:8000</code>. Use this to test the display formatting locally before you push your code up to the GitHub repo.</p> <pre><code>mkdoc gh-deploy\n</code></pre> <p>This pushes everything up to the GitHub Pages site. Note that it does not commit your code to GitHub.</p>"},{"location":"how-we-built-this-site/#mkdocs-material-social-tags","title":"Mkdocs Material Social Tags","text":"<p>We are using the Material Social tags.  This is a work in progress!</p> <p>Here is what we have learned.</p> <ol> <li>There are extensive image processing libraries that can't be installed with just pip.  You will need to run a tool like brew on the Mac to get the libraries installed.</li> <li>Even after <code>brew</code> installs the libraries, you have to get your environment to find the libraries.  The only way I could get that to work was to set up a local UNIX environment variable.</li> </ol> <p>Here is the brew command that I ran:</p> <pre><code>brew install cairo freetype libffi libjpeg libpng zlib\n</code></pre> <p>I then had to add the following to my ~/.zshrc file:</p> <pre><code>export DYLD_FALLBACK_LIBRARY_PATH=/opt/homebrew/lib\n</code></pre> <p>Note that I am running on a Mac with Apple silicon.  This means that the image libraries that brew downloads must be specific to the Mac Arm instruction set.</p> <ul> <li>Cover images for blog post #4364</li> <li>Discussion on overriding the Social Card Image</li> </ul>"},{"location":"license/","title":"Creative Commons License","text":"<p>All content in this repository is governed by the following license agreement:</p>"},{"location":"license/#license-type","title":"License Type","text":"<p>Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0 DEED)</p>"},{"location":"license/#link-to-license-agreement","title":"Link to License Agreement","text":"<p>https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en</p>"},{"location":"license/#your-rights","title":"Your Rights","text":"<p>You are free to:</p> <ul> <li>Share \u2014 copy and redistribute the material in any medium or format</li> <li>Adapt \u2014 remix, transform, and build upon the material</li> </ul> <p>The licensor cannot revoke these freedoms as long as you follow the license terms.</p>"},{"location":"license/#restrictions","title":"Restrictions","text":"<ul> <li>Attribution \u2014 You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.</li> <li>NonCommercial \u2014 You may not use the material for commercial purposes.</li> <li>ShareAlike \u2014 If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original.</li> <li>No additional restrictions \u2014 You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.</li> </ul> <p>Notices</p> <p>You do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation.</p> <p>No warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material.</p> <p>This deed highlights only some of the key features and terms of the actual license. It is not a license and has no legal value. You should carefully review all of the terms and conditions of the actual license before using the licensed material.</p>"},{"location":"references/","title":"Site References","text":"<ol> <li>mkdocs - https://www.mkdocs.org/ - this is our tool for building the website.  It converts Markdown into HTML in the <code>site</code> directory.</li> <li>mkdocs material theme - https://squidfunk.github.io/mkdocs-material/ - this is the theme for our site.  The theme adds the user interface elements that give our site the look and feel.  It also has the features such as social cards.</li> <li>GitHub Pages - https://pages.github.com/ - this is the free tool for hosting public websites created by mkdocs</li> <li>Markdown - https://www.mkdocs.org/user-guide/writing-your-docs/#writing-with-markdown - this is the format we use for text.  It allows us to have headers, lists, tables, links and images without learning HTML.</li> <li>Deploy Mkdocs GitHub Action - https://github.com/marketplace/actions/deploy-mkdocs - this is the tool we use to automatically build our site after edits are checked in with Git.</li> <li>Git Book - https://git-scm.com/book/en/v2 - a useful book on Git.  Just read the first two chapters to learn how to check in new code.</li> <li>Conda - https://conda.io/ - this is a command line tool that keeps our Python libraries organized for each project.</li> <li>VS Code - https://code.visualstudio.com/ - this is the integrated development environment we use to mange the files on our website.</li> <li>Markdown Paste - https://marketplace.visualstudio.com/items?itemName=telesoho.vscode-markdown-paste-image - this is the VS code extension we use to make sure we keep the markdown format generated by ChatGPT.</li> </ol>"},{"location":"chapters/","title":"Learning Graphs","text":"<ul> <li>Learning Graphs</li> <li>Concepts</li> <li>Concept Dependency</li> <li>Concept Taxonomies</li> <li>Displaying Graphs</li> <li>Vis.js</li> <li>Enumerating Concepts</li> <li>Generating Dependencies</li> <li>Generating Taxonomies</li> <li>Dependency Analysis</li> <li>Customizing Lesson Plans</li> <li>LMS Integration</li> <li>Building Intelligent Agents</li> </ul>"},{"location":"chapters/01-learning-graphs/","title":"Learning Graphs","text":""},{"location":"chapters/01-learning-graphs/#what-are-learning-graphs","title":"What Are Learning Graphs","text":""},{"location":"chapters/01-learning-graphs/#how-are-they-used-in-education","title":"How Are They Used in Education","text":""},{"location":"chapters/01-learning-graphs/#planning","title":"Planning","text":""},{"location":"chapters/01-learning-graphs/#visualizing","title":"Visualizing","text":""},{"location":"chapters/01-learning-graphs/#creating-leaning-graphs","title":"Creating Leaning Graphs","text":""},{"location":"chapters/01-learning-graphs/#_1","title":"Learning Graphs","text":""},{"location":"chapters/02-concepts/","title":"Concepts","text":"<p>In this course, it is important to give the term \"concept\" a precise definition.  Borrowing from the World-Wide-Web (W3C) standard for storing knowledge (SKOS), here is the definition for the term \"concept\" they use:</p> <p>SKOS Definition of Concept: A unit of thought, an idea, or a notion, which is considered as an atomic unit of meaning within a given context.</p> <p>This is a broad definition and to make it a little more useful, we will add one additional property: let's require concepts to have a name.  We also refine \"given context\" to a specific learning context such as a course or curriculum.  Here is the full definition we can use for this course:</p> <p>Course Definition of Concept: A named unit of thought, such as an idea or notion, which is considered as an atomic unit of meaning within a given learning context.</p> <p>In general, think of opening a high-school or college textbook and looking at the index at the back of the book.  Each item in the index is typically a concept in that course.  If the authors for the book think that it is important enough, they will list it in the index.</p> <p>There are certainly concepts that don't have names.  Our neocortex stores around 82 billion neurons and LLMs have trillions of neuron-like structures in their neural networks.  Studies have shown that some LLM models can enumerate around 20 million named concepts.  But for all practical purposes, in this course all concepts have a name.  Technically, the primary name given to a concept is called a Preferred Label. If a concept has other names they are called Alternate Labels</p>"},{"location":"chapters/02-concepts/#how-many-concepts-in-a-high-school-course","title":"How Many Concepts in a High School Course?","text":"<p>The number of concepts covered in a typical high-school course can vary significantly depending on the subject, the curriculum, and the level of depth expected. However, a general estimate can be made.  In this analysis, we will use the term \"core concept\" as being a concept that is introduced within a course, has a clear name, and is used consistency across many educational systems.</p> <p>The number of core concepts introduce in a course also varies by subject area.  Here are some examples.</p> <ol> <li> <p>Mathematics: A high school algebra or geometry course might cover around 100 to 150 key concepts. These include foundational ideas such as solving equations, graphing functions, and understanding geometric proofs. Advanced courses like calculus might introduce 50 to 100 additional, more specialized concepts.</p> </li> <li> <p>Science: In a typical biology, chemistry, or physics course, students might learn around 200-300 major concepts. For example, a biology course might introduce cell structure, genetics, ecosystems, and evolution, while a chemistry course could cover atomic theory, chemical reactions, and thermodynamics. Physics might introduce concepts related to motion, energy, and electricity.</p> </li> <li> <p>Literature/Language Arts: An English literature course may cover 50 to 100 major literary concepts, such as themes, symbolism, metaphor, and narrative structure. It might also include concepts related to specific literary movements, authors, and genres.</p> </li> <li> <p>Social Studies: A history or civics course may focus on 150-200 key concepts, including historical events, political theories, government structures, and cultural movements.</p> </li> </ol> <p>Each course typically emphasizes a set of core concepts while also encouraging students to connect these ideas with broader themes or related areas of study. The number of concepts can be thought of as the core building blocks students are expected to understand and apply by the end of the course.</p> <p>These estimates are drawn from educational standards such as the Common Core and subject-specific curriculum guides from various educational boards.</p>"},{"location":"chapters/02-concepts/#counting-indexed-concepts","title":"Counting Indexed Concepts","text":"<p>The number of concepts typically listed in the index or glossary at the back of a high-school or college textbook varies depending on the subject and depth of the material. However, here are general estimates:</p> <ol> <li> <p>High-School Textbooks:</p> <ul> <li>Science (e.g., Biology, Chemistry): 200--400 key terms and concepts. For instance, a biology textbook may include concepts like \"photosynthesis,\" \"cell division,\" and \"genetic inheritance.\"</li> <li>Mathematics (e.g., Algebra, Geometry): Around 100--250 concepts, including \"quadratic equations,\" \"trigonometric functions,\" and \"coordinate geometry.\"</li> <li>Literature/Language Arts: 100--200 literary terms, including concepts such as \"alliteration,\" \"foreshadowing,\" and \"narrative structure.\"</li> <li> <p>College Textbooks:</p> </li> <li> <p>Introductory Courses (e.g., Psychology, Economics, Physics): 300--500 concepts, covering key definitions, theories, and models. For example, an introductory psychology textbook might list terms like \"cognitive dissonance,\" \"classical conditioning,\" and \"neuroplasticity.\"</p> </li> <li>Advanced Courses (e.g., Organic Chemistry, Advanced Calculus): 400--600 concepts, especially in subjects with extensive technical terminology.</li> </ul> </li> </ol> <p>In most textbooks, the index or glossary is a critical tool for students to reference important concepts, which are often highlighted in bold or italic throughout the text. The number of concepts aligns with the complexity of the course and the learning outcomes set by educational standards.</p>"},{"location":"chapters/03-concept-dependency/","title":"Concept Dependency","text":""},{"location":"chapters/04-concept-taxonomies/","title":"Concept Taxonomies and Ontologies","text":""},{"location":"chapters/05-displaying-graphs/","title":"Displaying Graphs","text":""},{"location":"chapters/05-displaying-graphs/#laying-out-dependency-graphs","title":"Laying out Dependency Graphs","text":""},{"location":"chapters/05-displaying-graphs/#circles-arrow-and-labels","title":"Circles, Arrow and Labels","text":""},{"location":"chapters/05-displaying-graphs/#force-directed-graphs","title":"Force Directed Graphs","text":""},{"location":"chapters/05-displaying-graphs/#adjusting-distances","title":"Adjusting Distances","text":""},{"location":"chapters/05-displaying-graphs/#left-to-right-and-top-down-hierarcies","title":"Left to Right and Top Down Hierarcies","text":""},{"location":"chapters/05-displaying-graphs/#pinning-foundational-concepts-and-goals","title":"Pinning Foundational Concepts and Goals","text":""},{"location":"chapters/05-displaying-graphs/#using-colors-and-shapes","title":"Using Colors and Shapes","text":""},{"location":"chapters/05-displaying-graphs/#using-size-and-borders","title":"Using Size and Borders","text":""},{"location":"chapters/05-displaying-graphs/#placing-labels-and-using-abbreviations","title":"Placing Labels and Using Abbreviations","text":""},{"location":"chapters/05-displaying-graphs/#abstraction-and-clustering","title":"Abstraction and Clustering","text":""},{"location":"chapters/05-displaying-graphs/#leveraging-taxonomies-and-ontologies","title":"Leveraging Taxonomies and Ontologies","text":""},{"location":"chapters/05-displaying-graphs/#_1","title":"Displaying Graphs","text":""},{"location":"chapters/15-dependency-analysis/","title":"Dependency Analysis","text":"<p>In this chapter we will look at algorithms that help find all the dependencies of a given concept within a course learning graph.</p> <p>This is not just finding all the direct dependencies of a concept. It is also about finding the dependencies of the dependencies etc. The number of levels we search is called the number of \"hops\" in the dependency graph.</p>"},{"location":"chapters/17-lms-integration/","title":"Integrating with LMSs","text":""},{"location":"prompts/","title":"Prompts to Create Learning Graphs","text":""},{"location":"prompts/#concept-enumeration","title":"Concept Enumeration","text":""}]}